<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Matt Swanson's Blog</title>
 <link href="http://mdswanson.com/atom.xml" rel="self"/>
 <link href="http://mdswanson.com/"/>
 <updated>2017-04-27T18:47:42+05:30</updated>
 <id>http://mdswanson.com/</id>
 <author>
   <name>Matt Swanson</name>
   <email>matt@mdswanson.com</email>
   <url>mdswanson.com</url>
 </author>

 
 <entry>
   <title>How to start a peer group</title>
   <link href="http://mdswanson.com/blog/2017/03/29/how-to-start-a-peer-group.html"/>
   <published>2017-03-29T00:00:00+05:30</published>
   <updated>2017-03-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2017/03/29/how-to-start-a-peer-group</id>
   <content type="html">&lt;p&gt;A super tactical list for starting a &lt;a href=&quot;http://blog.drift.com/peer-groups&quot;&gt;peer group&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;organizing-the-group&quot;&gt;Organizing the group&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Pick two people (that you already know) that you want in the group – invite them&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Hey, I’m organizing a peer group focusing on &lt;strong&gt;topic&lt;/strong&gt; – are you interested in participating in a small group discussion with other local folks?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask those people to recommend two people they want to be a part of the group – invite them, too&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You should have 6-7 people now – if not, keep asking people that are interested to recommend people to invite&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send out three dates for a half-day meeting with &lt;a href=&quot;http://doodle.com/&quot;&gt;Doodle&lt;/a&gt; – pick the soonest date that everyone can make&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Email everyone (in one email thread) with the date and meeting agenda – this is now your discussion forum&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will host the first meeting so book the space and handle food&lt;/p&gt;

    &lt;h2 id=&quot;day-of-the-first-meeting&quot;&gt;Day of the first meeting&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will volunteer to be the moderator of the first meeting&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start on time and have everyone introduce themselves – name, company, role, what they want to get out of the group&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set the rules of engagement – use &lt;a href=&quot;https://en.wikipedia.org/wiki/Chatham_House_Rule&quot;&gt;Chatham House Rule&lt;/a&gt; unless there is a strong reason not to&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Explain the discussion format – use &lt;a href=&quot;http://agilecoffee.com/leancoffee/&quot;&gt;Lean Coffee&lt;/a&gt; unless there is a strong reason not to&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have a productive, educational, energizing, and cathartic discussion with your new peer group&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get a volunteer to host next time (quarterly works well)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Email everyone thanking them for their participation and enjoy the rest of your day&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat quarterly, expanding the group with new people as necessary&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;If you’ve started a peer group with this list, ping me &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;on Twitter&lt;/a&gt; and let me know how it went.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Algorithms to Live By</title>
   <link href="http://mdswanson.com/writeup/2017/02/14/algorithms-to-live-by.html"/>
   <published>2017-02-14T00:00:00+05:30</published>
   <updated>2017-02-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2017/02/14/algorithms-to-live-by</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Algorithms to Live By” covers a wide breadth of computer science and machine learning topics (caching, halting problem, Big O, Bayesian statistics, NP-completeness, etc) – but it frames each topic as a tool for understanding or solving real-world problems. It’s basically &lt;a href=&quot;http://mdswanson.com/writeup/2012/07/25/the-personal-mba.html&quot;&gt;“The Personal MBA”&lt;/a&gt; for computer science. The format is superb – enough detail to get readers familiar with a concept and be able to recognize potential uses, while providing source material references for when you need to go deeper.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are my takeaways?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of problems we encounter in our personal and work life that could be solved with basic algorithms. The optimal stopping algorithm can help us know when we’ve seen enough candidates for a job position. Caching algorithms can help you clean out old clothes in your closet. Sometimes just doing things randomly can you get very close to an optimal result, for a fraction of the effort.&lt;/p&gt;

&lt;p&gt;I’m less interested in sorting my sock drawer with a merge-sort, but seeing examples of how to apply algorithms served as a useful guideline for finding non-silly applications.&lt;/p&gt;

&lt;p&gt;The chapter on Bayes’ Rule was my favorite. My biggest insight was the discussion of how to consider the distribution of a system when trying to estimate. Even knowing if something is Gaussian, power-law, or Erlang distributed can have a huge impact in how we predict things.&lt;/p&gt;

&lt;p&gt;Consider the following examples:&lt;/p&gt;

&lt;p&gt;If a boy is currently 6 years old, how long should we predict they will live if we know nothing else about them? Since we know life expectancy is a roughly normal distribution, we should predict they will live to be a little more than 78 (the average, plus a bit more since they aren’t in the far-left tail).&lt;/p&gt;

&lt;p&gt;Now what if we need to predict how much a movie will gross at the box office given it did $12M in its opening weekend? If we try to use the average like for predicting age, we will have a very high error because box office totals follow a power-law distribution. Instead, we should use a multiplicative factor.&lt;/p&gt;

&lt;p&gt;I found the book to be really enjoyable and helped me breach topics that I had previously ignored because of a high barrier to entry. Coming from an engineering background (not a CS background), I really appreciate this style of teaching topics through practical examples.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Software ate the world</title>
   <link href="http://mdswanson.com/blog/2017/02/14/why-machine-learning-is-interesting.html"/>
   <published>2017-02-14T00:00:00+05:30</published>
   <updated>2017-02-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2017/02/14/why-machine-learning-is-interesting</id>
   <content type="html">&lt;p&gt;It’s been over five years since Marc Andreessen proclaimed that &lt;a href=&quot;https://www.wsj.com/articles/SB10001424053111903480904576512250915629460&quot;&gt;“software is eating the world”&lt;/a&gt;. And he was right. Every person I talk to is using software in their job.&lt;/p&gt;

&lt;p&gt;When software started eating the world, there was low-hanging fruit. All the paper was removed. Even recreational sports leagues stopped being managed via phone calls and legal paper and started moving to the cloud.&lt;/p&gt;

&lt;p&gt;A touted approach for finding software product ideas was taking an Excel sheet that was emailed back and forth and turning it into a SaaS product.&lt;/p&gt;

&lt;p&gt;And this progress was, for the most part, great.&lt;/p&gt;

&lt;p&gt;But it’s been five years.&lt;/p&gt;

&lt;p&gt;The stuff that was easy to turn into software has been, well, turned into software. What remains is the hard stuff. The hard stuff needs expert, tacit knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;While the current wave of software can make us more efficient, it struggles to make us more effective.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fifteen years ago, a manager was delighted to have electronic tool to track project status. And five years ago, they were delighted by a beautiful interface and powerful reports they could create. But now, to delight them we need software that anticipates a scheduling bottleneck before the manager even thinks about it.&lt;/p&gt;

&lt;p&gt;Beautiful, functional products are now table stakes. Customers want predictions, insights, and recommendations.&lt;/p&gt;

&lt;p&gt;Software ate the world because it provided value and solved problems. If we want software to keep providing more value and solving more problems, we have to shift toward building things that bring expert knowledge into our products.&lt;/p&gt;

&lt;p&gt;And for that, we need machine learning.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Undoing Project</title>
   <link href="http://mdswanson.com/writeup/2017/02/13/the-undoing-project.html"/>
   <published>2017-02-13T00:00:00+05:30</published>
   <updated>2017-02-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2017/02/13/the-undoing-project</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“The Undoing Project” is a look at the research partnership of Daniel Kahneman and Amos Tversky – a pair of Israeli psychologists that have done groundbreaking work on how humans make decisions. The book explores how the complementary personalities of Kahneman and Tversky led them to start collaborating, excel, and then ultimately drift apart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are my takeaways?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may know Kahneman from his seminal book &lt;a href=&quot;https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow&quot;&gt;“Thinking Fast and Slow”&lt;/a&gt; – a somewhat laboring tome about how humans process information and defer to one of two “systems” when making decisions. Tversky seems to be lesser known of the pair, but was more outgoing and skillful at communicating their work. It was interesting to read how the pair worked together to achieve something greater than the sum of the parts.&lt;/p&gt;

&lt;p&gt;The book covers a whirlwind of topics around Kahneman and Tverksy’s research, including anchoring, the availability heuristic, loss aversion, and prospect theory. These ideas are now common nomenclature among those discussing the intersection of decision making and psychology.&lt;/p&gt;

&lt;p&gt;My favorite sections were the detours to cover how the work of Kahneman and Tversky were being applied outside of an academic setting. One section showed our Houston Rockets GM Daryl Morey &lt;a href=&quot;http://www.slate.com/articles/arts/books/2016/12/how_daryl_morey_used_behavioral_economics_to_revolutionize_the_art_of_nba.html&quot;&gt;evaluated players while taking into account biases and fallacies&lt;/a&gt;; another section covered how &lt;a href=&quot;https://qz.com/879577/michael-lewis-the-undoing-project-exclusive-book-excerpt-a-doctor-in-toronto-who-helps-er-doctors-avoid-dumb-deadly-mistakes/&quot;&gt;human errors&lt;/a&gt; at hospitals were caused by predictable flaws in decision making or lack of statistical intuition.&lt;/p&gt;

&lt;p&gt;While these psychologist have a unique background (including time as special ops in the Israeli military), I ultimately wanted more of these detours that illustrated the principles in practice. This probably isn’t the &lt;a href=&quot;http://www.imdb.com/title/tt0878804/&quot;&gt;next&lt;/a&gt; &lt;a href=&quot;http://www.imdb.com/title/tt1210166/&quot;&gt;great&lt;/a&gt; &lt;a href=&quot;http://www.imdb.com/title/tt1596363/&quot;&gt;Michael Lewis film adaptation&lt;/a&gt; – but you never know!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sam Walton: Made in America</title>
   <link href="http://mdswanson.com/writeup/2017/02/13/sam-walton-made-in-america.html"/>
   <published>2017-02-13T00:00:00+05:30</published>
   <updated>2017-02-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2017/02/13/sam-walton-made-in-america</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Made in America” is an auto-biography about the founder of Wal-Mart (Sam Walton) and the early history of the company. For a company that is now reviled by some as an evil destroyer of local businesses, the origins and values of the company in the early days paint a different picture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are my takeaways?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was very difficult to wrap my head around Wal-Mart being the pioneer of “discounting”. Discount stores are so common now that it seems impossible that they weren’t even a thing just 50 years ago. The concept of selling products at a low price (with low margins) and making up for it with high volume was truly innovate at the time.&lt;/p&gt;

&lt;p&gt;I was reminded of Paul Graham’s infamous &lt;a href=&quot;http://paulgraham.com/ds.html&quot;&gt;“Do things that don’t scale”&lt;/a&gt; motto several times. As Wal-Mart started expanding from the first store in Arkansas, Walton wanted to remain highly involved in the launch of new stores in neighboring states. To deal with the logistics nightmare of traveling between stores, Walton got his own pilot’s license so he could fly between locations – reducing travel time from 8 hours to 1 hour.&lt;/p&gt;

&lt;p&gt;Walton was constantly checking out competitors and was not shy about “borrowing” good ideas and bringing them back to his own stores. Walton would stop by the local general store in any town he visited, even when on family vacations. He learned the secret sauce by simply walking up to employees or managers and talking about their day-to-day operations.&lt;/p&gt;

&lt;p&gt;This practice is something we could always be doing more of in business. It’s easy to insulate ourselves and ignore the services our competitors are offering (or how they are selling them).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How much does 'crunch time' hurt team morale?</title>
   <link href="http://mdswanson.com/blog/2017/02/13/how-much-does-crunch-time-hurt-team-morale.html"/>
   <published>2017-02-13T00:00:00+05:30</published>
   <updated>2017-02-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2017/02/13/how-much-does-crunch-time-hurt-team-morale</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post originally appear on the &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt; blog. Reposted here for archival purposes.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Crunch time before major deadlines is a high stress time for project teams. We dig into the data to see what it could tell us about the impacts of crunch time on team morale.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We’re launching in 3 weeks, period”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These six words send shivers down the spines of developers because of what it signals: &lt;strong&gt;crunch time&lt;/strong&gt;. It is common for the weeks before a major milestone to bring long hours, elevated stress, and peak snippiness among project teams.&lt;/p&gt;

&lt;p&gt;But is the crunch time despair just a myth or can we observe measurable drops in team morale as we approach project deadlines? And what about the lasting effects of crunch time? Is it a temporary dip or does it have long-term consequences?&lt;/p&gt;

&lt;p&gt;We’ve been tracking team morale across several project teams and this week I wanted to dive into one project and see what the data can show us about the impact of crunch time on team morale.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;can-we-find-a-link-between-team-morale-and-crunch-time&quot;&gt;Can we find a link between team morale and crunch time?&lt;/h2&gt;

&lt;p&gt;Every work day at 3pm EST, all team members were asked to respond to an email asking “How are you feeling today?”. Team members could pick “Good”, “Meh”, or “Bad” (or decline to answer).&lt;/p&gt;

&lt;p&gt;This mood data was collected using &lt;a href=&quot;/morale/&quot;&gt;MoraleApp.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For each work day, we calculated the team mood using a simple average of the responses (after converting to a numeric scale).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-crunch-avg-v2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This data was collected from one project team over 8 months. This particular team was building a web application and was using a mix of scrum and agile practices. Over the duration of the project, the team size ranged from five to eight engineers and the overall participation of the team was 73%.&lt;/p&gt;

&lt;h2 id=&quot;establishing-a-baseline-happiness-level&quot;&gt;Establishing a baseline happiness level&lt;/h2&gt;

&lt;p&gt;In addition to the average mood, we can plot a “normal range” for this team. This band is based on the historical average of the team – a daily mood value within this range is normal for this team.&lt;/p&gt;

&lt;p&gt;Days with values above the range can be thought of as especially good days and days below the range are bad days for the team. Values that fall outside of the range can indicate a special “event” that needs extra attention.&lt;/p&gt;

&lt;p&gt;It is important to establish a baseline for each team; without this normal range, it is difficult to detect whether any swings are significant or just normal fluctuations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-crunch-trends-v2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We defined a “normal range” for the team using a modified version&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; of &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_limits&quot;&gt;Process Control Limits&lt;/a&gt;. To help smooth out the data, we’ve also added a two week rolling average. It is still useful to see individual days that have large spikes in team morale, but we also wanted to see a trend accounting for the cyclical, two week development sprints of the team.&lt;/p&gt;

&lt;h2 id=&quot;are-bugs-contributing-to-crunch-time-woes&quot;&gt;Are bugs contributing to crunch time woes?&lt;/h2&gt;

&lt;p&gt;Bugs can be a great indicator of trouble brewing for a project. We wanted to see if the number of bugs created would have any interesting relationship to the team mood. Using &lt;a href=&quot;https://developer.atlassian.com/jiradev/jira-apis/jira-rest-apis/jira-rest-api-tutorials&quot;&gt;JIRA&lt;/a&gt;, we pulled a report of the number of bugs created each day and plotted them below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-crunch-bugs-v2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In particular, this team had a large spike in created bugs during February. We observe a corresponding drop in reported team mood starting in February and continuing throughout the month. Are unhappy developers introducing more bugs? Or is the pile of new bugs making the team feel worse?&lt;/p&gt;

&lt;h2 id=&quot;finding-crunch-time&quot;&gt;Finding crunch time&lt;/h2&gt;

&lt;p&gt;To learn more, we next added markers corresponding to the major project releases (so far the team has had two releases, with a third upcoming). After combining all of our data, we start to see a more clear picture of the team’s morale.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-crunch-story-v2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the weeks before the first major release, more bugs were uncovered as QA testing ramped up. Edge cases were being discovered and critical bugs and blockers began to show up on the team’s radar.&lt;/p&gt;

&lt;p&gt;The team was trying to stabilize the codebase, fix critical bugs, and squeeze in the last important features before the first release. Stress levels rose and uncertainty about hitting the target date started to impact the morale of the team.&lt;/p&gt;

&lt;p&gt;This team has seen two predictable drops in team morale in the weeks leading up a major release. &lt;strong&gt;The average team morale dropped 17% during crunch time before Release 1 and 11% before Release 2&lt;/strong&gt;. The data supports the long-held belief about software projects: team morale declines during the crunch time before a deadline.&lt;/p&gt;

&lt;h2 id=&quot;does-the-team-bounce-back-after-crunch-time&quot;&gt;Does the team bounce back after crunch time?&lt;/h2&gt;

&lt;p&gt;The data shows that this team is very resilient. While the mood drops during crunch time, it quickly rebounds after a release. This is an encouraging sign for a team – members are likely willing to help each other out, persist through difficult stretches, and are proud of the work they accomplished.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-crunch-bounceback-v2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this team, the weeks with the highest overall reported morale came 1-3 weeks after the release was out the door and deployed smoothly to customers.&lt;/p&gt;

&lt;h2 id=&quot;how-can-we-use-these-metrics-in-a-forward-looking-way&quot;&gt;How can we use these metrics in a forward-looking way?&lt;/h2&gt;

&lt;p&gt;This team is approaching the third major release of the project. With clear patterns in the first two releases, the team leads can take steps to mitigate the expected morale drop.&lt;/p&gt;

&lt;p&gt;And the changes don’t need to be extreme. Simply reminding the team at a stand-up meeting that they are in crunch mode and should expect bugs or issues to come in can help keep everyone in a positive mindset.&lt;/p&gt;

&lt;p&gt;The team can start looking at the morale data on a more regular basis to detect large drops, talk about the cause, and work towards a solution. It might be a good time to schedule a team lunch or celebration, or even just make an extra effort to show appreciation to a teammate.&lt;/p&gt;

&lt;p&gt;Speaking with the team lead, the third release is going smoothly in terms of bugs and getting feature-complete by the deadline, but the team is still seeing the overall morale start to dip down. When asked what other factors might be contributing, uncertainty about the scope of a future, high-risk release was raised. We’re not sure if this is the root cause, but it got a good conversation started.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For this particular team, the data supports a link between crunch time before major releases and a decrease in the team morale. An increase in bugs created and uncertainty about future releases may be a part of the underlying cause.&lt;/p&gt;

&lt;p&gt;By being proactive, the team can take steps to mitigate the effects of crunch time. Monitoring morale after a release to make sure it returns to normal levels can help prevent negative long-term impacts.&lt;/p&gt;

&lt;p&gt;Further analysis could include looking at changes to the team size, recurring meetings (e.g. sprint planning), or general seasonal fluctuations of team morale.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;We opted to loosen the typical control limit band (±3σ) as we are willing to accept more potential false positives from negative swings. In practice, we found these lower limits to better match the overall feeling of the teams. We’re still experimenting with finding the right limits.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A data-driven approach to finding toxic meetings</title>
   <link href="http://mdswanson.com/blog/2017/02/13/a-data-driven-approach-to-finding-toxic-meetings.html"/>
   <published>2017-02-13T00:00:00+05:30</published>
   <updated>2017-02-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2017/02/13/a-data-driven-approach-to-finding-toxic-meetings</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post originally appear on the &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt; blog. Reposted here for archival purposes.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Bad meetings can be a drag on team morale, especially when a recurring meeting becomes ‘toxic’. By measuring team morale on days with recurring meetings, we can detect if there is a significant change compared to normal and identify meetings that could potentially be improved.&lt;/p&gt;

&lt;p&gt;There is nothing that developers loathe more than meetings. (Okay, maybe they hate aggressive recruiters more, but meetings are right up near the top!)&lt;/p&gt;

&lt;p&gt;As more and more teams shift to agile or scrum methodologies, the amount of time spent by developers in recurring meetings is on the rise. Developers have been burned by agenda-less meetings that interrupt their flow and – in the extreme cases – &lt;a href=&quot;https://gettingreal.37signals.com/ch07_Meetings_Are_Toxic.php&quot;&gt;are flat-out toxic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we know that there are &lt;a href=&quot;https://www.atlassian.com/agile/ceremonies&quot;&gt;coordination and knowledge-sharing benefits&lt;/a&gt; that come from well-run meetings. The ultimate goal is to strike a balance: maximizing effective sessions and eliminating those that simply waste time.&lt;/p&gt;

&lt;p&gt;This week, we explore the impact of recurring meetings on team morale and try a data-driven approach to finding toxic meetings that are dragging down team morale.&lt;/p&gt;

&lt;h2 id=&quot;do-some-meetings-have-a-measurable-impact&quot;&gt;Do some meetings have a measurable impact?&lt;/h2&gt;

&lt;p&gt;Every work day at 3pm EST, all team members were asked to respond to an email asking “How are you feeling today?”. Team members could pick “Good”, “Meh”, or “Bad” (or decline to answer).&lt;/p&gt;

&lt;p&gt;This mood data was collected using &lt;a href=&quot;/morale/&quot;&gt;MoraleApp.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For each work day, we calculated the team mood using a simple average of the responses (after converting to a numeric scale). We also flagged work days that had recurring meetings attended by the whole team.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-meetings-t3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;caption&quot;&gt;Team 1: Recurring Meeting Breakdown&lt;/div&gt;

&lt;p&gt;Here are the results we collected over two months with a small team of mobile developers. We observe that team morale on days with either a Sprint Planning meeting or a Weekly Status call is lower than average.&lt;/p&gt;

&lt;p&gt;However, this can be slightly deceiving. We would expect some fluctuation among the team so just looking at the averages doesn’t paint the full picture. Luckily, there is a tool that can help us determine if our data is statistically significant or if we are observing random variance: the &lt;a href=&quot;http://www.evanmiller.org/ab-testing/t-test.html&quot;&gt;two-sample T-test&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Baseline&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Meeting&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Impact of Meeting?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Overall average&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sprint Planning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No significant difference&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Overall average&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Weekly Status&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No significant difference&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;caption&quot;&gt;Team 1: Two-Sample T-Test Results&lt;/div&gt;

&lt;p&gt;Huh. So even though the averages for days with meetings are lower, there is not statistical evidence that the difference is meaningful.&lt;/p&gt;

&lt;p&gt;For this team, our analysis does not show any meetings that are harmful to the team’s morale. Speaking with several members of the team, this was reasonable; the meetings were generally productive and had a clear focus.&lt;/p&gt;

&lt;h2 id=&quot;searching-for-toxic-meetings&quot;&gt;Searching for toxic meetings&lt;/h2&gt;

&lt;p&gt;Despite not finding any impact with Team 1, we found the methodology to be solid so we applied it to several other teams to look for any signs of toxic meetings.&lt;/p&gt;

&lt;p&gt;Here we found a scrum team with several recurring meetings and over 6 months of morale data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-meetings-t1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;caption&quot;&gt;Team 2: Recurring Meeting Breakdown&lt;/div&gt;

&lt;p&gt;The Backlog Grooming meetings jumped out right away. But again, we need to perform further analysis to determine if the impact is significant.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Baseline&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Meeting&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Impact of Meeting?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Overall average&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sprint Planning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No significant difference&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Overall average&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Backlog Grooming&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Morale lower (95% confidence)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;caption&quot;&gt;Team 2: Two-Sample T-Test Results&lt;/div&gt;

&lt;p&gt;Aha! We are able to conclude there that is a measurable negative impact to morale on days when the team has Backlog Grooming meetings.&lt;/p&gt;

&lt;p&gt;Like before, it is important to confirm the data with reality. The team reported that these meetings were “always draining” and they had discussed finding a new way to run the meeting several times. One particularly bad occurrence of this meeting corresponded to the all-time lowest morale day reported by the team (with multiple members calling out the meeting as the cause of their unpleasant day).&lt;/p&gt;

&lt;p&gt;Recently, the team made a major change to the structure of the meeting and will be monitoring their morale data to determine if the change is having a positive impact.&lt;/p&gt;

&lt;h2 id=&quot;do-developers-just-hate-all-meetings&quot;&gt;Do developers just hate all meetings?&lt;/h2&gt;

&lt;p&gt;On the plus side, we were able to identify recurring events that actually &lt;em&gt;improved&lt;/em&gt; team morale. One such team was a long-running (2+ year) team that saw high morale on days with Retros.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-meetings-t2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Baseline&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Meeting&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Impact of Meeting?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Overall average&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sprint Planning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No significant difference&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Overall average&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Retro&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Morale higher (94% confidence)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;caption&quot;&gt;Team 3: Can we find a meeting that improves morale?&lt;/div&gt;

&lt;p&gt;The team noted that retros were an opportunity to focus on making things better for the future and highlight positive aspects of the project.&lt;/p&gt;

&lt;p&gt;Retrospectives are a &lt;a href=&quot;https://www.benlinders.com/2011/establishing-and-maintaining-stable-teams/&quot;&gt;great way to build stable and effective teams&lt;/a&gt; and now we have data to support this long-held belief.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;By looking at statistically significant changes in morale on days with recurring team meetings, we can identify potentially toxic meetings and work to improve the format or eliminate them completely.&lt;/p&gt;

&lt;p&gt;We would caution against implying causation from these findings. This approach assumes that recurring meetings have a large impact on the overall morale of team members and may be subject to other factors (day of the week, timing of sprint calendars).&lt;/p&gt;

&lt;p&gt;Ultimately, this analysis is useful for highlighting meetings that could be problematic so that the team can discuss if the data matches reality and if any changes should be made.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Closing Down a Product, Gracefully</title>
   <link href="http://mdswanson.com/blog/2016/11/03/closing-down-a-product.html"/>
   <published>2016-11-03T00:00:00+05:30</published>
   <updated>2016-11-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/11/03/closing-down-a-product</id>
   <content type="html">&lt;p&gt;Almost weekly it seems that a service or app shuts down and someone submits the announcement email to discussion sites for it to be skewered by internet commenters for following the same anti-patterns.&lt;/p&gt;

&lt;p&gt;I recently made the decision to shutdown a &lt;a href=&quot;/morale/&quot;&gt;SaaS product&lt;/a&gt; that I’ve been running. After looking through examples (both good and bad) of these kind of announcements, I wanted to share the handful of guiding principles that I found useful.&lt;/p&gt;

&lt;h2 id=&quot;empathy-for-users&quot;&gt;Empathy for users&lt;/h2&gt;

&lt;p&gt;It sucks when something you use shuts down. Even if you fully support the company’s decision, it still sucks. While it sucks for me, personally, that I’m shutting down this product, it sucks more for the hundreds of users for whom I’ve added a low-value, high-urgency task to their plate.&lt;/p&gt;

&lt;p&gt;Avoid focusing inward and using flowery language to describe your &lt;a href=&quot;https://ourincrediblejourney.tumblr.com/&quot;&gt;“incredible journey”&lt;/a&gt;. It’s not incredible for your users that you are shutting down, it’s a pain.&lt;/p&gt;

&lt;h2 id=&quot;give-plenty-of-notice&quot;&gt;Give plenty of notice&lt;/h2&gt;

&lt;p&gt;It takes time for everyone to read your email or see your announcement. It takes time for users to discussion their alternative options internally. It takes time to transition to a new product. And you’ll need time to gracefully ramp down your infrastructure.&lt;/p&gt;

&lt;p&gt;Be courteous and give as much notice as reasonably possible. In my case, I gave users 3 months notice that I would be discontinuing the product – and waived the cost of all paid plans during that period.&lt;/p&gt;

&lt;h2 id=&quot;provide-migration-options&quot;&gt;Provide migration options&lt;/h2&gt;

&lt;p&gt;Founders have a great sense of the competitive landscape for their product. They know what other options customers have. Share that information generously.&lt;/p&gt;

&lt;p&gt;In the shutdown notice for my product, I included multiple options for free and paid alternatives – including a short summary of the product and how it was different (or the same) as mine.&lt;/p&gt;

&lt;h2 id=&quot;its-their-data-let-them-have-it&quot;&gt;It’s their data, let them have it&lt;/h2&gt;

&lt;p&gt;Users trusted you to store their data. It is &lt;em&gt;their&lt;/em&gt; data. Make it painless for them to get an export of their data in an easy to consume format (CSV, not SQL dumps…). It’s not enough to point to your API and tell people they can scrape it themselves.&lt;/p&gt;

&lt;p&gt;If you make it easy to export, competitors may help make it easy to import – making the transition less painful for your users. My app is pretty small and &lt;a href=&quot;https://blog.teammood.com/en/2016/10/05/moraleapp-is-shutting-down.html&quot;&gt;it still happened for us&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dont-open-source-it&quot;&gt;Don’t open source it&lt;/h2&gt;

&lt;p&gt;Multiple customers inquired about releasing the app as an open source project. This is almost always a bad idea. “Just throw the repo on GitHub” vastly underestimates the time and energy needed to support an open source project if you want it to be valuable for people.&lt;/p&gt;

&lt;p&gt;Especially if there are alternate tools or competitors, releasing your code as open source without dedicated effort to support it will lead to a bad experience for everyone. It’s no fun to be the owner of a “dead” project on GitHub and it’s no fun to be a customer who inherits a big ball of legacy code that was never meant to run on-premise.&lt;/p&gt;

&lt;p&gt;I know this is not what people want to hear, but it’s reality.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For transparency, included below is the email I sent to the 2,060 people registered for MoraleApp. After sending the email, I also added a site-wide banner to app that linked to &lt;a href=&quot;/morale/&quot;&gt;a published version&lt;/a&gt; of the same message.&lt;/p&gt;

&lt;p&gt;It’s not perfect but I’ve tried my best to follow the guidelines above:&lt;/p&gt;

&lt;div class=&quot;email-snippet&quot;&gt;
&lt;h3&gt;MoraleApp is shutting down&lt;/h3&gt;
&lt;br /&gt;
&lt;p&gt;I'm here to deliver some bad news: &lt;b&gt;MoraleApp will be shutting down at the end of the year&lt;/b&gt;. Thank you so much for your support over the past four years that we've been offering the service.&lt;/p&gt;

&lt;p&gt;I know it's a pain to deal with services shutting down. This was not a decision that we made lightly. After investing more time and resources into the product over the past six months, we've made the decision to discontinue the service at the end of the year.&lt;/p&gt;

&lt;p&gt;Daily emails will still be sent thru December 31, 2016. After that date, no more emails will go out and access to the site will no longer be available. Paid customers have been refunded for their most recent month and will not be charged going forward thru the end of the year.&lt;/p&gt;

&lt;p&gt;If you would like to download an export of your data, log in with your admin account and then visit Reports &amp;gt; Monthly Report and click &quot;Export to CSV&quot;. This will download a CSV file containing all mood data for each of your teams.&lt;/p&gt;

&lt;p&gt;For those of you still interested in tracking team morale, here are some alternative services that we recommend:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.teammood.com/en/&quot;&gt;TeamMood&lt;/a&gt;: the most similar alternative, email based and daily&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tinypulse.com/&quot;&gt;TinyPulse&lt;/a&gt;: weekly cadence, but more customizable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nikoniko.co/&quot;&gt;NikoNiko&lt;/a&gt;: mobile app based mood tracker&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://oskar.hanno.co/&quot;&gt;Oskar&lt;/a&gt;: Slackbot that tracks team happiness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have additional questions or concerns, email me at XXX and I'll do my best to help.
&lt;/p&gt;

&lt;p&gt;
-- Matt Swanson&lt;br /&gt;
MoraleApp Founder
&lt;/p&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Adventures in Content Marketing</title>
   <link href="http://mdswanson.com/blog/2016/09/26/adventures-in-content-marketing.html"/>
   <published>2016-09-26T00:00:00+05:30</published>
   <updated>2016-09-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/09/26/adventures-in-content-marketing</id>
   <content type="html">&lt;p&gt;I came across the &lt;a href=&quot;https://priceonomics.com/the-content-marketing-handbook/&quot;&gt;Priceonomics Content Marketing Handbook&lt;/a&gt; – a jumbo-sized blog post (that could easily be a book) that outlined a strategy for creating interesting content. The key idea is to tell a story using data that only you have (or are willing to research). By using your proprietary data, you can write posts that no one else can, which is critical in standing out in the crowded internet.&lt;/p&gt;

&lt;p&gt;I did a brainstorming session to try out this method for generating content ideas. In this case, I wanted to think about blog topics for SEP’s company blog. &lt;a href=&quot;http://www.sep.com/&quot;&gt;SEP&lt;/a&gt; is similar to other software development firms but there are some unique aspects that could turn into potentially great content:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We gave people unlimited PTO at our service company and we didn’t go out of business&lt;/li&gt;
  &lt;li&gt;How much does it actually cost to build a software project?&lt;/li&gt;
  &lt;li&gt;How many lines of code does a software company write in a year?&lt;/li&gt;
  &lt;li&gt;How and why of becoming an employee-owned software company (ESOP)&lt;/li&gt;
  &lt;li&gt;I started a consulting company, how do I “exit”?&lt;/li&gt;
  &lt;li&gt;Success of projects with and without discovery&lt;/li&gt;
  &lt;li&gt;What kind of insurance does a software consultancy need?&lt;/li&gt;
  &lt;li&gt;How do enterprise companies hire a software company?&lt;/li&gt;
  &lt;li&gt;What does a software company need to do to get ISO certified? Why should they?&lt;/li&gt;
  &lt;li&gt;How do you lay out an office for a software company?&lt;/li&gt;
  &lt;li&gt;Investing in professional development / how to run a professional development program&lt;/li&gt;
  &lt;li&gt;Running technical book clubs at work&lt;/li&gt;
  &lt;li&gt;The first five decisions your dev team needs to answer before starting a project&lt;/li&gt;
  &lt;li&gt;So you want to hire some interns, how exactly does that work? Career fairs, legal stuff, prep, on-boarding&lt;/li&gt;
  &lt;li&gt;How to reject a candidate when hiring / how to stop an interview&lt;/li&gt;
  &lt;li&gt;Basic financial literacy for everyone at a consulting company (capacity, effective rate, opportunities, bank account)&lt;/li&gt;
  &lt;li&gt;How much reserve cash should you have for a software consulting company?&lt;/li&gt;
  &lt;li&gt;I’m sponsoring a conference and have a booth, what am I supposed to do now?&lt;/li&gt;
  &lt;li&gt;Sharing weekly staffing meeting notes with the whole company&lt;/li&gt;
  &lt;li&gt;Tracking company project experience: why, how, and the troubles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I thought of a few ideas that were heavier on the story and research aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The history of sticky notes and why software companies use so many&lt;/li&gt;
  &lt;li&gt;The same principles that Chipotle uses to make a burrito is used to deliver software&lt;/li&gt;
  &lt;li&gt;Why government software is so expensive (example: TSA screening app)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are all of these ideas winners? No. But I think there are some ideas that are more interesting and would attract more readers than yet-another article on the benefits of TDD or how to get started with NodeJS. My biggest take-away was that we don’t recognize the value of the specific, “insider” knowledge that every business has.&lt;/p&gt;

&lt;h2 id=&quot;what-proprietary-information-do-i-have&quot;&gt;What proprietary information do I have?&lt;/h2&gt;

&lt;p&gt;Armed with this new approach, I turned my attention toward the product I am running: &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt;. In the past, our blog has featured analysis and commentary about office happiness studies, articles on conflict in the workplace, and so on. It was fine, but it was something that anyone else interested in employee engagement could do.&lt;/p&gt;

&lt;p&gt;We were not making use of our treasure-trove of data.&lt;/p&gt;

&lt;p&gt;We had daily mood data for hundreds of teams, some of which had been tracking for years. This is our unique advantage that we could use to tell a compelling story. People have strong opinions about the impact of certain practices on team morale, but often have no data to support their claims. But we have this data!&lt;/p&gt;

&lt;p&gt;Here are a few of the ideas I came up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The impact of crunch time on team morale&lt;/li&gt;
  &lt;li&gt;Do retrospectives make the team feel better or worse?&lt;/li&gt;
  &lt;li&gt;Do teams hate scrum planning meetings?&lt;/li&gt;
  &lt;li&gt;How does the size of a team effect morale? Adding/removing people?&lt;/li&gt;
  &lt;li&gt;What if we applied lean process techniques to managing team happiness?&lt;/li&gt;
  &lt;li&gt;Is there a measurable improvement in morale following a team celebration?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;doing-the-work&quot;&gt;Doing the work&lt;/h2&gt;

&lt;p&gt;Another crucial point from the Priceonomics playbook was that quality content takes time and effort. Researching, outlining, writing, editing, and producing charts and graphics can easily take 40 hours of work when you first start. Churning out a post in an hour seems good, but if the quality isn’t up to par, it is unlikely that your content will be spread.&lt;/p&gt;

&lt;p&gt;The act of writing is important, but it’s not the end of the work. In some ways, it is just the beginning. Until you build up a large readership, you have to be more intentional about promoting and sharing your content.&lt;/p&gt;

&lt;p&gt;The playbook is emphatic that you need to come up with a list of 50 people to personally contat about your post if you want it to get traction. This part was particularly scary to me – cold-emailing people about something I wrote made me feel a bit uncomfortable.&lt;/p&gt;

&lt;p&gt;But because I had put in the time, I felt better about sharing my work with others; I wasn’t just blasting them a link to some garbage. It was a struggle to identify the right people and it took the better part of a day to email, ping, and submit the article to my list of 50 contacts.&lt;/p&gt;

&lt;p&gt;I was pleasantly surprised to get replies from some of the “big names” that I reached out to. It was reassuring that no one seemed annoyed that I had shared my post with them.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;So after all the hemming and hawing, I published my first post following these guidelines: &lt;a href=&quot;/blog/2017/02/13/how-much-does-crunch-time-hurt-team-morale.html&quot;&gt;How much does ‘crunch time’ hurt team morale?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It received 1,013 views in the first week it was live and referred two people to sign up for paid plans. Not a great success in terms of views, but we converted two customers (a win) and we have a piece of content that is evergreen and uses proprietary data that only we have access to.&lt;/p&gt;

&lt;p&gt;One thing I’d like to improve is telling a better story around the data. I think my first attempt was a bit too dry and leaned heavily on the data and analysis, instead of trying to create a more compelling narrative.&lt;/p&gt;

&lt;p&gt;Like every marketing channel, there is no silver bullet. But so far, this has been the most successful mechanism for my product. It was hard work – I always find writing prose to be more draining than writing code – but I was happy with the result.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Podcast Roundup IV</title>
   <link href="http://mdswanson.com/blog/2016/09/12/podcast-roundup-iv.html"/>
   <published>2016-09-12T00:00:00+05:30</published>
   <updated>2016-09-12T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/09/12/podcast-roundup-iv</id>
   <content type="html">&lt;p&gt;Several years ago I wrote about &lt;a href=&quot;http://mdswanson.com/blog/2010/10/28/podcast-roundup.html&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://mdswanson.com/blog/2011/05/16/podcast-roundup-ii.html&quot;&gt;podcast&lt;/a&gt; &lt;a href=&quot;http://mdswanson.com/blog/2011/10/01/podcast-roundup-iii.html&quot;&gt;recommendations&lt;/a&gt;. Five years later, I don’t listen to most of those anymore. Either they stopped airing or I just moved on.&lt;/p&gt;

&lt;p&gt;But podcasts are the greatest so here is an updated list of newish podcasts I think are worth your time.&lt;/p&gt;

&lt;h2 id=&quot;seeking-wisdom&quot;&gt;Seeking Wisdom&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; David Cancel, Dave Gerhardt&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Topics:&lt;/strong&gt; product development, career growth&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://seekingwisdom.io/tagged/podcast&quot;&gt;Seeking Wisdom&lt;/a&gt; is short but sweet. Each episode is between 15-30 minutes, but they pack a big punch. Their is usually a singular topic for each show and David and Dave share their personal take on it.&lt;/p&gt;

&lt;p&gt;Why should you care?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;David did some cool stuff (Drift, HubSpot, Performable) and is just a chill dude&lt;/li&gt;
  &lt;li&gt;The intro music is :fire:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-intern&quot;&gt;The Intern&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; Allison Behringer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Topics:&lt;/strong&gt; serialized podcast about a woman breaking into the startup world&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://theintern.fm/&quot;&gt;The Intern&lt;/a&gt; – not to be confused with that &lt;a href=&quot;http://www.imdb.com/title/tt2361509/&quot;&gt;Anne Hathaway/Robert De Niro movie&lt;/a&gt; that was secretly kinda good – is a well-produced, documentary style podcast about a woman trying to find her way in the New York startup scene. Allison gets hired as an intern at a &lt;a href=&quot;https://betaworks.com/&quot;&gt;tech accelerator&lt;/a&gt; and is tasked with making a podcast about the company. (Aside: I’m a sucker for meta-media like this – a podcast about someone trying to start a podcast).&lt;/p&gt;

&lt;p&gt;Why should you care?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NPR-level production&lt;/li&gt;
  &lt;li&gt;Candid and vulnerable conversations are just good radio&lt;/li&gt;
  &lt;li&gt;The ad reads are enjoyable&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;quick-hitters&quot;&gt;Quick-hitters&lt;/h1&gt;

&lt;p&gt;Since it’s been five years since the last roundup I did, here are small overviews of the podcasts I’ve picked up and stuck with over that time period. Some of these are more popular so you might have heard them already, some of these are completely random and I don’t know if I would even recommend.&lt;/p&gt;

&lt;h2 id=&quot;startup&quot;&gt;Startup&lt;/h2&gt;
&lt;p&gt;Season 01: Guy quits radio job to start company that makes podcasts (this &lt;a href=&quot;https://gimletmedia.com/show/startup/&quot;&gt;meta-podcast&lt;/a&gt; is the first product), things start bad but go mostly okay&lt;/p&gt;

&lt;p&gt;Season 02: Follows a single company throughout the season, this company has tons of struggles and seems realistic&lt;/p&gt;

&lt;p&gt;Season 03: Stand-alone episodes featuring new companies every week&lt;/p&gt;

&lt;h2 id=&quot;the-bikeshed--giant-robots&quot;&gt;The Bikeshed + Giant Robots&lt;/h2&gt;
&lt;p&gt;Two podcasts from &lt;a href=&quot;https://thoughtbot.com/&quot;&gt;thoughtbot&lt;/a&gt; – very relevant to my work&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bikeshed.fm/&quot;&gt;The Bikeshed&lt;/a&gt; is for deeper technical discussions, &lt;a href=&quot;http://giantrobots.fm/&quot;&gt;Giant Robots&lt;/a&gt; has shifted lately to be more about product development&lt;/p&gt;

&lt;h2 id=&quot;the-pitch&quot;&gt;The Pitch&lt;/h2&gt;
&lt;p&gt;It’s basically Shark Tank for tech companies in &lt;a href=&quot;http://thepitch.fm/&quot;&gt;podcast form&lt;/a&gt;, good filler + exposure to new ideas&lt;/p&gt;

&lt;h2 id=&quot;kalzumeus-podcast&quot;&gt;Kalzumeus podcast&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/patio11&quot;&gt;Patrick McKenzie’s&lt;/a&gt; &lt;a href=&quot;http://www.kalzumeus.com/category/podcasts/&quot;&gt;podcast&lt;/a&gt; – worth putting up with terrible audio and irregular schedule because I always learn a ton of stuff&lt;/p&gt;

&lt;h2 id=&quot;the-random-show&quot;&gt;The Random Show&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/podcast/the-random-show-podcast/id417595309?mt=2&quot;&gt;Tim Ferriss + Kevin Rose&lt;/a&gt;. I like most of Tim Ferriss’ stuff and listen to his &lt;a href=&quot;http://fourhourworkweek.com/podcast/&quot;&gt;interview podcast&lt;/a&gt; on and off (more off lately), but I really like this version of the show with Kevin Rose. It also feels a little more fun and grounded when Kevin is there. Good for finding out about new gadgets, books, and other nick-nacks.&lt;/p&gt;

&lt;h2 id=&quot;stop-podcasting-yourself&quot;&gt;Stop Podcasting Yourself&lt;/h2&gt;
&lt;p&gt;Has nothing to do with tech, software, or self-improvement – just a stupid, fun &lt;a href=&quot;http://www.maximumfun.org/shows/stop-podcasting-yourself&quot;&gt;comedy podcast&lt;/a&gt; with two Canadian hosts and a random guest.&lt;/p&gt;

&lt;h2 id=&quot;techzing&quot;&gt;TechZing&lt;/h2&gt;
&lt;p&gt;The only holdover from the 2010 podcast list. I feel very personally invested in this show, but I can’t really think of any reason to listen if you haven’t already sunk &lt;a href=&quot;http://techzinglive.com/&quot;&gt;300+ hours&lt;/a&gt; into it like I have.&lt;/p&gt;

&lt;h2 id=&quot;serial&quot;&gt;Serial&lt;/h2&gt;
&lt;p&gt;It’s good. Buy the hype. &lt;a href=&quot;https://serialpodcast.org/season-two&quot;&gt;Season 02&lt;/a&gt; was underrated.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PS. I use &lt;a href=&quot;http://www.shiftyjelly.com/pocketcasts/&quot;&gt;Pocket Casts&lt;/a&gt; for Android + this &lt;a href=&quot;https://amzn.com/B004KPLS7K?tag=mdswanson-20&quot;&gt;Bluetooth dongle&lt;/a&gt; in my car for podcast enjoyment.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A Live Chat Experiment</title>
   <link href="http://mdswanson.com/blog/2016/08/05/a-live-chat-experiment.html"/>
   <published>2016-08-05T00:00:00+05:30</published>
   <updated>2016-08-05T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/08/05/a-live-chat-experiment</id>
   <content type="html">&lt;p&gt;Something I’ve been experimenting with for the past few weeks on &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt; (a tool for tracking team morale) is a Live Chat widget.&lt;/p&gt;

&lt;p&gt;You’ve probably seen these widgets before on the internet. They usually sit in the bottom corner of the page and let you ask a question to a real person instead of emailing a support inbox or searching a knowledge base.&lt;/p&gt;

&lt;p&gt;We recently made some changes to our pricing and I wanted to find out if people visiting the site had questions or concerns that were stopping them from starting a trial.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-i-did&quot;&gt;What I did&lt;/h2&gt;

&lt;p&gt;I looked at a couple options to try out a live chat widget. The go-to for SaaS products seems to be &lt;a href=&quot;https://www.intercom.io/&quot;&gt;Intercom&lt;/a&gt;. Intercom lets you do live chat, announce new features, and manage support requests coming in with email, Twitter, etc. It’s very polished but it seemed too powerful for my needs at the moment. I’m the only one manning the queue and I don’t have complex needs for tagging, auto-replies, or assignment rules and workflows yet.&lt;/p&gt;

&lt;p&gt;The product I ended up testing out is &lt;a href=&quot;https://www.drift.com/&quot;&gt;Drift&lt;/a&gt;. It’s more minimal but it gets the job done. There was a free plan that was perfect for my experiment and it was easy to setup. All of these live chat widgets are installed by pasting a JavaScript blob into your app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-live-chat.png&quot; alt=&quot;Chat widget&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first hurdle I ran into was: how do I know when someone wants to chat? Should I have the chat inbox window open all day? That didn’t seem reasonable.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://zapier.com/&quot;&gt;Zapier&lt;/a&gt; and Drifts custom integration so every time a customer started a live chat session, I would get pinged in Slack with a link to reply to the conversation. There are other options that allow you to chat directly from Slack, but this one worked best for my setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-slack-chat.png&quot; alt=&quot;I put a chat message in your chat window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other concern I had was my availability: am I going to have a bunch of people trying to chat at 3am while I’m sleeping? What if I’m in a meeting or on a call?&lt;/p&gt;

&lt;p&gt;It turns out that customizable “Hours of Availability” are a common feature for all the live chat services. I can allow live chats during normal work hours, but outside of that the widget displays an offline message (but still can collect async messages that I can reply to later via email).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-chat-offline.png&quot; alt=&quot;Closed for business&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-it-went&quot;&gt;How it went&lt;/h2&gt;

&lt;p&gt;Over the course of three weeks, I had around 25 chat conversations with users. There was one question around pricing (“Is there a free plan?”, “No, but all plans have a free trial!”) but the rest were either support questions from existing users or conversations that never actually started (“Hi”, “Hi, how can I help?”, radio silence).&lt;/p&gt;

&lt;p&gt;The volume seemed to trail off after I first pushed the widget onto the live site. My guess is that people noticed a new thing, tried it out, and then have largely been ignoring it. The widget also has a message that is displayed the first time a user sees it that explains how it work, but after that, it simply gets out of the way unless interacted with.&lt;/p&gt;

&lt;p&gt;Eventually, I decided to only show the widget on the marketing/pricing pages. My original goal was to try to answer questions from potential on-the-fence visitors, not to switch to chat as the primary means of customer support. Hopefully, this helps keep the volume in check.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;There is a big difference in expectation between email support and live chat support. I can offer pretty great email support (usually reply within an hour). Even with Slack notifications and being at my computer most of the day, it was taking a few minutes for me to notice and reply to a live chat message.&lt;/p&gt;

&lt;p&gt;Live chat users expect an answer to happen almost instantly. As soon as they send a message, they want to see the “Someone is typing…” message within 30 seconds. No one wants to sit around staring at a chat bubble for 5 minutes, they’ll just close the page.&lt;/p&gt;

&lt;p&gt;Ultimately, I can’t provide a great live chat support experience because I can’t sit in the app all day waiting for messages to come in. The volume is low and sporadic and the support team is currently just myself.&lt;/p&gt;

&lt;p&gt;The insights gained for being able to chat with a visitor looking at the product for the first time are still valuable, so I’ll be trying a few tweaks to see if I can still support live chat at an acceptable level.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How I Dunning-Kruger'd Marketing</title>
   <link href="http://mdswanson.com/blog/2016/08/03/dunning-krugerd-marketing.html"/>
   <published>2016-08-03T00:00:00+05:30</published>
   <updated>2016-08-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/08/03/dunning-krugerd-marketing</id>
   <content type="html">&lt;p&gt;I find it easy to rattle off a few marketing ideas for software products. I’ve read enough HackerNews and pop-business books to know the gist of it.&lt;/p&gt;

&lt;p&gt;Got a product for agile development teams? Why not just run some LinkedIn ads that target scrum masters at software companies? Boom. You are welcome for this brilliant insight.&lt;/p&gt;

&lt;p&gt;I think about this stuff periodically but I usually had no time or explicit permission to actually implement it when I was working on client projects. But the implementation is straightforward, right? Just run the campaign, users sign up, repeat.&lt;/p&gt;

&lt;p&gt;Except this kind of backseat marketing is only surface-level deep.&lt;/p&gt;

&lt;p&gt;But now, I’m running a product – &lt;a href=&quot;/morale/&quot;&gt;MoraleApp, the no-hassle team morale tracker&lt;/a&gt; – and I have the opportunity to go do these “quick win” marketing tactics. And I immediately started realizing the amount of oversimplification I had been doing and how much hubris I had.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here’s a play-by-play:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just run some LinkedIn ads that target scrum masters at software companies…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-the-ad&quot;&gt;1. The Ad&lt;/h2&gt;

&lt;p&gt;Okay, what’s the ad supposed to say exactly? Shit, never thought about that.&lt;/p&gt;

&lt;p&gt;After skimming a few blogs, I had something passable. I made an image that would stand out. I kept the CTA clear and simple. I made sure to stick a &lt;code class=&quot;highlighter-rouge&quot;&gt;utm_source&lt;/code&gt; parameter on the URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-linkedin-ad.png&quot; alt=&quot;My beautiful ad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good, next step. Targeting.&lt;/p&gt;

&lt;h2 id=&quot;2-audience-targeting&quot;&gt;2. Audience Targeting&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-linkedin-targets.png&quot; alt=&quot;Targeting is easy!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;United States. Job title “Scrum Master”. Software and IT companies. Easy enough!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-linkedin-audience.png&quot; alt=&quot;Seems low...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh wait, why are there only 2000 people in that segment? That doesn’t seem right. I guess I should probably target “Agile Coaches”, too. And “Lean Project Managers”, and “Agile Consultants”. How broad should I get?&lt;/p&gt;

&lt;p&gt;Actually, I have no frame of reference at all, is 2000 people that small?&lt;/p&gt;

&lt;p&gt;Well, gotta start somewhere…so let’s go with this.&lt;/p&gt;

&lt;h2 id=&quot;3-budget-and-bids&quot;&gt;3. Budget and Bids&lt;/h2&gt;

&lt;p&gt;Okay – “budget and bid pricing”. CPM vs CPC.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-linkedin-budget.png&quot; alt=&quot;Who's got the company card?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, let’s try CPM first just because that’s cheaper. No idea what to bid (aside from what the tool is telling me). What happens if I bid lower? Higher?&lt;/p&gt;

&lt;h2 id=&quot;4-time-for-the-magic&quot;&gt;4. Time for the magic!&lt;/h2&gt;

&lt;p&gt;I run the ad for a week. I get 13,936 impressions. There is one click. They bounce from my landing page after 4 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-linkedin-impressions.png&quot; alt=&quot;So many impressions!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-linkedin-stats.png&quot; alt=&quot;So few clicks!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Effective cost per click: $30.91, click through rate: 0.007%, conversions to trial: 0%.&lt;/p&gt;

&lt;p&gt;Even I know that’s terrible.&lt;/p&gt;

&lt;p&gt;But what is wrong? My landing page? My ad copy? The ad image? The targeting?&lt;/p&gt;

&lt;p&gt;I mention to someone who did marketing in the past that I wasn’t sure if I wanted to test a CPC campaign and pay $9 per click. Seemed really expensive! They laughed and told me they used to spend &lt;em&gt;several times&lt;/em&gt; that for a previous SaaS product and would be running multiple different versions of every ad.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This seemed so quick and easy, but now it’s looking almost impossible! Unlike writing software where – for the most part – your code either works or crashes with a stack trace pointing at the problem, so much of this marketing and acquisition work depends on trial and error and many, many experiments to find what works.&lt;/p&gt;

&lt;p&gt;I’ve gained a new appreciation for aspects of building products that I thought I could brute force with an engineering mindset. It’s common to view this work as “easy” and the people that do it as “ineffective”, but my experiences so far are telling me that couldn’t be further from the truth.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger effect&lt;/a&gt; rears its ugly head once again.&lt;/p&gt;

&lt;p&gt;If you need me, I’ll be in the breakroom eating Humble Pie while my new ad campaign sits in the “Pending Approval” queue.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Only Rule Is It Has to Work</title>
   <link href="http://mdswanson.com/writeup/2016/06/06/the-only-rule-is-it-has-to-work.html"/>
   <published>2016-06-06T00:00:00+05:30</published>
   <updated>2016-06-06T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2016/06/06/the-only-rule-is-it-has-to-work</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;  &lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moneyball&quot;&gt;“Moneyball”&lt;/a&gt; happened; but the adoption of sports analytics is still not as pervasive as folks would imagine. This book chronicles what happens two stats geeks are given the reins of a professional baseball team. They can try any innovative tactics they want…the only rule is that is has to work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;  &lt;br /&gt;
Ignore the baseball angle for a second. Without the backdrop of America’s pastime, this is the story of a traditional organization trying to become data-driven.&lt;/p&gt;

&lt;p&gt;It’s one thing to get people to buy into data-driven thinking (props to &lt;a href=&quot;http://www.imdb.com/title/tt1210166/&quot;&gt;Brad Pitt&lt;/a&gt; for doing his part), but Lindbergh and Miller stumble upon two unexpected challenges that arise when trying to use statistics and scientific approaches to making organizational decisions.&lt;/p&gt;

&lt;p&gt;First, people assume that the “data” part of “data-driven” is readily available, accurate, well-formated, and ready for analysis.&lt;/p&gt;

&lt;p&gt;For our intrepid baseball heroes, getting even basic historical statistics in their independent minor league was nearly impossible. In the MLB, every pitch, hit, player movement, and &lt;a href=&quot;http://i.imgur.com/exdPm3L.gifv&quot;&gt;obnoxious bat flip&lt;/a&gt; is meticulously tracked with a combination of &lt;a href=&quot;http://www.sportvision.com/baseball/pitchfx&quot;&gt;expensive cameras&lt;/a&gt; and a cottage industry of stat keepers. Lindbergh and Miller spend a large chunk of time (and call in personal favors) to equip their team with the bare necessities to collect the data they want before they can start letting the data “drive” decisions.&lt;/p&gt;

&lt;p&gt;In a business context, you will face the same challenge. Want to be more analytical in your hiring pipeline? Well, have you been tracking leads at college career fairs, success rate for phone screenings, the life-time value of hired employees, performance of your job postings, and anything else you think might be useful? No? There is a large upfront cost to get this setup that should not be overlooked.&lt;/p&gt;

&lt;p&gt;The second challenge is that your newly informed (and crazy sounding) decisions needs to be successful to convert skeptics. It has to work.&lt;/p&gt;

&lt;p&gt;Applying an unconventional (but statistically sound) defensive shift might be the right process, but if the &lt;em&gt;result&lt;/em&gt; is that the batter beats the odds and makes you look silly, it might be hard to recover credibility.&lt;/p&gt;

&lt;p&gt;People are not always rational. No matter how much data we have support our case, emotion can still prevail. If an A/B test shows that a baby picture of the CEO on your homepage increases sales by 5% – but causes mortal embarrassment when the CEO shows his colleagues – it will be an uphill battle to deploy this change. Getting a few quick wins builds trust that can weather bad results.&lt;/p&gt;

&lt;p&gt;By remembering that humans are not actually a collection of data points and statistics, we can be more deliberate about how we present data-driven analysis to build support and buy-in. Frame analytics as a way to help people improve their performance and achieve their goals, not an ivory tower from which to micromanage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;  &lt;br /&gt;
Even if you find baseball to be mind-numbingly boring (&lt;em&gt;raises hand&lt;/em&gt;), this book has a great story and highlights an often neglected aspect of becoming a data-driven organization: the tension between your cold, analytical model and the warm fuzzies of personal interactions.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Small wins: printers and rubies and sales calls</title>
   <link href="http://mdswanson.com/blog/2016/06/02/small-wins.html"/>
   <published>2016-06-02T00:00:00+05:30</published>
   <updated>2016-06-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/06/02/small-wins</id>
   <content type="html">&lt;p&gt;A quick update on some small wins and things I’ve learned while building &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt; – a no-hassle, team mood tracker.&lt;/p&gt;

&lt;h1 id=&quot;printer-friendly-styles&quot;&gt;Printer friendly styles&lt;/h1&gt;
&lt;p&gt;Around 10 different customers &lt;a href=&quot;http://mdswanson.com/blog/2016/04/19/getting-reacquainted-with-customers.html&quot;&gt;that took my survey&lt;/a&gt; mentioned wanting to print out reports from the app to put up on the wall or bring to a team meeting. Totally reasonable and the app looked terrible when printed (due to a configuration issue that caused the main CSS file to not load when printing).&lt;/p&gt;

&lt;p&gt;Styling an app to be printer-friendly is straight-forward, you just need &lt;code class=&quot;highlighter-rouge&quot;&gt;media=print&lt;/code&gt; in the link (or use &lt;code class=&quot;highlighter-rouge&quot;&gt;@media printer&lt;/code&gt; media queries). The hardest thing is just remembering to do it! A few notes/findings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CSS &lt;code class=&quot;highlighter-rouge&quot;&gt;box-shadow&lt;/code&gt;s don’t work well, so I turned those off when printing&lt;/li&gt;
  &lt;li&gt;Make sure to remove any unnecessary color to save people ink (i.e. switch gray text to black)&lt;/li&gt;
  &lt;li&gt;Remove navbar/footers/extra application chrome that isn’t needed&lt;/li&gt;
  &lt;li&gt;The page that people wanted to print had several charts and I didn’t want the printer to do a page break in the middle of them. The &lt;code class=&quot;highlighter-rouge&quot;&gt;page-break-inside&lt;/code&gt; CSS rule helps the browser know where to put page-breaks, but it’s not an exact science&lt;/li&gt;
  &lt;li&gt;Some browsers default to a setting that disables background images/colors (to save ink). This was a problem since each mood result for a team uses a background image (green, yellow, or red face). I might need to switch those icons to be actual &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; tags, but in the short term, there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;-webkit-print-color-adjust&lt;/code&gt; rule that can be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;exact&lt;/code&gt; to include images by default&lt;/li&gt;
  &lt;li&gt;Make sure to test printing in both portrait and landscape – the original responsive design!&lt;/li&gt;
  &lt;li&gt;Chrome allows you to fake out the media queries so you can iterate on the design of your print styles quickly; be sure to check the print preview in all the common browsers&lt;/li&gt;
  &lt;li&gt;Actually print out the reports to check font sizes/margins. It’s a bit tedious but the only way to know for sure!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-the-app-to-a-clean-slate&quot;&gt;Getting the app to a clean slate&lt;/h1&gt;
&lt;p&gt;As I &lt;a href=&quot;http://mdswanson.com/blog/2016/04/22/compounding-technical-debt.html&quot;&gt;mentioned before&lt;/a&gt;, I was dealing with a pile of tech debt from out-dated libraries. I was uncomfortable building many large features before upgrading. And I was worried about upgrading because the app had no tests! A bit of a catch-22 :(&lt;/p&gt;

&lt;p&gt;So I leaned into the pain and did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup a test suite (following must of the recommendations in the &lt;a href=&quot;https://robots.thoughtbot.com/how-we-test-rails-applications&quot;&gt;thoughtbot testing guide&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Wrote high-level, happy path tests with RSpec/Capybara – these are a bit slow, but I wanted full-stack tests that hit the database, router, and rendered real views. Isolated unit tests are great, but they wouldn’t help me figure out breaking issues as I upgraded library versions&lt;/li&gt;
  &lt;li&gt;Pared down the Gemfile – I tried to remove gems that I didn’t really need; less gems =&amp;gt; less surface-area for breakage when I bump the Rails version. I removed &lt;code class=&quot;highlighter-rouge&quot;&gt;csv_builder&lt;/code&gt; (was generating one CSV file…), &lt;code class=&quot;highlighter-rouge&quot;&gt;bloggy&lt;/code&gt; (moved the blog to GitHub Pages and out of the main Rails codebase), &lt;code class=&quot;highlighter-rouge&quot;&gt;xray-rails&lt;/code&gt; (a cool thing that I used for about 10 minutes several years ago), &lt;code class=&quot;highlighter-rouge&quot;&gt;watu_table_build&lt;/code&gt; (why was I using a weird fork of a weird gem to build tables? who knows!) and a couple other miscellaneous dependencies&lt;/li&gt;
  &lt;li&gt;Upgraded Rails from 3.2 to 4.0 – luckily, Rails has nice &lt;a href=&quot;http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html&quot;&gt;migration guides&lt;/a&gt; so I wasn’t completely lost. I fixed the broken stuff until the tests were passing&lt;/li&gt;
  &lt;li&gt;Upgraded Ruby from 2.1 to 2.3 – this one should have been painless, but something got screwed up when I installed via &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; and I ended up with a corrupted &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; module. I have no idea what happened or how, but re-installing ruby was the cure (after several hours of head-scratching)&lt;/li&gt;
  &lt;li&gt;Upgraded Rails from 4.0 to 4.1 – the best way to eat an elephant is one bite at a time…actually, just don’t eat elephants…&lt;/li&gt;
  &lt;li&gt;Upgraded Rails from 4.1 to 4.2 – more fixes per the migration guides and suddenly everything was green!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It took the better part of a week, but the terrible upgrade that I dreaded was over…and it wasn’t so bad.&lt;/p&gt;

&lt;h1 id=&quot;enterprise-sales-engineer&quot;&gt;Enterprise Sales Engineer&lt;/h1&gt;
&lt;p&gt;I reached out to a large user and asked about getting them onto an Enterprise plan. I haven’t built out the payment code yet, so I figured large customers that probably want an invoice might be good customers to start with.&lt;/p&gt;

&lt;p&gt;A few emails later, I was on the phone with a procurement person and feeling like an impostor. But I kept my cool and, to my delight, the cost was peanuts to this large company and everything went great. Still waiting to finalize all the details, but I made a sale! For a huge plan!&lt;/p&gt;

&lt;p&gt;I was dreading doing a sales call so I reframed the call as one afternoon of potential annoyance that would get me one month of runway ($$). Obviously not every call will end with a large sale, but this mentally appealed to me as I work toward a goal of generating enough revenue for this product so that it can “pay” one more person to work on it (instead of client work).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I was a bit down in my check-in meeting because I felt like I wasn’t getting much done the past month. But looking back, there were many small wins and sharing them helped me realize that.&lt;/p&gt;

&lt;p&gt;I still struggle a bit with direction: there is so much I could be doing, but nothing urgent that is pulling me. Hopefully, getting the app cleaned up will make it easier to tackle larger efforts that have a clearer focus. Next on the list: building out paid plans and payment infrastructure.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hacking my office Indy 500 pool: exploiting arbitrage in an inefficient market</title>
   <link href="http://mdswanson.com/blog/2016/05/31/hacking-indy-500-pool.html"/>
   <published>2016-05-31T00:00:00+05:30</published>
   <updated>2016-05-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/05/31/hacking-indy-500-pool</id>
   <content type="html">&lt;p&gt;We run an Indy 500 pool at my office every year. Because I am both a fantasy sports degenerate and a software engineer, it was inevitable that I would try way too hard to win. The result was a arbitrage prediction model that I built to help me crush the competition.&lt;/p&gt;

&lt;p&gt;The rules of the pool:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select 3 drivers, one from each qualifying tier (tier 1: 1-11, tier 2: 12-22, tier 3: 23-33)&lt;/li&gt;
  &lt;li&gt;Your score is the combined finish of your drivers&lt;/li&gt;
  &lt;li&gt;Lowest score wins $100, one entry per person&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-an-arbitrage-model-made-sense&quot;&gt;Why an arbitrage model made sense&lt;/h1&gt;
&lt;p&gt;Unlike some fantasy sports tournaments, all entries were public knowledge before the contest started – in our case, you posted your driver picks on the wall in the breakroom.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrage&quot;&gt;Arbitrage&lt;/a&gt;, in the traditional sense, involves finding a pricing difference in two markets and capitalizing on this mismatch.&lt;/p&gt;

&lt;p&gt;An arbitrage model for my Indy 500 pool leverages the difference in the chance that a driver has to win the race (the “Vegas odds” market) and the implied chance as represented by the choices made by all the entries (the “company” market, or ownership percentage).&lt;/p&gt;

&lt;p&gt;Without public knowledge of the ownership percentage, you are left to predict that yourself and an arbitrage model results can vary wildly if you miss this prediction. But in my office pool, all entries are known so I decided to give it a whirl.&lt;/p&gt;

&lt;h1 id=&quot;what-does-the-math-look-like&quot;&gt;What does the math look like?&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Driver: Josef Newgarden
Vegas odds =&amp;gt; 8/1 (~11% chance to win)
Number of entries (out of 45) =&amp;gt; 1 (~2% ownership)
Arbitrage = 11% - 2% =&amp;gt; 9%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Driver: Ryan Hunter-Reay
Vegas odds =&amp;gt; 8/1 (~11% chance to win)
Number of entries (out of 45) =&amp;gt; 5 (~11% ownership)
Arbitrage = 11% - 11% =&amp;gt; 0%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Vegas odds give both drivers an equal chance at winning the race, but Newgarden’s ownership suggests that he actually has only a 2% chance of winning. In this model, we treat the Vegas odds as “correct” so there is an inefficiency in the entries.&lt;/p&gt;

&lt;p&gt;In a winner-takes-all game, we should pick Newgarden over Hunter-Reay. They have the same chance to win, but less people are picking Newgarden so if he finishes near the top, we will jump ahead of more people in the standings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/full-500-model.png&quot; alt=&quot;Full spreadsheet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same calculations for each driver and you can build a nice little spreadsheet. Sorting by the “Arbitrage Percentage” shows the top picks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/top-500-picks.png&quot; alt=&quot;Top Picks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, Newgarden, Bell, Munoz, and Rossi are the top picks among tier 1 drivers. Kimball and Kanaan are the top picks among tier 2 drivers. None of the tier 3 drivers present an opportunity for arbitrage (all negative percentages).&lt;/p&gt;

&lt;p&gt;The goal is to maximize the arbitrage percentage with your picks. So in this case – if we follow the model exactly – that means picking &lt;strong&gt;Newgarden/Kimball/Brabham&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This entry would score: 3+5+22 = 30 – good enough to win this year (actual winner: 32)!&lt;/p&gt;

&lt;h1 id=&quot;so-why-didnt-you-win&quot;&gt;So why didn’t you win?&lt;/h1&gt;

&lt;p&gt;I made my entry based on incomplete data. I selected my picks with only 35 of the eventual 45 picks submitted. The model with 35 entries had some of the same top options for tier 1 (Newgarden, Rossi) but there was less of a difference among the tier 2 drivers.&lt;/p&gt;

&lt;p&gt;Since the arbitrage model says that there is no inefficiency to exploit for tier 3 drivers (all negative), I opted to look at other metrics for my tier 3 pick. Going solely off of Vegas odds, Rahal was the clear best option (his ~6% chance to win was double the next best option). This turned out to be a great pick as Rahal finished 14th (best among tier 3 drivers).&lt;/p&gt;

&lt;p&gt;In the end, I used the arbitrage model for my tier 1 pick (Rossi), my adjusted heuristic (Vegas odds) for my tier 3 pick (Rahal), and a gut-feel pick for tier 2 (Montoya). My thinking was that I would make two safer picks for tier 2/3 and go with the arbitrage exploit for my tier 1 pick, but the end result was not successful.&lt;/p&gt;

&lt;p&gt;My entry: Rossi/Montoya/Rahal
Score: 1 + 33 (no!!) + 14 = 48&lt;/p&gt;

&lt;p&gt;When Montoya crashed early in the race, I knew my entry was drawing dead. But it was still encouraging to nail the optimal picks for tier 1 and tier 3 drivers (Rossi won the race, Rahal was the top finisher among tier 3 drivers). My entry finished 22nd overall – though since only the #1 finisher gets a prize, there is no effective difference between 2nd, 22nd, or last.&lt;/p&gt;

&lt;p&gt;Had I used my tier 3 heuristic and the full data model, I could have settled on an entry of &lt;strong&gt;Newgarden/Kimball/Rahal&lt;/strong&gt; for a score of 22 – easily crushing the actual winner (32) by a wide margin. I shed a single tear for what could have been :(&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As with any kind of predictive modeling, we can only play the percentages. In reality, a discrete event happens and we get a result – a result that might not be what we hoped for. In this case, the model predictions were very strong, but the race results could easily have been different and this whole effort look foolish.&lt;/p&gt;

&lt;p&gt;All we can do is increase the chances of success and, in the immortal words of Antifragile Sports Analytics Based God Sam Hinkie, &lt;a href=&quot;https://espn.go.com/pdf/2016/0406/nba_hinkie_redact.pdf&quot;&gt;trust the process&lt;/a&gt;. #TrustTheProcess&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Prior Art/Inspiration:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rotoviz.com/2013/03/getting-something-for-nothing-a-theory-of-draftingsigning-undervalued-wide-receivers/&quot;&gt;Getting Something for Nothing - A Theory of Drafting/Signing Undervalued Wide Receivers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fantasylabs.com/articles/toward-a-theory-of-dfs-arbitrage/&quot;&gt;Toward a Theory of DFS Arbitrage&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Writing a Postmortem</title>
   <link href="http://mdswanson.com/blog/2016/05/03/writing-a-postmortem.html"/>
   <published>2016-05-03T00:00:00+05:30</published>
   <updated>2016-05-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/05/03/writing-a-postmortem</id>
   <content type="html">&lt;p&gt;Despite our best efforts, sometimes things just go wrong. After the fires have been put out, it is a common practice to reflect and figure out what happened.&lt;/p&gt;

&lt;p&gt;In the medical world, this is done in a &lt;a href=&quot;http://mdswanson.com/writeup/2012/10/29/complications.html&quot;&gt;Mortality and Morbidity panel&lt;/a&gt; – a group that convenes not to assign blame, but to assess the decision making process to improve future outcomes. For software products, we use a written postmortem.&lt;/p&gt;

&lt;p&gt;I’ve never written one of these postmortems. Unfortunately, there was an issue with &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt; – a team morale tracker that I am managing – that warranted stepping back and evaluating what went wrong.&lt;/p&gt;

&lt;p&gt;I wanted to start with a template and I found one that I liked from &lt;a href=&quot;https://blog.travis-ci.com/2014-06-26-three-ingredients-to-a-great-postmortem/&quot;&gt;Travis CI&lt;/a&gt;. The template has three sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Regret: empathize with your customers (it’s about them, not you); actually apologize&lt;/li&gt;
  &lt;li&gt;Reason: describe the incident in detail, but without blame or judgment&lt;/li&gt;
  &lt;li&gt;Remedy: lay out the corrective action you’ve taken or plan to take&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I waited a few days before writing this, mainly because I was really angry about the situation (and very upset with a certain monkey-themed email company).&lt;/p&gt;

&lt;p&gt;Without further ado, here is what I came up with:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;moraleappcom-daily-team-emails-not-sent-out&quot;&gt;moraleapp.com: Daily team emails not sent out&lt;/h2&gt;
&lt;p&gt;On April 21, approximately 500 daily team emails were not sent out to customers scheduled to receive them at 3PM EST. We recognize that the failure to deliver these emails caused confusion and might have made our customers day worse – which is not acceptable for an application that tracks employee morale. Teams use the data collected from these daily emails to observe trends over time and losing data points makes it harder to do this.&lt;/p&gt;

&lt;p&gt;We messed up and we are sorry for causing this disruption.&lt;/p&gt;

&lt;h2 id=&quot;what-went-wrong&quot;&gt;What went wrong?&lt;/h2&gt;
&lt;p&gt;MoraleApp uses an external vendor to send transactional emails. A recent change to the billing plan from our email vendor necessitated a change to our account before April 27.&lt;/p&gt;

&lt;p&gt;After reading through the provided instructions on making the account change, I began the process at around 2:30PM EST on April 21. The change involved creating an account in a new system, ensuring that our email sending domain had both DKIM and SPF records correctly configured, ensuring that our domain was verified, and then linking the old account to the new system.&lt;/p&gt;

&lt;p&gt;At 2:40PM EST, I logged into the admin panel and checked the DKIM/SPF records and that our sending domain was verified. I created the new account and successfully linked the old account.&lt;/p&gt;

&lt;p&gt;At 3:00PM EST, a batch of emails was scheduled to be sent and I observed that the emails were being immediately marked as Rejected from our email vendor and, thus, not being sent out to our customers.&lt;/p&gt;

&lt;p&gt;The Rejected status code indicated that the emails were “unsigned”. This behavior happens when you try to send from domains that are not verified or are missing the DKIM/SPF records.&lt;/p&gt;

&lt;p&gt;Upon revisiting the admin panel, the “moraleapp.com” sending domain was now flagged as “not verified”. The DKIM/SPF records were still in place.&lt;/p&gt;

&lt;p&gt;I triggered a verification request email and immediately verified the domain upon receiving the email. Subsequent emails were delivered successfully.&lt;/p&gt;

&lt;p&gt;After monitoring our outgoing mail for the next several days, I’ve concluded that the issue is resolved.&lt;/p&gt;

&lt;h2 id=&quot;going-forward&quot;&gt;Going forward?&lt;/h2&gt;
&lt;p&gt;I mistakenly interpreted the changes I was making to our account as simply a billing change and did not treat it as a major configuration change. As a result, I made this change during peak activity time for the app.&lt;/p&gt;

&lt;p&gt;In the future, infrastructure changes will be performed outside of peak usage windows to avoid service interruption. I will plan how to verify that the changes made are working. In this case, I should have generated a test email and been notified immediately that the message was rejected and avoided losing customer emails.&lt;/p&gt;

&lt;p&gt;Additionally, I will be investigating if the webhooks or API offered by our email provider can help us to handle sending failures in a more resilient way (by resending or alerting me to the failures more quickly).&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;A configuration change we made to our email provider caused a number of teams to not receive emails on April 21. We did not plan for this change in the appropriate manner. Future changes will be done in a more intentional and careful way.&lt;/p&gt;

&lt;p&gt;Reliably sending emails is a core piece of our application. When we don’t send out emails, we aren’t recording data that our customers use to help them understand their team morale and they lose trust us. Causing someone to contact support to ask about why their emails were not delivered is a bad experience and something we aim to avoid.&lt;/p&gt;

&lt;p&gt;We will use this incident as an opportunity to improve. Thank you for your continued support, please contact me directly if you have any additional questions.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Compounding technical debt</title>
   <link href="http://mdswanson.com/blog/2016/04/22/compounding-technical-debt.html"/>
   <published>2016-04-22T00:00:00+05:30</published>
   <updated>2016-04-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/04/22/compounding-technical-debt</id>
   <content type="html">&lt;p&gt;I like the concept of technical debt; not the watered down version that people use when the code base is in a messy state, but the idea that we are making considered decisions that benefit the short-term, at the risk of long-term consequences.&lt;/p&gt;

&lt;p&gt;Today, the long-term consequences surfaced. The following is a play-by-play of a day in my life coming back to a project that has started to ‘default’ on its debt:&lt;/p&gt;

&lt;p&gt;I’ve fixed a small bug and I wanted to deploy it to production.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Push to Heroku&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Heroku instance is still running the cedar-10 stack – an outdated version of the platform that was deprecated in 2014. At the time, apps could still run on the platform for another year without issue so upgrading was deferred. Now cedar-10 has reached end-of-life and new pushes cannot be deployed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade stack, try to deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upgrading to cedar-14 was not an issue, but as part of the upgrade, the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; was changed and the Gemfile we try to push is being flagged as “corrupted”. Yikes. The most reliable solution seems to be to rebuild the bundle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update bundler and rebuild&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Gemfile was using the “tilde arrow” semantic version specifier (sidenote: I probably should have changed this in hindsight) so we got slightly different versions of gems.&lt;/p&gt;

&lt;p&gt;Turns out there is an issue with two of the gems – both legacy versions – that requires me to wade through 2-3 year old GitHub issues and StackOverflow posts. Eventually, that gets sorted out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gems sorted out, try to deploy again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deploy goes through, but there are scary warnings about using EOL Ruby version. I’ve been using a newer version in development, so I try to upgrade to something that is supported and receiving security patches.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade ruby version on staging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything explodes. An hour later, the issue is tracked down to a gem that tracks application errors. Yes, a library for tracking errors caused errors to happen. Bumping the version makes everything happy again.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deploy new ruby version to production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No more fires for today.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My path was not optimal and some of the work probably should have been tackled independently. But this example illustrates how technical debt can compound over time. One small decision (defer upgrading the Heroku stack) saw the ‘interest’ grow and grow over time as it was neglected. As a result, to deploy a one-line bug fix required a day of high-pressure infrastructure changes and debugging.&lt;/p&gt;

&lt;p&gt;I’ve still not paid down all the debt, but I tackled a big enough chunk to let me address the immediate need. The difficult part will be striking a balance between slowly paying off the rest, adding new features, and fixing bugs.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Tracking down bugs without QA</title>
   <link href="http://mdswanson.com/blog/2016/04/21/tracking-down-bugs-without-qa.html"/>
   <published>2016-04-21T00:00:00+05:30</published>
   <updated>2016-04-21T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/04/21/tracking-down-bugs-without-qa</id>
   <content type="html">&lt;p&gt;I’m doing product development right now for &lt;a href=&quot;/morale/&quot;&gt;Morale&lt;/a&gt; – a no-hassle team mood tracker – and we’ve got a bug.&lt;/p&gt;

&lt;p&gt;Bugs are no big deal. I’ve fixed (and caused) hundreds in my life.&lt;/p&gt;

&lt;p&gt;One thing you take for granted when doing client work with a team is that you have folks to help with testing. You might have a dedicated QA team or simply other developers to find strange things – they can usually show you what happened and give you some basic steps to reproduce.&lt;/p&gt;

&lt;p&gt;Alas, working solo on a product does not always afford us clear steps to reproduce, including browser, operating system, or computer specs.&lt;/p&gt;

&lt;p&gt;So I mentioned we have a bug.&lt;/p&gt;

&lt;p&gt;For whatever reason (I blame &lt;a href=&quot;http://www.scientificamerican.com/article/mysteriously-powerful-particles-from-solar-explosions-unveiled-in-new-study/&quot;&gt;solar flares&lt;/a&gt;), sometimes the timezone value doesn’t get set when someone creates a team in our app. This is bad because we use this value to know when to send out the daily emails to log moods. No timezone equals no emails sent equals unhappy customers.&lt;/p&gt;

&lt;p&gt;This bug happens about 1% of the time when a team is created. But we don’t have monitoring in place to detect this yet, so the app just silently doesn’t work for these people. Not good.&lt;/p&gt;

&lt;p&gt;I tried creating teams with every possible combination I could think of in my local environment. I used IE. I turned off JavaScript. I picked weird timezones. But nothing would cause it to happen. Without any details, I was getting stumped.&lt;/p&gt;

&lt;p&gt;I tried to reach out to the last customer this happened to. But, predictably, they didn’t answer an unsolicited email about an app that didn’t work at all for them!&lt;/p&gt;

&lt;p&gt;So I had to get creative. We don’t have great analytics in place, but we do have the standard Google Analytics snippet running. Here’s what I did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the unique URL that the user would be on when they created the team (something like &lt;code class=&quot;highlighter-rouge&quot;&gt;/organization/:unique_id/create_team&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Look for hits on that page in Google Analytics, with the time range constrained to the day the team was created (thanks ActiveRecord &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt;s!)&lt;/li&gt;
  &lt;li&gt;Use the terribly confusing “Secondary Dimension” dropdown to display browser name + version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/browser-ga.png&quot; alt=&quot;Getting browser info from Google Analytics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aha! Firefox. I’ve got a new lead to follow. :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Getting reacquainted with our customers</title>
   <link href="http://mdswanson.com/blog/2016/04/19/getting-reacquainted-with-customers.html"/>
   <published>2016-04-19T00:00:00+05:30</published>
   <updated>2016-04-19T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/04/19/getting-reacquainted-with-customers</id>
   <content type="html">&lt;h2 id=&quot;wait-people-are-using-this-thing&quot;&gt;Wait, people are using this thing?&lt;/h2&gt;

&lt;p&gt;I’m doing product development over the next few months for &lt;a href=&quot;/morale/&quot;&gt;Morale&lt;/a&gt;, a team mood tracking application I built &lt;a href=&quot;http://mdswanson.com/blog/2011/10/13/intrapreneurship-applying-the-lean-startup-to-internal-tools.html&quot;&gt;several years ago&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Morale was opened to the public in late 2012 and since then we’ve had a steady trickle of signups while the app has been in maintenance mode. Four years later, I realized that I didn’t have a great sense of our users so I wanted to re-engage and collect very general feedback.&lt;/p&gt;

&lt;p&gt;Our infrastructure is bare-bones at the moment so the first task was to actually collect a list of email addresses. The app works primarily through email (daily emails to log mood, weekly email summaries) but outside of those transactional emails, we’ve had no contact with users.&lt;/p&gt;

&lt;p&gt;So here’s what I did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pulled down a fresh copy of the production database to my local environment – always recommended when exploring your data :)&lt;/li&gt;
  &lt;li&gt;Came up with a quick heuristic for active accounts (we’ve sent their team emails in the last 2 weeks)&lt;/li&gt;
  &lt;li&gt;Dump email addresses for active accounts into CSV file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next I made a quick survey in SurveyMonkey. Since I was starting from zero, most of my questions were general: are you a software company? if so, are you doing scrum/agile/kanban? how are you using the data? what is the app missing? what is painful?&lt;/p&gt;

&lt;p&gt;I also added a more targeted question: are you using real-time chat software (options: Slack, HipChat, None, Other)? People have mentioned internally that we should make a Slack integration so I wanted to see if our existing customers would benefit.&lt;/p&gt;

&lt;p&gt;Lastly, I added an opt-in for future follow ups. I didn’t feel super great about cold-emailing all of these folks, but I had to start somewhere. By adding an opt-in, I can make a list of folks that are receptive to giving feedback.&lt;/p&gt;

&lt;h2 id=&quot;hey-there-im-matt&quot;&gt;Hey there, I’m Matt!&lt;/h2&gt;

&lt;p&gt;There was a recent discussion on the highly recommended &lt;a href=&quot;http://giantrobots.fm/&quot;&gt;Giant Robots podcast&lt;/a&gt; where Ben Orenstein shared the email copy he wrote for a customer feedback survey. Thanks to the &lt;a href=&quot;https://twitter.com/_swanson/status/722120705870065665&quot;&gt;magic of the internet&lt;/a&gt;, I found the episode in the archives and transcribed the template:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hey there, I'm Ben, one of the developers working on FormKeep: the form backend for designers and developers.

Over the next few months, we're going to be investing heavily in the product and I want to make sure we're building the features that *you* want. To ensure that happens, would you please take this 5-minute survey? &amp;lt;link to TypeForm&amp;gt;

I'm only sending this to a handful of our active users, so every response counts. I know it won't be the highlight of your week but it'll mean that future FormKeep changes will make it even better for you.

Side bonus: the entire survey is keyboard-navigable. No mouse required!

Thank you to the hundredth power :)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Things I like about this template (and why I think it converts well):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It reminds people of what the product is and who you are&lt;/li&gt;
  &lt;li&gt;Clear time expectation (“5-minute”) and empathy that most surveys suck (“won’t be the highlight of your week”)&lt;/li&gt;
  &lt;li&gt;Element of exclusivity and personal stake (we picked you to help us shape the future!)&lt;/li&gt;
  &lt;li&gt;Feels like it was written by a real person, not some auto-generated junk&lt;/li&gt;
  &lt;li&gt;It’s memorable and has a bit of humor (“hundredth power”!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I modified the template to fit with my context slightly and then loaded up my CSV of emails into SurveyMonkey to create an email template.&lt;/p&gt;

&lt;p&gt;I wanted to send the surveys through SurveyMonkey because it would track the email addresses for me. This let me omit two boring (but essential) questions: who are you (name/email) and what company do you work for. I can get both of these (or close enough) from the email address.&lt;/p&gt;

&lt;p&gt;Clicking the “Send” button was slightly terrifying.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/whelp.png&quot; alt=&quot;Whelp...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But everything worked out and responses started rolling in almost immediately! After 24 hours, here are the stats.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-survey-stats.png&quot; alt=&quot;Customer Feedback Stats&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I emailed 806 users, 265 opened the email (33%) and 106 responded to the survey (40% of people that opened). I think those numbers are great given that the email came out of the blue to folks that we haven’t communicated with.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: The final numbers after a week were 297 opens (37%) and 127 responses (43% of people that opened).&lt;/p&gt;

&lt;p&gt;From the results, I confirmed that most of our users are using the product to track team happiness for software projects (75%) and that a decent amount are also using Slack (30%).&lt;/p&gt;

&lt;p&gt;I also collected free-form snippets that I can use to re-work marketing copy to mirror the words and phrases that my customers are using.&lt;/p&gt;

&lt;p&gt;Multiple customers reported pain around printing reports; since they are using an older JavaScript charting library, I’m not surprised. Given that folks are using the morale data during retrospectives or putting it up on walls and kanban boards, printable reports should be improved.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sprint</title>
   <link href="http://mdswanson.com/writeup/2016/03/21/sprint.html"/>
   <published>2016-03-21T00:00:00+05:30</published>
   <updated>2016-03-21T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2016/03/21/sprint</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This is the playbook for running a &lt;a href=&quot;http://www.gv.com/sprint/&quot;&gt;Google Venture-brand “design sprint”&lt;/a&gt;. The idea is to design, prototype, and test a business idea through 5 days of structured activities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
With more than 100 sprints under their belt, the team at Google Ventures has refined their process into an easily digestible set of activities. I appreciated the detailed examples in each section; not only did the book outline how to run each activity, but they included specific examples (including images of real whiteboards and sticky notes) to help understand the expected outputs.&lt;/p&gt;

&lt;p&gt;The book has 3-4 main case studies that are carried through each of the five days. My major complaint was that I wanted more case studies. I wanted to know 25 different ways that people prototyped their varied ideas. The inclusion of a complicated hardware startup (robot bellhops at a hotel) gave me ammo to combat mental hangups that prototyping “won’t work for our problem”. I liked to try to predict what the teams would do to validate their ideas (without building a bunch of software) and then “check my work” as the book revealed what they did during the sprint.&lt;/p&gt;

&lt;p&gt;Sections on the final day (user testing) helped me make a large mental shift. The realization that you could recruit a targeted group of users and conduct a test with only a laptop was enlightening. I’ve experienced perceived friction that we need a fancy, one-way mirror or weeks (not hours) to organize participants; the book explains how the constrained time frame can spur you to act and not fret so much about the logistics and making everything perfect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I’ve done several of the design sprint activities individually – story mapping, dot-voting, collaborative sketching, etc – but putting them all together for an intensive 5-day period is something that I would like to try.&lt;/p&gt;

&lt;p&gt;Those looking for a structured way to kick start a new product (or feature) will find value in this book – provided that they actually try running a sprint after reading. Doing a design sprint seems like a great way to rapidly build momentum and shared understanding of a project, something that anyone creating products or solving business problems should be interested in exploring.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The First Winter</title>
   <link href="http://mdswanson.com/blog/2016/03/14/the-first-winter.html"/>
   <published>2016-03-14T00:00:00+05:30</published>
   <updated>2016-03-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/03/14/the-first-winter</id>
   <content type="html">&lt;p&gt;This email was sent ahead of the first forecasted “winter weather” event of the year:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To: All Employees&lt;br /&gt;
From: President&lt;/p&gt;

  &lt;p&gt;This is your annual reminder to be safe and smart traveling in inclement weather. If the roads get bad tonight/tomorrow, work remotely or adjust your schedule as necessary. The work will still be there – just make sure you stay in touch with your team about your plans.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By being explicit, the norms of the company are surfaced. Sharing the expectations and standards of a group reveals the boundaries and makes people feel safe.&lt;/p&gt;

&lt;p&gt;If you’ve been at the company for a couple of years, you understand how things work. You know what is normal and you know what might raise eyebrows.&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;every winter is the first winter for someone at the company.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’ve never worked at the company during bad weather, you are left to your own assumptions about “the policy”. These assumptions are built on past experiences and could vary wildly between employees.&lt;/p&gt;

&lt;p&gt;We don’t need a strict, capital-P Policy (“Remote Work is only allowed if there was more than 4 inches of snow!”). We simply want everyone to understand the norms of the company so that they can act within those boundaries. Explicit communication helps everyone become aware of these norms.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Internal tools should be sold or killed</title>
   <link href="http://mdswanson.com/blog/2016/01/25/sell-or-kill.html"/>
   <published>2016-01-25T00:00:00+05:30</published>
   <updated>2016-01-25T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2016/01/25/sell-or-kill</id>
   <content type="html">&lt;p&gt;I work for a software development shop; we run on billable hours. Because of the unavoidable inefficiencies of a consulting pipeline, we find ourselves with small chunks of time between projects.&lt;/p&gt;

&lt;p&gt;We use many tools and applications to help us do our jobs better. Because our staff has the ability to build software tools, we can solve our own problems in just the way we like.&lt;/p&gt;

&lt;p&gt;The light bulb goes off. We can use our unbilled time to build tools that provide value to our company, minimizing the “lost value” of idle engineers!&lt;/p&gt;

&lt;p&gt;I propose a somewhat radical line of thinking for evaluating whether to build an internal project: if we are to build it, we will &lt;strong&gt;sell it&lt;/strong&gt; as an external product – or we will not build it all and &lt;strong&gt;kill it&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;does-our-company-need-this-tool&quot;&gt;Does our company need this tool?&lt;/h2&gt;

&lt;p&gt;If No: &lt;strong&gt;Kill it&lt;/strong&gt; (why are we building something we don’t need?)&lt;/p&gt;

&lt;p&gt;If Yes: Often, this is where we stop. We need it, it has value, we have people “on the bench”, therefore let’s build it! But if we keep following “sell or kill”, we should next be asking:&lt;/p&gt;

&lt;h2 id=&quot;do-other-companies-that-are-similar-to-us-need-this-tool&quot;&gt;Do other companies (that are similar to us) need this tool?&lt;/h2&gt;

&lt;p&gt;If No: It’s time to take a deep look at our perceived need. There are certainly exceptions, but we are not usually special snowflakes. Why don’t other companies have this need? What do they do instead? Why isn’t this a nagging problem for them like it (allegedly) is for us?&lt;/p&gt;

&lt;p&gt;The solution might be that we need to look at the problem a different way.&lt;/p&gt;

&lt;p&gt;For example, one internal tool we built is an internal LinkedIn that helps track the projects we’ve done, who worked on them, and what technologies we gained experience in. We use it to help staff projects (who knows Angular? iOS?), create marketing materials (look at how much work we did in the medical industry!), and support business development (you’re building a .NET API – here are three other projects that have used the same tools).&lt;/p&gt;

&lt;p&gt;But what if we structured the company into specialized teams so it was obvious who has iOS experience (the people on the iOS squad, duh)? What if we moved away from metric-based marketing focused on billed hours? What if engineers “paired” with marketing and sales so we could collaborate and answer technical questions directly?&lt;/p&gt;

&lt;p&gt;Could those work? Maybe, maybe not. But it is worth stepping back and thinking about before undertaking an internal project.&lt;/p&gt;

&lt;p&gt;If we &lt;em&gt;really&lt;/em&gt; have this need and others don’t seem to, proceed to the next question. If not, &lt;strong&gt;kill it&lt;/strong&gt; and take a different approach or re-evaluate the process.&lt;/p&gt;

&lt;p&gt;If Yes: If multiple companies have a need, there are existing products or tools out there that attempt to address this need. Proceed to the next question, please!&lt;/p&gt;

&lt;h2 id=&quot;do-existing-products-solve-this-need&quot;&gt;Do existing products solve this need?&lt;/h2&gt;

&lt;p&gt;If Yes: Awesome, we should buy one of those then. Remember that even one week of time from an engineer to build this internally has a (theoretical) cost of several thousand dollars. Six weeks to build a tool at $100/hr is &lt;a href=&quot;https://baremetrics.com/calculator?cost=2000&amp;amp;engineers=1&amp;amp;salary=65000&amp;amp;weeks=6&amp;amp;maintenance=0.5&quot;&gt;comparable to a $2000/month plan for a SaaS product&lt;/a&gt;. Spending hundreds a month for services seems crazy expensive to individuals, but it’s a drop in the bucket for most companies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kill&lt;/strong&gt; the internal project and buy whenever possible.&lt;/p&gt;

&lt;p&gt;If No: We need to critically analyze the existing options and determine why they don’t meet our needs. It is very tempting to dismiss these options because we can write our own software. We can make the interface just the way we want. We can integrate with our other systems and have control over all aspects of the tool. Are we focused on solving the actual problem or more interested in coming up with our own solution?&lt;/p&gt;

&lt;p&gt;But it is possible that nothing on the market is right for us. Proceed onwards!&lt;/p&gt;

&lt;h2 id=&quot;will-our-internal-tool-have-a-killer-feature&quot;&gt;Will our internal tool have a killer feature?&lt;/h2&gt;

&lt;p&gt;If Yes: Awesome, skip ahead.&lt;/p&gt;

&lt;p&gt;If No: If we cannot describe why the existing tools aren’t right for us and we have no alternative approach, the best we can hope to do is essentially rebuild an existing option. Maybe it has a different UI or minor feature differences, but it is now our responsibility to keep it running, updated, secure, and supported – with a revolving door of developers with small chunks of time to contribute.&lt;/p&gt;

&lt;p&gt;Without a killer feature, usage will decline and the project will become neglected and the maintenance cost will rise. If there is not a clear value proposition, &lt;strong&gt;kill it&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;our-company-needs-this-other-companies-need-this-we-identified-a-killer-featureso-lets-invest-in-this-product-and-sell-it-to-others-right&quot;&gt;Our company needs this, other companies need this, we identified a killer feature…so let’s invest in this product and sell it to others. Right?&lt;/h2&gt;

&lt;p&gt;If No (or “Well…but…”): This tool solves a real need for us, is valuable to others, and has a unique value proposition that would cause people to give us their money. And yet, we don’t want to invest and build this as an external product?&lt;/p&gt;

&lt;p&gt;This is the ultimate gut check. Either we’ve identified a potentially viable product (and should staff it like a billable project) or we’ve lied to ourselves on the previous questions. Let’s give it a real go or &lt;strong&gt;kill it&lt;/strong&gt;; skip the &lt;a href=&quot;https://sivers.org/hellyeah&quot;&gt;half-hearted, in-between efforts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If Yes: &lt;strong&gt;Sell it!&lt;/strong&gt; Treat it like a paying client project. Lock in a team for six months and don’t cave two weeks later when billable work comes in. Aim to build a product that can actively pull in people during downtime when it advances the product, not that we have to push people onto to kill time.&lt;/p&gt;

&lt;p&gt;Reframe unbillable time as an investment. By doing this, we can follow &lt;a href=&quot;https://en.wikipedia.org/wiki/Nassim_Nicholas_Taleb&quot;&gt;Nassim Taleb’s&lt;/a&gt; “barbell strategy”: 90% of staff in safe investments (billable work) and 10% of staff in highly speculated bets (product development).&lt;/p&gt;

&lt;h2 id=&quot;we-built-it-but-it-didnt-sell--what-now&quot;&gt;We built it! But it didn’t sell :( What now?&lt;/h2&gt;

&lt;p&gt;We’ve still got the same options: sell it or kill it.&lt;/p&gt;

&lt;p&gt;Is it selling, but not enough for it to be worth continued time investment? We could literally sell it – find someone else that wants to run the app if we still need to use it. Maybe an engineer wants to run it as a side-gig? Sell them the rights for a dollar and a lifetime plan for the company. Maybe one of the existing customers is really depending on this tool and wants to take it over? Maybe you can list it on &lt;a href=&quot;https://flippa.com/&quot;&gt;Flippa&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;If it’s not selling, just kill it. We tried something and learned a bunch, but in the end, it didn’t work – celebrate the failure. Free up time, bandwidth, and energy for engineers to work on something new or to spend that time on other valuable activities. Bring the empathy we’ve gained to our client work and help them build better products for their customers.&lt;/p&gt;

&lt;h2 id=&quot;and-if-we-dont-have-a-killer-product-to-build-or-we-dont-want-to-build-products-what-should-we-do-with-downtime-then-twiddle-our-thumbs&quot;&gt;And if we don’t have a killer product to build (or we don’t want to build products), what should we do with downtime then? Twiddle our thumbs?&lt;/h2&gt;

&lt;p&gt;Learn new technologies (by building &lt;a href=&quot;http://redsquirrel.com/dave/work/a2j/patterns/BreakableToys.html&quot;&gt;Breakable Toys&lt;/a&gt;, not creating burdensome legacy projects), learn new skills (training, deliberate practice), share what we’ve learned (writing, speaking, networking), think of ways we can delight our existing customers (prototyping, proactive proposals, trying new tools on our own time), improve each other (mentoring, pairing, coaching), give back (open source, volunteer, teach), work on validating the next internal project idea…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Code Neutral</title>
   <link href="http://mdswanson.com/blog/2015/10/26/code-neutral.html"/>
   <published>2015-10-26T00:00:00+05:30</published>
   <updated>2015-10-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2015/10/26/code-neutral</id>
   <content type="html">&lt;p&gt;I’m rolling off a long-running project after a year and I recently became “code neutral” (ala &lt;a href=&quot;https://en.wikipedia.org/wiki/Carbon_neutrality&quot;&gt;carbon neutral&lt;/a&gt;) for the main code repository. Over 279 commits, I added 11556 lines of code and removed 11564 lines of code (net of -8 lines).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/code-neutral.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first, the idea of code neutrality was just an amusing anecdote that I heard about on &lt;a href=&quot;http://bikeshed.fm/18&quot;&gt;The Bike Shed podcast&lt;/a&gt;. But the more I thought about it, the more I could see the value.&lt;/p&gt;

&lt;p&gt;I mentioned my “quest” to delete code to a co-worker and we talked about some of the benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Less complexity (no extra code for dead features)&lt;/li&gt;
  &lt;li&gt;Less confusion (“I don’t understand why this code even exists”)&lt;/li&gt;
  &lt;li&gt;Faster build/compile times (ok, maybe not a huge difference…)&lt;/li&gt;
  &lt;li&gt;Small surface area for bugs and errors (we had at least one production error due to code that we didn’t even need)&lt;/li&gt;
  &lt;li&gt;Feels good to &lt;em&gt;add features&lt;/em&gt; while &lt;em&gt;removing code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cleaning up a bunch of unused code is like cleaning your desk. If you don’t do it periodically, it just &lt;a href=&quot;https://en.wikipedia.org/wiki/Broken_windows_theory&quot;&gt;breeds a larger mess&lt;/a&gt;. We don’t want people to start thinking it’s okay to leave big chunks of unused code in the project.&lt;/p&gt;

&lt;p&gt;(Note: I am not interested in “cheating” by removing whitespace or re-formatting code to artificially inflate my stats. Only legitimate removals were allowed!)&lt;/p&gt;

&lt;p&gt;Over a couple of weeks, I would actively try to remove code from the project. I noticed a few themes and identified some hot-spots that seem generally applicable.&lt;/p&gt;

&lt;h1 id=&quot;code-that-is-simply-unused&quot;&gt;Code that is simply unused&lt;/h1&gt;

&lt;p&gt;The project is mostly Java so my IDE was kind enough to do the heavy lifting of finding unused code. I found some local variables that weren’t used. There were some methods and fields that were either unused or used only in tests of their own existence. We have an automated check to fail the build on unused imports, but that is another easy win.&lt;/p&gt;

&lt;p&gt;You might ask why not automate this kind of deletion? I would love to. But while the project is mostly agreeable to static analysis, there are some gotchas.&lt;/p&gt;

&lt;p&gt;Fields that appear unused to IntelliJ might be used via reflection (because Spring…) or be referenced in a view template or in JavaScript. Anything that looked legitimate needed a more thorough investigation (or supreme confidence in the thoroughness of the test suite).&lt;/p&gt;

&lt;p&gt;The loose coupling of views, controllers, and front-end assets presents a challenge for static analysis, but it was a goldmine for finding code to remove.&lt;/p&gt;

&lt;p&gt;I found instances where a controller endpoint was removed, but we forgot to delete the view template. I found instances where a view template was removed, but we forgot to delete the CSS file. And even in the cases when we got all of those, we sometimes forgot those pesky translation values.&lt;/p&gt;

&lt;h1 id=&quot;planning-for-a-future-that-never-arrives&quot;&gt;Planning for a future that never arrives&lt;/h1&gt;

&lt;p&gt;My favorite code to remove was code that we thought we might need, but never did. While practicing TDD can help you write only the minimum amount of code you need, sometimes things fall through the cracks. We’ve all been there; we write some code to get the color of a widget and we just know we’ll be needing the shape eventually, so let’s just add it now.&lt;/p&gt;

&lt;p&gt;Except a surprising amount of times, you don’t end up needing it. If it is “quick and easy” to add it now (just in case!) then it should be quick and easy to add it later when you are sure it belongs.&lt;/p&gt;

&lt;p&gt;I encountered a number of code paths that lead me through a winding maze of classes and methods, only to end with a tragic “NotImplementedException”. In a multi-layered web architecture (e.g. controller -&amp;gt; service -&amp;gt; repository), you can end up implementing quite a bit of “stubbed out” code that leads to a dead-end. It felt &lt;em&gt;really&lt;/em&gt; good to delete this code.&lt;/p&gt;

&lt;p&gt;Anecdotally, the “future-proofed” code I found was often added as part of huge, multi-file commits. I’ll speculate that smaller commits might have kept the changes more focused and made it easier to identify unneeded code in reviews.&lt;/p&gt;

&lt;h1 id=&quot;leftover-frameworktooling-cruft&quot;&gt;Leftover framework/tooling cruft&lt;/h1&gt;

&lt;p&gt;I spent one session looking through all the config files for our tools, looking for customizations that no longer mattered or references to files that no longer exist. One notable example was a security configuration that white-listed a bunch of URLs. Several of the URLs had been renamed or removed and the config file had fallen out of sync.&lt;/p&gt;

&lt;p&gt;I was making good progress, but I started running out of lines to remove. Then, I found the motherload.&lt;/p&gt;

&lt;p&gt;In any long-running project, new tooling gets added and (hopefully) some of the old tooling goes away over time. In our case, an end-to-end testing tool had been added in the summer of 2014. Ultimately, a different tool was adopted later that year and all remains of the old tool were deleted. Or so we thought…&lt;/p&gt;

&lt;p&gt;We accidentally left behind a whole package (10+ classes) of boilerplate helper code for a test suite that was long forgotten. This discovery finally bumped me over the edge and I hit code neutral!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m not sure how reasonable it is for everyone to remove more lines than they’ve added, especially on a project that is still under active development. While we can strive to build features with the minimal amount of code, creating new functionality is usually a net-addition of code. But it was fun to try to get closer to neutral, even if getting all the way to zero isn’t always feasible.&lt;/p&gt;

&lt;p&gt;It might seem silly to care so much about this number. But I think it was actually a productive use of my time as I wound down on the project. In the end, it was really satisfying to have removed more than I added to the codebase (while adding a year’s worth of new functionality). The codebase will be a little nicer and a little smaller for those that will continue working on it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Testing Behavior vs Implementation</title>
   <link href="http://mdswanson.com/blog/2015/10/05/testing-behavior-vs-implementation.html"/>
   <published>2015-10-05T00:00:00+05:30</published>
   <updated>2015-10-05T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2015/10/05/testing-behavior-vs-implementation</id>
   <content type="html">&lt;p&gt;One of the platitudes you run across in software is “Test behavior, not implementation”. Like most software guidelines, it’s great to say and we can all nod along in agreement. But sometimes it’s trickier to identify in practice.&lt;/p&gt;

&lt;p&gt;Words like “behavior” and “implementation” are fuzzy and can be open to interpretation. This concept is best taught by example and I came across some code in a project (presented below with modification) that I wanted to share.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In this example, we are making a &lt;code class=&quot;highlighter-rouge&quot;&gt;Backbone.View&lt;/code&gt; to render a user submission.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmissionView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;click .upvote&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;upvoteSubmission&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listenTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;change&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;upvoteSubmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;points&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;point&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I looked at the tests for this class, I found a test of the implementation (not the behavior).&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should setup correct events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;click .upvote&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;upvoteSubmission&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The code is testing that the view properly sets up the &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; hash by directly comparing it to what we expect it to be. The test passes and this is the idiomatic way of binding events in Backbone. But this test is very concerned with the &lt;em&gt;implementation&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;SubmissionView&lt;/code&gt;, not the &lt;em&gt;behavior&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The behavior we would like to capture is that “clicking the upvote button will increase the point count by one”. We can test this by doing something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should add one point when the upvote button is clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;points&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.upvote&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;points&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;The benefit of writing tests in this style is the ability to change implementation (i.e. refactor) without changing the tests. If you want to use a different view library, you can swap in the new implementation with confidence that it will behave identically.&lt;/p&gt;

&lt;p&gt;Testing behavior can be an exercise in patience when you already know the code you want to write. Making assertions about the implementation can be a shortcut to “TDDing” your code into the design you already have in your mind. But in the long run, the trade-off is a brittle test suite that will resist refactoring and changes to the internals of your code.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Juking the Stats</title>
   <link href="http://mdswanson.com/blog/2015/09/30/juking-the-stats.html"/>
   <published>2015-09-30T00:00:00+05:30</published>
   <updated>2015-09-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2015/09/30/juking-the-stats</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Roland ‘Prezbo’ Pryzbylewski: I don’t get it. All this so we score higher on the state tests? If we’re teaching the kids the test questions, what is it assessing in them?&lt;/p&gt;

  &lt;p&gt;Grace Sampson: Nothing. It assesses us. The test scores go up, they can say the schools are improving. The scores stay down, they can’t.&lt;/p&gt;

  &lt;p&gt;Roland ‘Prezbo’ Pryzbylewski: Juking the stats.&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;The Wire S04E09: Know Your Place&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our team had a meeting the other day to talk about “bug injection rate”. This is a metric designed to capture how many bugs a person/team/group is creating. You may see this expressed as a ratio of how many bugs you create vs bugs you fix or how many bugs you create vs how many features you deliver.&lt;/p&gt;

&lt;p&gt;Putting implementation aside, the aim of this metric is to measure bugs as a function of software quality. A low bug injection rate could point to high quality software; changes that cause this rate to go down could indicate the team is moving in the right direction.&lt;/p&gt;

&lt;p&gt;There is a nuanced point when it comes to trying to fit quantitative metrics around complex systems (like software projects). You have to be very diligent about capturing data passively and not setting a target objective than can be optimized for.&lt;/p&gt;

&lt;p&gt;In the case of bug injection, passively measuring how many bugs are created could produce some interesting trends. But the data cannot stand on its own; it needs some kind of analysis to put it in context.&lt;/p&gt;

&lt;p&gt;The system is too complex to distill down to a single number.&lt;/p&gt;

&lt;p&gt;Does a team have a high bug injection rate because they are working in an untested, legacy system? Does shipping quickly to validate with users allow for an increase in bugs? Have new team members joined the project recently? Has their been a renewed vigor in internal testing? How large is the codebase?&lt;/p&gt;

&lt;p&gt;Maybe there is a simpler, core problem. Maybe people are working sloppily or not taking care to test their changes thoroughly.&lt;/p&gt;

&lt;p&gt;But without context and framing, it is near impossible to draw conclusions from a single metric in isolation.&lt;/p&gt;

&lt;p&gt;A more troublesome situation arises when a metric is used as a way to compare across individuals or teams. Knowing that there is an objective measurement that we are being benchmarked against will change behaviors, intentionally or not.&lt;/p&gt;

&lt;p&gt;If we take a pessimistic view that our team is being judged solely by bug injection rate, then some bad behaviors will follow if we act in self-preserving manner.&lt;/p&gt;

&lt;p&gt;We will start having discussions about if certain behavior “is a bug” or should instead be classified as a “new story” or a “change request”. Developers will point to “incomplete requirements” and have to battle with product owners (who might also be trying to optimize their own metrics around re-work and “missed requirements”) over who is getting dinged. Trivial bugs will get fixed outside of the “official” channels so as to remain undetected in a monthly report.&lt;/p&gt;

&lt;p&gt;The idea of collective code ownership goes out the window if we need to track down who “injected” a bug. We have to justify why this bug was “inherited” by our team and thus should not count against us. This feeds into a culture of blame and defensiveness.&lt;/p&gt;

&lt;p&gt;Our team has a practice of doing a “bug hunt” — a designated time for everyone to try to break the software and find tricky bugs. If “bug rate” is a critical measurement of our team’s performance, we should stop this practice if we are optimizing in our own self-interest (even if we believe a bug hunt will lead to a better product for our customer).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This type of negative behavior can be countered if the team has strong shared values and external support. But as a team gains or loses members, it can be difficult to keep the culture of “doing what’s right” vs “doing what’s good for the numbers”. Giving someone full context is much more difficult than pointing to a number in a spreadsheet.&lt;/p&gt;

&lt;p&gt;You can do this same thought experiment for code quality metrics (are we making the code better or making this tool yell at us less?), pointing (are we accurately forecasting or trying to get a high-score?), or code coverage (optimizing for test quality or quantity?).&lt;/p&gt;

&lt;p&gt;I recognize that simply saying “this stuff is unmeasurable” is not practical, but we must be very careful about how we choose to measure complex systems and to consider the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hawthorne_effect&quot;&gt;observer effect&lt;/a&gt; when capturing any metrics. Aim to use data to support your own experiences and try to avoid allowing situations where parties are motivated to juke the stats.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Soul of a New Machine</title>
   <link href="http://mdswanson.com/writeup/2015/09/26/the-soul-of-a-new-machine.html"/>
   <published>2015-09-26T00:00:00+05:30</published>
   <updated>2015-09-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2015/09/26/the-soul-of-a-new-machine</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
It’s 1978. The microcomputer revolution is heating up. The deadlines are impossible, the stakes are high, and the bugs are plentiful. &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_General&quot;&gt;Data General&lt;/a&gt; is racing to build a 32-bit computer in one year using a mix of gray-haired veterans, wide-eyed college grads, and an enigmatic manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I was directed to this book after reading the epic &lt;a href=&quot;http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/&quot;&gt;“What is Code” article&lt;/a&gt;. I was particularly drawn to the fictionalized conversations between a scrum master and an executive in the article. “The Soul of a New Machine” is an anthropological look at how technology projects in the late 1970s operated.&lt;/p&gt;

&lt;p&gt;While there is some high-level technical content, I found the most interesting passages to be those focused on the human aspects of the team and project. Kidder profiles a wide array of colorful personas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tom West, the mysterious Steve Jobs-ian figure leading the vision&lt;/li&gt;
  &lt;li&gt;Carl Alsing, the second-in-command: “It was kind of like recruiting for a suicide mission. You’re gonna die, but you’re gonna die in glory.”&lt;/li&gt;
  &lt;li&gt;Ed Rasala, head of hardware, debugging with a logic analyzer late into the night&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing that stuck with me after reading was West’s concept of “signing up”. By signing up for the project, you were agreeing to do “whatever was necessary for success”. It was a ritual of commitment; you were no longer being forced to work late, you had volunteered. At Data General, the demand for engineers exceeded the supply so managers had to really sell their projects to get the team members to “sign up”.&lt;/p&gt;

&lt;p&gt;The implication that one would abandon friends, family, and free time for a project is not something I plan to try out, but I did like the concept of a semi-official act of saying “Yes, I will work on this”. It seemed similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_allocation&quot;&gt;open allocation&lt;/a&gt; style of management, which seems appealing to me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Closer to fiction (though it is all factual), I found this an enjoyable change of pace from my normal reading material. Those interested in team/project dynamics or just some good, old-fashioned war stories should give this book a shot.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Soul of a Chef</title>
   <link href="http://mdswanson.com/writeup/2015/04/13/the-soul-of-a-chef.html"/>
   <published>2015-04-13T00:00:00+05:30</published>
   <updated>2015-04-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2015/04/13/the-soul-of-a-chef</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Michael Ruhlman immerses himself in the Certified Master Chef exam, a modest upstart restaurant in Cleveland, and the world-renowned &lt;em&gt;French Laundry&lt;/em&gt; in Napa Valley in search of culinary perfection. Can you find measurable excellence in a subjective arena? How do you balance technique, art, personal standards, and keeping the lights on?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I’m a big fan of Ruhlman’s writing, so I found the follow-up to “The Making of a Chef” to be excellent.&lt;/p&gt;

&lt;p&gt;The first section explores the chicken-and-egg situation for formal certification. For a certificiation to gain credibility, quality chefs must pass the exam and go out into industry. But without a critical mass of existing credentialed chefs, it is an uphill battle to convince chefs and employeers of the merits. Additionally, some portion of industry will always treat top-down, academic standards as out-of-touch with reality.&lt;/p&gt;

&lt;p&gt;From a software perspective, the parallels are obvious. Programs like Microsoft’s MCSE aim to demonstrate an individual’s expertise; meanwhile the NCEES is pushing for a formalized professional license for software engineers. The same debate applies in this case: do employeers believe in the value these exams claim to have? Does passing these tests mean you are truly an expert? Can a single test score capture the depth and breadth required to be successful in industry?&lt;/p&gt;

&lt;p&gt;After exploring the objective truths of great cooking (at least according to some), Ruhlman shifts focus to &lt;em&gt;Lola&lt;/em&gt; — a up-and-coming restaurant launched by rising star Michael Symon. In the real-world of a busy restaurant, things are a bit more fly by the seat of one’s pants than the grading scale of the Certified Master Chef exam. Even though the standards were more lax and the chefs a bit more sloppy, food went out and customers were happy.&lt;/p&gt;

&lt;p&gt;This sounds an awful lot like tech startups, or just small software companies in general. The real world is different than school; standards and practices vary wildly across companies. To Ruhlman, a pot of water boiling over was unheard of at culinary school — but not out of the ordinary at a busy restaurant on a Saturday night. Some developers would be shocked to see a software project without tests or source control, but I can assure you that many businesses succeed with such software (or perhaps in spite of…).&lt;/p&gt;

&lt;p&gt;Ruhlman wraps up his tour de force with a stop at Thomas Keller’s &lt;em&gt;The French Laundry&lt;/em&gt;. Here we discover the other end of the spectrum: a restaurant that favors quality of the food over just about everything else (it took several years before the restaurant was profitable). Keller preached moving slowly, if you were rushing, you had done something wrong and your food would suffer.&lt;/p&gt;

&lt;p&gt;One of my favorite quotes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…you can’t spend half a career as someone else’s employee and then suddenly, one day, start thinking like an owner. If you wanted to be a great chef and restaurateur, you had to think like an owner and act like the owner from your very first job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I’ll recycle my own recommendation of Ruhlman’s previous book: if you have any interest in food (even if you just watch &lt;em&gt;Top Chef&lt;/em&gt;) you will like this book.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Leprechauns of Software Engineering</title>
   <link href="http://mdswanson.com/writeup/2015/03/30/the-leprechauns-of-software-engineering.html"/>
   <published>2015-03-30T00:00:00+05:30</published>
   <updated>2015-03-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2015/03/30/the-leprechauns-of-software-engineering</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Citing research studies can be a powerful argument. But it can also be a fallacy if we blindly place trust in research without evaluating both the methods of experimentation, as well as the actual findings.&lt;/p&gt;

&lt;p&gt;This book aims to show readers how to evaluate academic research (specifically in the context of software engineering) by going beyond the abstract, comparing the experimental setup to their own context, and vetting cited sources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The authors provides examples of how some “common wisdom” that is often cited as iron-clad and definitive is much more shaky than it is presented.&lt;/p&gt;

&lt;p&gt;Take one example: the &lt;a href=&quot;http://www.agilemodeling.com/essays/costOfChange.htm&quot;&gt;cost of change curve&lt;/a&gt;. Traditional, this is presented as a graph that plots the “cost of change” over the stages of a project (requirements, design, coding, production, etc). The graph depicts a smoothly-sloping, exponential relationship — intended to highlight that the further along the development process, the more costly a change will be to make.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/cost-of-change-graph.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This graph looks very scientific and official. It is cited in early and well-known Agile software literature. But once you dig deeper, there are numerous problems with taking this graph at face value.&lt;/p&gt;

&lt;p&gt;Over time and across authors, the Y-axis morphs from measuring the cost to fix software (a bug) to the cost to change (a bug or new features?). The X-axis implies an equal time transition through the project phases (not realistic). The origin paper (Boehm 1976) is not clear on how data was collected or if measurement was consistent across all subjects.&lt;/p&gt;

&lt;p&gt;Other topics that are also critically examined: the 10x productivity developer, the cone of uncertainty, and the “terrible” software process of Waterfall.&lt;/p&gt;

&lt;p&gt;It is prudent to point out that the book is not saying that these ideas are incorrect, but rather that the “research” and “data” that is so often attached to these concepts is rather flimsy. The author calls on the software community to improve the bar for software research, not just throw it all away.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
This book had been on my radar for a while, but I was compelled to read it after a series of process-related discussions had ended with “there are many research studies that prove this is right”.&lt;/p&gt;

&lt;p&gt;I think this book is a great resource for people interested in software team process — if for nothing else other than to remind people that nearly every project and team exists in it’s own context and must be considered as such.&lt;/p&gt;

&lt;p&gt;As an aside, I was glad to have read this book recently when I came across some less-than-satisfactory (to me) research which empirically claimed that &lt;a href=&quot;http://www.itworld.com/article/2891140/study-finds-that-refactoring-doesn-t-improve-code-quality.html&quot;&gt;“refactoring does not improve code quality”&lt;/a&gt;. A more detailed critic of this paper is left as an exercise to future readers.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>What is the point of Optionals?</title>
   <link href="http://mdswanson.com/blog/2015/03/17/what-is-the-point-of-optionals.html"/>
   <published>2015-03-17T00:00:00+05:30</published>
   <updated>2015-03-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2015/03/17/what-is-the-point-of-optionals</id>
   <content type="html">&lt;p&gt;There is a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;). It has a tendency to propagate throughout your code. Excessive null checking is a sign of unconfident code — “I’m not sure if this could even be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, might as well check for it…just in case”.&lt;/p&gt;

&lt;p&gt;One pattern that developers reach for to help with this is the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So some code like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineStats&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMachineStatsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Machine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machineService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMachine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntityNotFoundExpection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Becomes this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineStats&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMachineStatsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machineServive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMachine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntityNotFoundExpection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At first glance, all that we’ve done is swap a null check for a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;.isPresent()&lt;/code&gt;, so what’s the point? Is this just “Patterns for Patterns Sake”?&lt;/p&gt;

&lt;p&gt;I wondered this myself. Like for a long time.&lt;/p&gt;

&lt;p&gt;But after listening to an episode of the &lt;a href=&quot;http://giantrobots.fm/&quot;&gt;Giant Robots podcast&lt;/a&gt; on &lt;a href=&quot;http://giantrobots.fm/137&quot;&gt;Haskell’s Maybe data type&lt;/a&gt;, I finally understood why you would prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s all about being expressive.&lt;/p&gt;

&lt;p&gt;By returning an &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt;, you are being explicit that the value could be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. This loosely enforces a contract — if a method returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt;, the caller should handle the &lt;code class=&quot;highlighter-rouge&quot;&gt;absent&lt;/code&gt; case. If a method returns an unwrapped type, then it should be assumed to never be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I can’t speak for Haskell, but at least in Java, this contract has to be more of a convention than a strict enforcement.&lt;/p&gt;

&lt;p&gt;But if we follow this convention (and spread this knowledge among the team), we can drastically reduce the need for the defensive null checks that are so frequently sprinkled throughout a codebase.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineStats&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMachineStatsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Machine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machineService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMachine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the end of the day, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; is more than just a band-aid for covering up &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerExceptions&lt;/code&gt;, it is a mechanism to better communicate how your code works to others.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How I Curate the IndyHackers' Newsletter</title>
   <link href="http://mdswanson.com/blog/2014/10/03/how-i-curate-the-indyhackers-newsletter.html"/>
   <published>2014-10-03T00:00:00+05:30</published>
   <updated>2014-10-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/10/03/how-i-curate-the-indyhackers-newsletter</id>
   <content type="html">&lt;p&gt;For almost two years now I’ve written a &lt;a href=&quot;http://indyhackers.us6.list-manage.com/subscribe?u=244b5370d41b5cf4146ec517c&amp;amp;id=b51f983563&quot;&gt;monthly newsletter for IndyHackers&lt;/a&gt;. With the help of &lt;a href=&quot;https://twitter.com/mileszs&quot;&gt;Miles Sterrett&lt;/a&gt;, we find a bunch of cool projects, events, and blog posts that happened in Indianapolis (or surrounding areas) over the past month. People seem to like it and we get to promote awesome local developers doing awesome stuff.&lt;/p&gt;

&lt;p&gt;There are four basic sections in the &lt;a href=&quot;http://indyhackers.org/newsletter/archive&quot;&gt;newsletter&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hacks (projects/apps built by local developers or small companies)&lt;/li&gt;
  &lt;li&gt;Happenings (special events/new meetups/conferences within driving distance)&lt;/li&gt;
  &lt;li&gt;Blogs (posts written by local developers - mostly new, sometimes old)&lt;/li&gt;
  &lt;li&gt;Jobs (listings from the IndyHackers site)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I aim for two to four items per section per issue.&lt;/p&gt;

&lt;p&gt;In the beginning, the process for finding the content of the monthly emails
was rather tedious. As Miles and I would come across interesting stuff, we
would add links to a shared &lt;a href=&quot;https://gist.github.com/&quot;&gt;Gist&lt;/a&gt;. But typically that would only surface a few items and then I’d have to go digging.&lt;/p&gt;

&lt;p&gt;The first few months, I would spend several hours scrolling back through Twitter (I try to follow a wide range of local developers on my personal account), poking around GitHub, checking the blogs of any development shop I could think of, and generally just flailing around trying to find good stuff.&lt;/p&gt;

&lt;h1 id=&quot;time-for-automation&quot;&gt;Time for automation&lt;/h1&gt;

&lt;p&gt;It was taking too long for me to find the good content and Miles and I would often struck by a wave of panic when we realized we have nothing ready and the newsletter needed to be sent out the next day.&lt;/p&gt;

&lt;p&gt;Over time, I started building small ways to help automate the curation process and I wanted to share what the current process is today. I’ve been able to get the time per issue down from 5-15 hours to 1-2 hours.&lt;/p&gt;

&lt;h2 id=&quot;hacks&quot;&gt;Hacks&lt;/h2&gt;

&lt;p&gt;This section has the most variability. Some months, I see 4-5 cool things in passing and I’m all set. Other times, I have to trawl through GitHub and “spy” on what people are doing. Believe it or not, I used to search for “indiana” on GitHub, look at the results and then open like 50 tabs for each user and see if they had any new and interesting repositories.&lt;/p&gt;

&lt;p&gt;Eventually, I built a &lt;a href=&quot;https://github.com/swanson/local-pulse&quot;&gt;crude script that uses the GitHub API&lt;/a&gt; to do this for me. I search for all users with “Indiana” or “Indianapolis” in the Location on their profile and then look for non-forked repos created in the past 3 months. I shove that into a SQLite database and render a webpage with links and a description. Then, I can go through any promising leads and find the good stuff.&lt;/p&gt;

&lt;h2 id=&quot;happenings&quot;&gt;Happenings&lt;/h2&gt;

&lt;p&gt;This is still a largely manual process. Fortunately, most people that are promoting local developer events find out about &lt;a href=&quot;http://indyhackers.org/&quot;&gt;IndyHackers&lt;/a&gt; and email us directly. This is incredibly helpful and pretty much a guarantee that we’ll include your event in the newsletter. We always ask for a coupon or discount code for our readers so they feel special!&lt;/p&gt;

&lt;p&gt;If we are low on special events, I use Meetup and search for tech meetings within 25 miles and look for any special guests or new meetups that are starting. If I’m still light on content, I’ll look for any upcoming Startup Weekends or out-of-state (but still Midwest) conferences or hackathons.&lt;/p&gt;

&lt;h2 id=&quot;blogs&quot;&gt;Blogs&lt;/h2&gt;

&lt;p&gt;This one is most difficult for me currently. Alex Conner was kind enough to build a &lt;a href=&quot;https://github.com/codatory/indyhackers.org-planet&quot;&gt;“planet” blog aggregator for Indy developers&lt;/a&gt; and that is my first stop. Unfortunately, it’s not a complete listing and, frankly, there aren’t that many people blogging at the moment.&lt;/p&gt;

&lt;p&gt;I try really hard to feature a variety of bloggers — from different companies and different tech scenes — but I’d like to do better going forward. You might notice that the same group of bloggers appear quite frequently and that is partly due to me not knowing about any other blogs.&lt;/p&gt;

&lt;p&gt;I’d love to find new voices for this section and get them added to the aggregator, so let me know who I’m missing.&lt;/p&gt;

&lt;h2 id=&quot;jobs&quot;&gt;Jobs&lt;/h2&gt;

&lt;p&gt;This one is easy. I simply look at the &lt;a href=&quot;http://indyhackers.org/jobs&quot;&gt;IndyHackers job board&lt;/a&gt; and copy over the listings. No automation really necessary — but we could do a better job at getting companies to post there. It’s free and highly targeted!&lt;/p&gt;

&lt;h1 id=&quot;looking-ahead&quot;&gt;Looking Ahead&lt;/h1&gt;

&lt;p&gt;Our list has grown 35% this year and we continue to have high engagement (70% open rate, 30% click-through). I’d love to be more intentional about finding new readers in 2015 and promoting the newsletter at meetups.&lt;/p&gt;

&lt;p&gt;If you run an Indianapolis meetup and want to encourage members to subscribe, that would be awesome. We are always looking for cool projects, news, or events so don’t be shy — even if it’s self-promotion, we love sharing all the neat stuff people are working on.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Think Like a Chef</title>
   <link href="http://mdswanson.com/writeup/2014/08/11/think-like-a-chef.html"/>
   <published>2014-08-11T00:00:00+05:30</published>
   <updated>2014-08-11T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/08/11/think-like-a-chef</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
It’s no secret that I’m interested in the idea of cooking and extracting lessons from chefs. Despite not cooking all that much myself, I find similarities between cooking and software; both require some amount of creativity, both can be treated as a craft.&lt;/p&gt;

&lt;p&gt;I was drawn to this book because it aims to explore how a chef thinks,
rather than just list recipes. And I’ve been watching way too much &lt;em&gt;Top Chef&lt;/em&gt; lately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book is organized into four major sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Techniques: roasting, braising, stock-making, etc&lt;/li&gt;
  &lt;li&gt;Studies: using one ingredient as a building-block for a dish&lt;/li&gt;
  &lt;li&gt;Trilogies: recipes around 3 ingredients that are known to work well together&lt;/li&gt;
  &lt;li&gt;Component Cooking: using seasonal vegetables as interchangeable components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea goes that once you are proficient with the technical skill of cooking,
you can start building dishes around a single ingredient. Over time, you start to notice patterns and pairings that work well together. And once you have some basic staples in your repertoire, you can mix in seasonal ingredients for variety and freshness.&lt;/p&gt;

&lt;p&gt;I found it illuminating to find software analogues. Techniques for software are the more mechanical bits of development: writing code, writing tests, making applications. The concept of a Study might map to picking your preferred language: you might pick up Ruby and then use it for simple scripting, web applications, command line utilities.&lt;/p&gt;

&lt;p&gt;Trilogies reminded me of best practices at a very high level. A relational database works well with a server-side web application; a JSON API works well with a mobile app. I also thought of a (somewhat forced) analogy of flavor pairings — in food, they say that food that grows together tastes good together. You can see this to an extent with software tools, where natural pairings seem to crop up in the form of “stacks”. Rails applications gravitate toward Postgres/Redis, PHP towards MySQL, .NET towards SQL Server. It’s not to say that you &lt;em&gt;can’t&lt;/em&gt; mix and match, but generally you will get the best “taste” if you stay within a stack.&lt;/p&gt;

&lt;p&gt;Component Cooking seemed natural for software. Whether you think about more formalized Service Oriented Architecture or just dropping in similar components like logging or background workers, it is seen as benefit to design systems out of pluggable components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I actually just skimmed over the actual recipes in the book (working through them all would likely take months), but I appreciated reading this book. If nothing else, it got me thinking about alternative metaphors for talking about software.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flash Boys</title>
   <link href="http://mdswanson.com/writeup/2014/08/01/flash-boys.html"/>
   <published>2014-08-01T00:00:00+05:30</published>
   <updated>2014-08-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/08/01/flash-boys</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
As the US stock market becomes more and more computerized, it has given rise to a new
industry of high frequency, automated trading. The days of hundreds of brokers, all yelling
across a crowded room and waving papers over their head, are over.&lt;/p&gt;

&lt;p&gt;Now the chaos happens in a data center somewhere, as algorithmic trading models fight to 
be the fastest to respond to market data and jockey for physical proximity to key machines
inside a data center.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I came into this book with a pre-existing mental model of high frequency trading (HFT),
due to the increasing media coverage in recent years. I think nearly
every programmer who has entered the field in the past 5 years has been approached
or interviewed with some kind of company that deals with automated trading (they were a 
mainstay at job fairs when I was in school).&lt;/p&gt;

&lt;p&gt;I’m a big fan of Michael Lewis (&lt;em&gt;Moneyball&lt;/em&gt;, &lt;em&gt;Liar’s Poker&lt;/em&gt;, &lt;em&gt;The Big Short&lt;/em&gt;) and I am
aware of the criticism he receives. Putting aside whether his accounts are always unbiased
or 100% factual, the guy knows how to write a great story and this book was thoroughly
enjoyable.&lt;/p&gt;

&lt;p&gt;To give you a sense of the weird intersection of technology and trading, the story opens
with a plan to drill a tunnel &lt;strong&gt;through the side of a mountain&lt;/strong&gt; so that a fiber optic cable could
have a straight-line path from Chicago to NYC (thus shaving &lt;em&gt;milliseconds&lt;/em&gt; off the transmission
time).&lt;/p&gt;

&lt;p&gt;Lewis frames the HFT shops as a mysterious and deceptive lot and focuses on the
innovation-slash-righteous-crusade of a Canadien banker who unravels how HFT is influencing
the US stock market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
This book is something to read for pleasure. It’s light on practical advice, but the story
is intriguing, especially given the tie-ins with programming and software.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Senior Software Engineer</title>
   <link href="http://mdswanson.com/writeup/2014/07/31/the-senior-software-engineer.html"/>
   <published>2014-07-31T00:00:00+05:30</published>
   <updated>2014-07-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/07/31/the-senior-software-engineer</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
By the time you’ve been coding for a few years, the skills needed to advance into
a technical leadership role involve more than just learning a new framework or language.&lt;/p&gt;

&lt;p&gt;To be a senior engineer — trusted by both developers and management — you
need to focus on delivering results with software and aligning yourself with the needs
of the company. By combining strong development skills with the ability to write clearly,
make convincing technical arguments, and lead a project from start to delivery, you can
become an amazing senior engineer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book covers topics that range from leading a team by example to making decisions when 
starting a project to interviewing potential hires. It seems like a whirlwind tour, but 
each section is digestible and focused on practical actions you can take.&lt;/p&gt;

&lt;p&gt;My biggest mental shift came from the first chapter, which emphasizes a laser-focus on 
delivering results. Most of us think we are “result-oriented” but upon closer inspection, 
we often lack a true focus on delivering value. An email promising you’ll “look into it” 
doesn’t provide value and is an implicit promise that you may not be able to uphold.&lt;/p&gt;

&lt;p&gt;When providing technical recommendations, remember to consider the priorities of the other
parties. Something that is important to you (as a developer) might be near the bottom of
the list for your manager or client. By considering outside priorities, you can enter
discussions in the right mindset and be better prepared to address concerns.&lt;/p&gt;

&lt;p&gt;These are all things that might seem obvious in hindsight, but it was beneficial to have
them all spelled out (directly in the context of software) and reinforced with examples.&lt;/p&gt;

&lt;p&gt;The book is also the best description of how I work on a daily basis and aligns closely
with my own views on technical debt vs slop. I wish I could have read this book about 
a year ago, as I started moving into a more senior role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
For a junior developer, use this book as a means to compare and contrast the mindset of
a senior engineer with your own ways of working. For a senior (or soon-to-be senior)
developer, this is your missing handbook. Highly recommended.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Creativity, Inc.</title>
   <link href="http://mdswanson.com/writeup/2014/07/29/creativity-inc.html"/>
   <published>2014-07-29T00:00:00+05:30</published>
   <updated>2014-07-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/07/29/creativity-inc</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This is the story of Pixar. As Catmull recounts Pixar’s crazy history, he weaves in his
thoughts on managing creative teams and organizations. As the company grows from scrappy
startup to critically-acclaimed darling, Catmull experiences different challenges. How do
you scale a creative process from a 5 person company to a 500 person company? How do you
protect your culture as you take on new investors, hire new employees or get acquired?&lt;/p&gt;

&lt;p&gt;Even without the incredible inside look at how Pixar makes films, the story is just fascinating,
as the Pixar team crosses paths with Alan Kay, George Lucas, Steve Jobs, Michael Eisner
(CEO of Disney), Jim Clark (founder of Netscape), John Warnock (founder of Adobe), and Bill 
Joy (founder of Sun Microsystems).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I couldn’t put this book down. Unlike some other business books that tell the stories
of lesser-known companies (I’m looking at you Eric Ries…), everyone has heard of Pixar
and is familiar with their outputs.&lt;/p&gt;

&lt;p&gt;It was enlightening to see how Catmull’s processes adapted as the company grew in
both size and success. The core values of candor (honesty with a lack of reserve) and 
fearlessness (freedom to try and fail) have lead the company through times of stress,
uncertainty, and dramatic changes.&lt;/p&gt;

&lt;p&gt;By the time you get half way through the book, you are completely sold on how Pixar
does things, but maybe a little skeptical about the practical implications — it
sounds great in the book, but is that how it actually works? Could I apply any of that
stuff outside a 3D animation studio?&lt;/p&gt;

&lt;p&gt;And then, Catmull delivers the goods. The final third of the book pulls back the
curtain and deep dives into the techniques and mechanisms Pixar uses to collaborate.
It was surprising to see how much overlap their was with software process; “Dailies”
map to team standups and swarming to remove blockers, visualizing the work flow to help
teams impose limits, doing postmortems to close out films, and more.&lt;/p&gt;

&lt;p&gt;Pixar’s concept of the Braintrust — a group of proven problem solvers meeting to
provide constructive criticism — seems like a concept that is missing from the 
de-facto software process. There is no authority, no mandated solutions, no selfish agendas.
The goal is to help the director raise their game and solve their own problems, not to
just prescribe fixes that worked in the past.&lt;/p&gt;

&lt;p&gt;Lastly, it was refreshing to see Catmull directly address the Special Snowflake argument.
Sure, this is all great, but it was only coincidence, or timing, or the special people,
that made it work for Pixar! The final chapter, taking place after Disney buys Pixar,
shows how Pixar replicated their successes and methods inside an existing corporate
structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Anyone working in a creative environment can take something away from this book. 
Unfortunately, devote believers in &lt;a href=&quot;http://jonnegroni.com/2013/07/11/the-pixar-theory/&quot;&gt;The Pixar Theory&lt;/a&gt; may be disappointed.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Everything is Bullshit</title>
   <link href="http://mdswanson.com/writeup/2014/07/23/everything-is-bullshit.html"/>
   <published>2014-07-23T00:00:00+05:30</published>
   <updated>2014-07-23T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/07/23/everything-is-bullshit</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Some things in this world are suspicious. Some are lies told by expert marketers. Some are
just bullshit.&lt;/p&gt;

&lt;p&gt;If you’ve ever seen the wonderful — and similarly named — television show
&lt;em&gt;Penn &amp;amp; Teller: Bullshit!&lt;/em&gt;, you’ll know how this works. Take a seemly innocuous concept
(animal shelters, diamond rings, recycling) and then proceed to pull back the curtain, start
tracing the money, and soon you will absolutely loathe these institutions.&lt;/p&gt;

&lt;p&gt;This book is a collection of articles from the &lt;a href=&quot;http://priceonomics.com/life-as-a-lego-professional/&quot;&gt;Priceonomics blog&lt;/a&gt;, with some new material.
But sadly, without everyone’s favorite comedian-magicians.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Some of the stories I’d read about before (wine tasting, “free” credit reports, McDonald’s 
Monopoly game), but I was pleasantly surprised to discover a new found hatred of the seal 
clubbing lobby, Chilean sea bass, and academic journals!&lt;/p&gt;

&lt;p&gt;Obviously, most of the material covered in the book are not true scams — in the
criminal sense — but I always enjoy discovering the hidden stories and weird
policies behind everyday things.&lt;/p&gt;

&lt;p&gt;The section I most enjoyed was on the Food Industrial Complex.&lt;/p&gt;

&lt;p&gt;I was surprised to learn that Schwan (the frozen food delivery company) spends the most
money on Congressional lobbying in support of industrial farming. Apparently, school lunch
contracts are worth spending millions convincing the government to classify pizza as vegetable!&lt;/p&gt;

&lt;p&gt;The fact that Honeycrisp apples are my favorite is probably not due to my great palate, but 
rather their specific design for maximum crunch. This crunch allows them to sell for 3x the 
price of other apples, incentivizing farmers to market the high margin fruit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Not much practical advice in this one (aside from the reminder that large corporations
control everything and sometimes “lying” is good for business), but enjoyable nonetheless.
Definitely some good anecdotes to start interesting dinner party conversations (or
to ensure you’re never invited back).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Game</title>
   <link href="http://mdswanson.com/writeup/2014/07/22/the-game.html"/>
   <published>2014-07-22T00:00:00+05:30</published>
   <updated>2014-07-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/07/22/the-game</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Ken Dryden played goalie (hockey) for the Montreal Canadiens in the 1970’s. He played only
six regular season games before earning the #1 goalie spot and leading his team to a
Stanley Cup. Ken would end up playing just over seven full seasons in the NHl; he won
six Stanley Cups.&lt;/p&gt;

&lt;p&gt;Ken took a year off — in the prime of his career — to finish law school amid
contract disputes. Since retiring, Ken has authored six books and served in Canada’s 
parliament as the Minister of Social Development; definitely not your average jock.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Game&lt;/em&gt; takes place over a one week period in 1979 — the final season of Ken’s career.
As Ken narrates another run-of-the-mill week, he writes in an incredibly reflective style
and uses every small interaction as a springboard for larger, deeper discussions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I’m a big hockey fan so I really enjoyed this book. Ken explored not only the day-to-day
grind of being a professional athlete, but also how the sport evolved over time. Some
concepts like team chemistry or mental superstitions seem a bit silly to outside 
observers, but to Ken, they were essential and part of the game.&lt;/p&gt;

&lt;p&gt;Every person in the organization had an important role, from the star players to the aging 
veterans to the trainers and arena ushers. Weird rituals worked because they took 
your mind off the pressure of performing, not because of any magic voodoo.&lt;/p&gt;

&lt;p&gt;On the need for strong leads:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While a team needs all kinds of players with all kinds of skills to win, it needs prototypes, strong, dependable prototypes, as examples of what you want your team to be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the shift from Canada’s backyard hockey to organized youth leagues:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Constantly preoccupied with time and keeping ourselves busy (we have come to answer the ritual question, “How are you?” with what we apparently equate with good health, “Busy”), we treat non-school, non-sleeping or non-eating time, unbudgeted free time, with suspicion and no little fear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is in free time that the special player develops, not in the competitive expedience of games, in hour-long practices once a week, in mechanical devotion to packaged, processed, coaching-manual, hockey-school skills. But without such time a player is like a student cramming for exams. His skills are like answers memorized by his body, specific, limited to what is expected, random and separate, with no overviews to organize and bring them together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On relying on over-reliance on past success:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;They won in the past, they lose in the present; it must be in the past that the answers lie. But there are no answers in the past, only clues as to what went wrong along the way. They know it, yet they can’t stop themselves from looking, and hoping.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Obviously, this book will be less interesting if you’re not into hockey or sports in general.
Personally, I enjoy reading anything well-written that examines a master of their field,
so this fits the bill perfectly.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Think Like A Freak</title>
   <link href="http://mdswanson.com/writeup/2014/07/14/think-like-a-freak.html"/>
   <published>2014-07-14T00:00:00+05:30</published>
   <updated>2014-07-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/07/14/think-like-a-freak</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The authors of &lt;em&gt;Freakonomics&lt;/em&gt; go meta and explain the thought process they use to analyze and
approach problems in a different way. Thinking “like a freak” means using data and tracing
incentives instead of looking for evidence that supports our own initial hunches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Readers familiar with &lt;em&gt;Freakonomics&lt;/em&gt; (or other books in this genre) know that these
kind of books feed on anecdotes to help you remember key points. This is no exception.&lt;/p&gt;

&lt;p&gt;To remember the concept of “letting a garden weed itself”, you might remember the story
of how Zappos offers new employees a cash bonus to quit soon after they start (to allow
people only motivated by money to self-select out). When you come up against an artificial 
barrier, remember how Kobayashi broke the hot-dog eating world records by redefining the problem.&lt;/p&gt;

&lt;p&gt;My favorite story was about the idea of &lt;a href=&quot;http://en.wikipedia.org/wiki/Prize-Linked_Savings_Account&quot;&gt;prize-linked savings accounts&lt;/a&gt;. Instead of
trying to guilt people into saving money, a bank can tap into something deemed “bad” —
in this case gambling — and spin it into a positive. A prize-linked savings account
is like a normal savings account, except that a portion of the earned interest is placed
into a shared pool that periodically pays out a lump sum to a randomly selected winner. You
get the fun and excitement of PowerBall, but at the end of the day, you still have your
existing principal amount tucked away safely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
It’s a quick and enjoyable read. I would recommend it to anyone that enjoyed &lt;em&gt;Freakonomics&lt;/em&gt; or
that is looking for some inspiration on thinking outside the box.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Personal Meditations on Software</title>
   <link href="http://mdswanson.com/blog/2014/06/29/meditations-on-software.html"/>
   <published>2014-06-29T00:00:00+05:30</published>
   <updated>2014-06-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/06/29/meditations-on-software</id>
   <content type="html">&lt;p&gt;I’ve been reading &lt;a href=&quot;http://en.wikipedia.org/wiki/Meditations&quot;&gt;Marcus Aurelius’ &lt;em&gt;Meditations&lt;/em&gt;&lt;/a&gt;. I haven’t gotten far,
but I like the concept of “thoughts addressed to yourself”. So when I came 
across &lt;a href=&quot;http://blog.seancassidy.me/meditations.html&quot;&gt;Sean Cassidy’s post&lt;/a&gt; on collecting reminders to himself, I decided 
to take 15 minutes and do the same.&lt;/p&gt;

&lt;p&gt;Some of this list is very personal, other items are widely applicable.
Some are things I’m striving to achieve, others are deeply ingrained but worth
being reminded of.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bugs will come in after you hit feature-complete. Don’t get upset. It’s not 
a big deal nor a reflection on quality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting mad when doing a code review is irrational. Calm down and go take a 
walk. Passive aggressive review comments make you mad so don’t write them 
yourself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you have the nagging thought that something could break, it’s going to 
eventually. Make sure you tell someone else or document it (even better: fix 
it).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Estimates aren’t fair. You will never have enough context to feel completely 
confident. Don’t let someone bully you into a number; express your uncertainty, 
but at the end of the day, take your best guess and move on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you are following a practice before chewing out someone else for 
not doing it. Lead by example. If you don’t follow something 100% of the time, 
why do you expect everyone else to?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having an uncomfortable conversation is hard. Letting something fester and 
build resentment is not any better. Neither option is great, so weigh your 
decision with care.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change makes you anxious and scared but you usually get over it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are less happy at the start and end of projects. Probably related to 
change. Things start looking up when you have a routine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;More often than not, a planned project falls through. Don’t get so bent out 
of shape about a project that might not even happen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You like to complain about things your predecessors did not do. Sometimes you
don’t do them either! Assume people did the best they could given their 
knowledge, resources, and deadlines at the time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A good team can make a bad project bearable. A bad team can make a good 
project miserable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speak your mind in retrospectives, but remember your words have impact. Don’t 
take out frustrations on teammates, especially publicly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No code will ever be perfect and you need to accept that it is okay. 
Gold-plating isn’t always obvious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No one writes code exactly like you (or anyone else). Be okay with small 
— or even medium — differences in implementation. If the differences
are large and frequent, you should pair or re-evaluate your own preferences.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are fortunate to be able to make a living doing something you also 
consider a hobby. Not everyone is that lucky; not everyone wants to code after 
work and you should respect that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the end of the day, you are just a guy sitting in an office pressing 
buttons. It could be a lot worse. Relax.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>The E-Myth Revisited</title>
   <link href="http://mdswanson.com/writeup/2014/06/03/emyth.html"/>
   <published>2014-06-03T00:00:00+05:30</published>
   <updated>2014-06-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/06/03/emyth</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The E-Myth — short for The Entrepreneur Myth — is that only by some epic, odds-defying
effort can a visionary entrepreneur create a successful business. The book goes through it’s 
own brand of trademarked business process based on creating a turn-key, franchise (whether or not
you intend to franchise it is a moot point).&lt;/p&gt;

&lt;p&gt;I read this book on recommendation from the &lt;a href=&quot;http://podcasts.thoughtbot.com/giantrobots/96&quot;&gt;Giant Robots podcast&lt;/a&gt;, mainly on the basis of
the intriguing review of this book as the “worst/best business book ever”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I get why this is the one of the worst and best business books simultaneously! There is a lot
of empty substance that I didn’t find practical (at least to my domain of software and engineering
services); the long monologue style was off-putting and at my times my Bozo Detector was 
going off the charts.&lt;/p&gt;

&lt;p&gt;The basic thesis is that to have a successful small business you must follow the patterns of
turn-key franchise operations — otherwise you will always be “trapped” working &lt;em&gt;in&lt;/em&gt; your
business, not &lt;em&gt;on&lt;/em&gt; your business. If you can’t take a day off without your business having to
close, you are really just an employee, not a business owner.&lt;/p&gt;

&lt;p&gt;But there are also some really interesting nuggets of wisdom. And since people only really
remember the nuggets of wisdom in these kind of business books anyways, there is value in reading
this book.&lt;/p&gt;

&lt;p&gt;The two most impactful points were the concepts of a “technician mindset” and “replacing
yourself in the org chart”.&lt;/p&gt;

&lt;p&gt;When technical/skilled workers branch out on their own, they often have a false vision that
running their own company means they will be able to do all the same things they did while
working for someone else, but without a boss! I like programming, so if I start my own software
consultancy, I can program all day on stuff I want to do and not have some suit telling me
what to do! Wrong.&lt;/p&gt;

&lt;p&gt;The other two facets (the entrepreneur mindset and the manager mindset) need to be balanced.
If you spend all day coding (technician) but don’t spend any time on brainstorming new
engagement models (entrepreneur) or handling invoicing (manager), you are going to end up
stressed out and over-worked. Finding the right balance is difficult and a struggle in
personal confidence, but I found that acknowledging what mindsets are out of your comfort zone
to be useful.&lt;/p&gt;

&lt;p&gt;The author advocates that one of the first activities your business should do is to come up
with the org chart for your company five years in the future. It seems silly to list
managers and presidents and departments when you have a one or two person company, but the
idea is to fill each role with yourself. This helps you visualize exactly how many hats you
have to wear early on and emphasizes that you need to come up with a system for each role so
that you can fill it with someone else. The idea is to work in the lowest ranking jobs
first, document your best-practices, and then hire someone to follow your guide while you start
working the next position up (repeating the process until you can remove yourself completely).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I found the concept of a turn-key franchise business to be interesting and that the technician
mindset would be a trap that I might fall into had I not been exposed to this book. I found
the “replace yourself in the org chart” model to be very pragmatic, even in a traditional
corporate environment; I find that we can often find motivation to start a new initiative, but
we don’t plan for how to eventually transition the responsibilities and workload once the initial
enthusiasm dies down.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Extracting Form Models in Android</title>
   <link href="http://mdswanson.com/blog/2014/06/02/android-form-models.html"/>
   <published>2014-06-02T00:00:00+05:30</published>
   <updated>2014-06-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/06/02/android-form-models</id>
   <content type="html">&lt;p&gt;In my continuing &lt;a href=&quot;http://www.mdswanson.com/blog/2014/04/07/durable-android-rest-clients.html&quot;&gt;quest to get code out of Android Activities&lt;/a&gt;, I’ve implemented
the traditional “Form Model” pattern in a recent project with great success and wanted
to share my thoughts.&lt;/p&gt;

&lt;p&gt;The basic idea is to extract the code for handling the UI interactions, as well
as the data binding and any state keeping, into its own class. This separation
feels natural and keeps our Activities simple.&lt;/p&gt;

&lt;p&gt;I think this is an area that is not often explored in Android — there is
less of an emphasis on data entry and forms in most of the developer documentation.
When you think of a lot of the popular social apps, most of the screens are just
displaying information; they might have a few screens to compose a tweet or message,
but the pain is not high.&lt;/p&gt;

&lt;p&gt;For me, my past two Android applications have been &lt;em&gt;very heavy&lt;/em&gt; on data entry. I think
this is partial due to the domains (health care, finance) and the clients (closer to
Enterprise than Start-up). But we were constantly making complex messes of our “form
input” screens — especially when we started adding things like editing existing
items, prompting to discard unsaved changes, and handling rotation without clearing
all the fields.&lt;/p&gt;

&lt;p&gt;Using this form model approach has led to fewer bugs, more understandable code, and 
happier developers.&lt;/p&gt;

&lt;h2 id=&quot;example-search-form&quot;&gt;Example: Search form&lt;/h2&gt;

&lt;p&gt;We have a banking app and we want to have a screen for searching through our 
transactions. There will be multiple filters: let’s just start with an account spinner,
a keyword field and an amount range. (Hopefully, you can see how more of these filters will
likely be added in the future and how the complexity could explode).&lt;/p&gt;

&lt;p&gt;Instead of shoving all of the views, click handlers, validation logic, and data binding
into an Activity, we will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchForm&lt;/code&gt; class to handle all of this.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchForm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spinner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAccountSpinner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAccountAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mKeywordField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min_amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrencyEditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMinAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max_amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrencyEditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMaxAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SearchFormModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttributeSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ButterKnife&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;3 @JakeWharton&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mAccountAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAccountSpinner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mAccountAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAccountAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKeywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mKeywordField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setKeywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mKeywordField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoneyAmount&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMinimumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMinAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMinimumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mMinmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAmountFromDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoneyAmount&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMaximumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMaxAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMaximumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mMaxAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAmountFromDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSelectedAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAccountSpinner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSelectedItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clearErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isValidAmountRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mMinAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid range&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mMaxAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid range&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValidAmountRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMinimumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMaximumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clearErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mMinAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mMaxAmountField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchParameters&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SearchParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSelectedAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;getKeywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;getMinimumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;getMaximumAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECTED_ACCT_INDEX&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAccountSpinner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSelectedItemPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECTED_ACCT_INDEX&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAccountSpinner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSelection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We create a class that derives from &lt;code class=&quot;highlighter-rouge&quot;&gt;LinearLayout&lt;/code&gt; (or maybe a &lt;code class=&quot;highlighter-rouge&quot;&gt;FrameLayout&lt;/code&gt; if you prefer)
which allows us to group up the related controls into one layout that we will inflate. We
setup our views and create an adapter for the list of accounts.&lt;/p&gt;

&lt;p&gt;We wrap up the Android controls in getter/setters — this may be somewhat controversial,
but I think it makes for a better public API for &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchForm&lt;/code&gt;. We’ve got a method to validate
the user input and apply errors if needed. We have &lt;code class=&quot;highlighter-rouge&quot;&gt;buildParameters()&lt;/code&gt; that does some data
binding and returns a domain object. And we finish it off with two methods that interact with
Android’s &lt;code class=&quot;highlighter-rouge&quot;&gt;onSaveInstanceState&lt;/code&gt; Bundle to handle custom configuration changes (note that most
stock UI controls will handle their own persistence).&lt;/p&gt;

&lt;p&gt;This is about a hundred lines of code and is pretty good for the most part. Everything in this
class seems like it belongs in a “search form” object and there are good extension points for
future features (date range filter, expense vs deposit filters, checks only, etc). We
intentionally avoid dealing with &lt;strong&gt;how&lt;/strong&gt; we get some of the data, leaving that up to other,
more appropriate parts of the code.&lt;/p&gt;

&lt;p&gt;What do things look like on the Activity side?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionSearchActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchForm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transaction_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search Your Transactions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mAccounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fetch accounts via API/DB/etc&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onOptionsItemSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getItemId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action_submit_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onSubmitSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onOptionsItemSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSubmitSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Do your magic, post to an API/DB/etc&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// You have access to the domain object with mForm.buildParameters()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Menu&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getMenuInflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our Activity will include a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;com.example.SearchForm /&amp;gt;&lt;/code&gt; tag in it’s XML layout and
then just handle high-level user interactions (hitting submit in the ActionBar) and
coordinates fetching and storing data. The heavy UI lifting and form logic is delegated 
to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchForm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This activity comes in at around 50 lines — most of which is just boilerplate from
the framework for lifecycles and menu creation.&lt;/p&gt;

&lt;h2 id=&quot;overall-impressions&quot;&gt;Overall impressions&lt;/h2&gt;

&lt;p&gt;Things get a bit more complex once you start talking to an API or database, but overall
by moving the form-specific logic and view concerns out of the Activity, the code becomes
easier to understand.&lt;/p&gt;

&lt;p&gt;I can write a whole slew of Robolectric tests on &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchForm&lt;/code&gt; without
getting bogged down in the activity lifecycle. I can write tests about the interactions with
form, the ActionBar, and the backend without exercising every edgecase. And when it comes 
time to add a new filter to the form, I will likely avoid having to make any changes to 
the Activity (ala the &lt;a href=&quot;http://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;Open/closed principle&lt;/a&gt; for those playing Design Pattern Bingo 
at home).&lt;/p&gt;

&lt;p&gt;Coming from other frameworks (and speaking with other developers), data binding is
pretty lacking on Android. Something still seems a bit off with this design because we
are coupled tightly to Android classes and there is dependency on knowing the order of
methods to call (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize()&lt;/code&gt; should be called before &lt;code class=&quot;highlighter-rouge&quot;&gt;validate()&lt;/code&gt;) — however
I think it is an improvement over the “giant mud ball Activity”.&lt;/p&gt;

&lt;p&gt;As your form models get more and more complex, you may want to think about extracting
validations to a separate object and moving custom view functionality into their own
controls (as you can see in our example with the &lt;code class=&quot;highlighter-rouge&quot;&gt;CurrencyEditText&lt;/code&gt;). Also, consider
that complex forms might better serve the user being broken up into multiple steps as
a wizard.&lt;/p&gt;

&lt;p&gt;We’ve found this pattern to be a big win in untangling hairy form code and I would
recommend giving it a try. I’ve formalized the code patterns a bit more and created a
small base class to reduce a bit of boilerplate going forward, feel free to &lt;a href=&quot;https://gist.github.com/swanson/c6c88710ff63d88de004&quot;&gt;borrow it&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’d love to hear your thoughts, criticisms, or suggestions; get in touch with me
on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>There is more to it than code</title>
   <link href="http://mdswanson.com/blog/2014/05/30/more-than-code.html"/>
   <published>2014-05-30T00:00:00+05:30</published>
   <updated>2014-05-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/05/30/more-than-code</id>
   <content type="html">&lt;p&gt;There are activities — other than programming on client work — that are key parts of
working in the software industry.&lt;/p&gt;

&lt;p&gt;If you work for a software company and you want to do, e.g. Ember.js work, you should be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Going to local Javascript meetups (networking, public speaking)&lt;/li&gt;
  &lt;li&gt;Reading and writing JS blogs (professional development, technical writing)&lt;/li&gt;
  &lt;li&gt;Experimenting with open source libraries (professional development, technical development)&lt;/li&gt;
  &lt;li&gt;Fiddling with personal projects that use Ember.js (professional development, project management)&lt;/li&gt;
  &lt;li&gt;Giving lunch-and-learn presentations at the office (public speaking, professional development)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These things will generate leads for future Javascript work, demonstrates your ability to build
Ember apps, and expands knowledge of the framework throughout your company.&lt;/p&gt;

&lt;h2 id=&quot;isnt-all-that-stuff-for-marketing-and-biz-dev-to-handle-i-just-write-code&quot;&gt;Isn’t all that stuff for marketing and biz dev to handle? I just write code…&lt;/h2&gt;

&lt;p&gt;Producing artifacts (blogs, screencasts, comments/discussion posts, open source, talks, etc) is a 
form of marketing and business development that requires development chops. The folks in The
Marketing Department can’t do this.&lt;/p&gt;

&lt;p&gt;Think about who you would seek out if your business needed help with Javascript. Chances are it will 
be the local company that sponsors the JS meetup, the independent contractor that gave a 
conference talk, or companies with a well-known community presence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Networking is not just for LinkedIn bozos at business mixers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Networking is more of a mindset and most developers aren’t that far off from doing it already, 
whether you know it or not. Having a discussion on Twitter about a blog post is networking. Going 
to local meetups is networking. Playing table tennis with other developers is networking.&lt;/p&gt;

&lt;p&gt;Building these kind of connections aids in recruiting (“hmm, that company 
has a lot of people I like interacting with, maybe I’ll apply”), business development (“We don’t 
have capacity to do this work, let’s steer this qualified lead over to them”), and marketing (“Oh, 
FooBarCo? Yeah, I know a couple people there that are really sharp”).&lt;/p&gt;

&lt;h2 id=&quot;but-what-do-i-get-out-of-it-i-might-have-to-do-some-of-that-stuff-on-my-own-time&quot;&gt;But what do I get out of it? I might have to do some of that stuff “on my own time”…&lt;/h2&gt;

&lt;p&gt;Participating in these activities allows you to gain more influence and control in your 
professional life. If you just sit back and wait to be “placed” on a project, what you work on is 
largely the luck of the draw. If you want to work with some particular technology, doing business 
development and marketing improves the odds that your company can win those kind of projects —
and that you will be staffed to them.&lt;/p&gt;

&lt;p&gt;Sometimes it is hard to see time that we aren’t spending typing code into our editor as beneficial
since, at the end of the day, developers will be evaluated mostly on their code. But by being 
deliberate about doing these kinds of networking activities you gain control.&lt;/p&gt;

&lt;p&gt;Control of what projects you might work on, control of what technologies you get to use, and control 
about the kinds of people you work with.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding the Four Rules of Simple Design</title>
   <link href="http://mdswanson.com/writeup/2014/05/30/four-rules-of-simple-design.html"/>
   <published>2014-05-30T00:00:00+05:30</published>
   <updated>2014-05-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2014/05/30/four-rules-of-simple-design</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
A few years ago, I spent a Saturday in a room of developers doing a &lt;a href=&quot;http://www.mdswanson.com/blog/2011/12/05/global-day-of-code-retreat-recap.html&quot;&gt;“Code Retreat”&lt;/a&gt;. The idea
is to work on solving &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway's_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt; as an exercise in small-scale software design.
You work in a pair for 45 minutes, sometimes with special constraints like “no if-statements”
or “no mutation”, and then you promptly delete all the code, switch partners, and start again.&lt;/p&gt;

&lt;p&gt;Corey Haines is the main facilitator of this event and this book catalogues some of the
core lessons he learned from running these retreats over the past five years. He codifies
these lessons into “the four rules of simple design” — a set of guidelines coined by Kent
Beck in the 1990s.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
A very quick and enjoyable read. By limiting the scope of the book to Conway’s Game of
Life, the author is able to go deep into discussions without having to construct new 
examples for every concept.&lt;/p&gt;

&lt;p&gt;The four rules — tests pass, expresses intent, no duplication, and simple —
seem to be a bit more approachable than the more formal rules (SOLID, Law of Demeter, etc).
I appreciated that the rules have a bit of room for interpretation and discussion.&lt;/p&gt;

&lt;p&gt;After a brief explanation of each rule, the author dives into concrete examples and explains
some of the more nuanced points, such as “topology duplication” and testing behavior to show
intent.&lt;/p&gt;

&lt;p&gt;I had a real Aha moment when I came across an example of “tests that depend on previous
tests”. In this specific case, an assumption was made about the default constructor of an object.
Because there was a lack of explicitness, unrelated changes caused a whole bunch of tests 
to fail. The solution — which I’ve had trouble articulating in the past — is to use 
builder methods and not allow external callers to use a default constructor. This had the
added benefit of being more clear, since the name of the build method was more revealing than
an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;new()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Anyone struggling with uncertainity about how to design object relationships would benefit from
this book. As a past Code Retreat attendee, I enjoyed being able to look back and see how a master
of the domain implemented solutions; it felt kind of like I was reading the secret solution’s
manual :-)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Two Lines of Code: An Open Source Tale</title>
   <link href="http://mdswanson.com/blog/2014/05/14/open-source-tale.html"/>
   <published>2014-05-14T00:00:00+05:30</published>
   <updated>2014-05-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/05/14/open-source-tale</id>
   <content type="html">&lt;h3 id=&quot;january-7-2014---093545-am&quot;&gt;January 7, 2014 - 09:35:45 AM&lt;/h3&gt;

&lt;p&gt;It all started with a JavaScript error…&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Uncaught&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SyntaxError&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unexpected&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ILLEGAL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was trying to catch up on my RSS items, but nothing was rendering on the page.&lt;/p&gt;

&lt;p&gt;I dumped some debugging info and opened an &lt;a href=&quot;https://github.com/swanson/stringer/issues/295&quot;&gt;issue on GitHub&lt;/a&gt;. I found a
workaround, but it involved marking all my stories as read. No time to look into
this issue now.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;february-24-2014---021758-pm&quot;&gt;February 24, 2014 - 02:17:58 PM&lt;/h3&gt;

&lt;p&gt;Several other users have reported experiencing the same bug. A potential fix
that involved removing unprintable characters (&lt;code class=&quot;highlighter-rouge&quot;&gt;.gsub(/[^[:print:]]/, '')&lt;/code&gt;) was 
proposed but didn’t seem to completely address the issue.&lt;/p&gt;

&lt;h3 id=&quot;march-27-2014---100015-pm&quot;&gt;March 27, 2014 - 10:00:15 PM&lt;/h3&gt;

&lt;p&gt;A comment on the [still unresolved] bug triggered an email notification from
GitHub earlier this morning. I had some time to look into it after work.&lt;/p&gt;

&lt;p&gt;I went back to my original bug report and tried to create a minimal test
case that would reproduce the bug. I opened up the Chrome Dev console and started
pasting in chunks of the large string I was trying to parse.&lt;/p&gt;

&lt;p&gt;Using a primitive form of &lt;a href=&quot;http://git-scm.com/docs/git-bisect&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;&lt;/a&gt;, I tried the first half of the 
string to see if the error happened again. Nope. I halved the remaining part of 
the string. I repeated until I had it narrowed down to a few characters.&lt;/p&gt;

&lt;p&gt;The string in question was “QNk8n”. Nothing jumps out as being extraordinary
about that string.&lt;/p&gt;

&lt;p&gt;I pasted it into an &lt;code class=&quot;highlighter-rouge&quot;&gt;irb&lt;/code&gt; session and found the likely culprit:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QNk8n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;+FFE2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;+FFA8&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some weird unicode characters were being tacked onto the end!&lt;/p&gt;

&lt;p&gt;Googling for “unicode 2028 javascript” led me to a really excellent
blog post explaining that &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;JSON is not a true subset of JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The long and short of it: &lt;code class=&quot;highlighter-rouge&quot;&gt;u+2028&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;u+2029&lt;/code&gt; are valid JSON but not valid
JavaScript. My app was trying to parse the JSON representation of the RSS
articles into JavaScript (via backbone.js) to be rendered.&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&quot;https://github.com/swanson/stringer/commit/71199cc432fe03ce483e3f7b55cea683c09d6cfc#diff-3ac47732f4ef157a8877f2753398056cR90&quot;&gt;failing test&lt;/a&gt; and then &lt;a href=&quot;https://github.com/swanson/stringer/commit/2ae53ed8d47f9d9bf25dd9c41c18f9935a390de1&quot;&gt;fixed the bug&lt;/a&gt; (confession: my
first bug fix passed the test but &lt;a href=&quot;https://github.com/swanson/stringer/pull/314&quot;&gt;created another&lt;/a&gt;, whoops).&lt;/p&gt;

&lt;p&gt;Pushed. Deployed. Did a little dance.&lt;/p&gt;

&lt;h3 id=&quot;march-30-2014---065619-pm&quot;&gt;March 30, 2014 - 06:56:19 PM&lt;/h3&gt;

&lt;p&gt;I wanted to get this fix upstream. In addition to wanting to give back, I didn’t
want to have to implement this “hack” in my own app.&lt;/p&gt;

&lt;p&gt;Next up the chain was &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt; — the gem I was using to parse RSS feeds.
Ultimately, this code probably belonged in &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; — an HTML sanitization 
gem used by &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt;, but that library seemed to be dormant.&lt;/p&gt;

&lt;p&gt;After a brief discussion with maintainer &lt;a href=&quot;https://github.com/jonallured&quot;&gt;Jon Allured&lt;/a&gt;, we both agreed to 
try to get the fixes into &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt;. If we couldn’t, we would patch it in &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;april-6-2014---060001-pm&quot;&gt;April 6, 2014 - 06:00:01 PM&lt;/h3&gt;

&lt;p&gt;Finally got around to &lt;a href=&quot;https://github.com/flavorjones/loofah/issues/65&quot;&gt;opening an issue&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt;. I proposed that we add
code to deal with the &lt;strong&gt;Evil JSON Characters&lt;/strong&gt; as part of &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt;’s sanitization
process.&lt;/p&gt;

&lt;p&gt;Project maintainer &lt;a href=&quot;https://github.com/flavorjones&quot;&gt;Mike Dalessio&lt;/a&gt; said this fix would be well received 
and pointed me toward the relevant sections of the codebase.&lt;/p&gt;

&lt;h3 id=&quot;april-12-2014---060422-pm&quot;&gt;April 12, 2014 - 06:04:22 PM&lt;/h3&gt;

&lt;p&gt;Deep dive into the &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; codebase to add a new “scrubber”!&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; architecture was interesting; the scrubbers are basically parsers 
that operate on &lt;code class=&quot;highlighter-rouge&quot;&gt;nokogiri&lt;/code&gt; nodes. You can make a top-down or a bottom-up parser 
and you can control when you break out of the tree as you walk the nodes.&lt;/p&gt;

&lt;p&gt;With Mike’s initial direction guiding me, I got a working implementation and 
opened a &lt;a href=&quot;https://github.com/flavorjones/loofah/pull/66&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;april-21-2014---062036-pm&quot;&gt;April 21, 2014 - 06:20:36 PM&lt;/h3&gt;

&lt;p&gt;A friendly ping to Mike and my &lt;a href=&quot;https://github.com/flavorjones/loofah/commit/273e30297d85d81ad170843f2523305816d9f25d&quot;&gt;PR gets merged&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;may-9-2014---064954-pm&quot;&gt;May 9, 2014 - 06:49:54 PM&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; version 2.0.0 is &lt;a href=&quot;https://rubygems.org/gems/loofah/versions&quot;&gt;released&lt;/a&gt; (which includes my fix) and pushed to
RubyGems.&lt;/p&gt;

&lt;p&gt;Now that the fix has been applied upstream, we now have to update gem versions
downstream.&lt;/p&gt;

&lt;h3 id=&quot;may-13-2014---041917-pm&quot;&gt;May 13, 2014 - 04:19:17 PM&lt;/h3&gt;

&lt;p&gt;I open a new &lt;a href=&quot;https://github.com/feedjira/feedjira/pull/223&quot;&gt;PR&lt;/a&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt; to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; version.&lt;/p&gt;

&lt;p&gt;The PR is &lt;a href=&quot;https://github.com/feedjira/feedjira/commit/d382f8ac1ffed29e9215996d03981506da6602dd&quot;&gt;merged&lt;/a&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt; version 1.3.0 is &lt;a href=&quot;https://rubygems.org/gems/feedjira/versions/1.3.0&quot;&gt;released&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;may-14-2014---114435-am&quot;&gt;May 14, 2014 - 11:44:35 AM&lt;/h3&gt;

&lt;p&gt;I can bump the versions of &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; used in Stringer and I
can finally &lt;a href=&quot;https://github.com/swanson/stringer/commit/5102bb6b3a595a764de010c721c59736a6be3295&quot;&gt;replace&lt;/a&gt; the patch with &lt;code class=&quot;highlighter-rouge&quot;&gt;scrub!(:unprintable)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Victory!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So five months later, my two line of code bug fix has made it all the way
upstream and then back again! It may not seem like much, but this is the magic 
of open source.&lt;/p&gt;

&lt;p&gt;This bug originally affected a few users of Stringer, but by sending the 
patch upstream, thousands of people have benefited (&lt;code class=&quot;highlighter-rouge&quot;&gt;loofah&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;feedjira&lt;/code&gt; 
have over 500k combined downloads).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Durable Android REST Clients</title>
   <link href="http://mdswanson.com/blog/2014/04/07/durable-android-rest-clients.html"/>
   <published>2014-04-07T00:00:00+05:30</published>
   <updated>2014-04-07T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/04/07/durable-android-rest-clients</id>
   <content type="html">&lt;p&gt;For something as common as interfacing with a REST API, one would think that
there would be tons of great information about best practices for Android.&lt;/p&gt;

&lt;p&gt;Maybe I’m not looking under the right rocks, because I certainly haven’t found
much. If you stick to the official Android docs, you will be immersed in a world
of components with names like &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncTask&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentProvider&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;BroadcastReceivers&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Loaders&lt;/code&gt;. Are these components still widely-used
outside of Google? Should I trudge through the unfriendly APIs of Android or
look elsewhere?&lt;/p&gt;

&lt;p&gt;If you dig a bit deeper, you may find a mystical link to a
&lt;a href=&quot;https://www.youtube.com/watch?v=xHXn3Kg2IQE&quot;&gt;four-year old Google I/O talk&lt;/a&gt; that represents the “gold-standard”. Is this
approach still relevant? It looks like a lot of code, are their any sample apps
or do I just piece together everything from the PowerPoint slides? Surely the
APIs have changed since 2009, right?&lt;/p&gt;

&lt;p&gt;Head on over to the third-party blogs and tutorials and get ready to try to make
sense of things like “non-UI retained Fragments” and “service binding”. Maybe I
have just not spent enough time immersed in the Android SDK, but I find it
incredibly difficult to understand some of these concepts.&lt;/p&gt;

&lt;p&gt;This post will discuss the first steps of adding durability to your Android REST
clients: moving network requests outside of the Activity lifecycle. As an added
bonus, I find this approach to generate clear, understandable, and testable code
that will not explode if the user &lt;em&gt;gasp&lt;/em&gt; rotates their phone.&lt;/p&gt;

&lt;p&gt;My approach is not perfect and I will highlight areas for improvement at the end
of the post. My views have been heavily influenced by this &lt;a href=&quot;http://birbit.com/a-recipe-for-writing-responsive-rest-clients-on-android/&quot;&gt;enlightening
post&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/yigitboyar&quot;&gt;Yigit Boyar&lt;/a&gt; (Path) and piecing together various chunks
of wisdom from &lt;a href=&quot;https://twitter.com/jakewharton&quot;&gt;Jake Wharton&lt;/a&gt; (Square).&lt;/p&gt;

&lt;p&gt;Let’s get to it!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Rule number one: you should &lt;em&gt;never&lt;/em&gt; be making network requests directly from an
Activity (I will just say Activity from here on out, but everything applies to
Fragments as well). Even using an &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncTask&lt;/code&gt; is asking for trouble; when the
task finally completes, you have to guard against the fact that your host
activity could be gone (rotated, destroyed in the back stack, back pressed). Are
you leaking memory by holding Activity references? Are you sure?&lt;/p&gt;

&lt;p&gt;So many example apps just shovel everything into Activities. It is not uncommon
for an Activity in a tutorial (or even official SDK samples) to have 500-800
lines of code. This is analogous to having a 500-800 line controller in your web
application! This is not good!&lt;/p&gt;

&lt;p&gt;So where should I be making network requests then? My recommendation is in a
plain-old Java object (POJO) that is tied to your &lt;em&gt;Application&lt;/em&gt; lifecycle, not
your Activities.&lt;/p&gt;

&lt;p&gt;If we can come up with an approach that allows a POJO to a) easily make network
calls and handle the responses and b) communicate with our activities without
keeping direct references, then we are in business.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt; (combined with &lt;a href=&quot;https://code.google.com/p/google-gson/&quot;&gt;Gson&lt;/a&gt;) is a joy to use when it comes to
making network calls. For communication with Activities, we can use a library
that implements the data bus pattern (&lt;a href=&quot;http://square.github.io/otto/&quot;&gt;Otto&lt;/a&gt; or &lt;a href=&quot;https://github.com/greenrobot/EventBus&quot;&gt;EventBus&lt;/a&gt; are the
popular options).&lt;/p&gt;

&lt;p&gt;At a high-level, our architecture will look something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; will create POJOs to manage API interaction; I call these
POJOs “Services” (in the &lt;a href=&quot;http://c2.com/cgi/wiki?WhatIsSoa&quot;&gt;Service Oriented Architecture&lt;/a&gt; sense). Regrettably,
this name is overloaded and is already a concept in Android, so use a
different name if you find this too confusing (maybe “Repository” from
&lt;a href=&quot;http://c2.com/cgi/wiki?DomainDrivenDesign&quot;&gt;Domain-driven design&lt;/a&gt; would be better)&lt;/li&gt;
  &lt;li&gt;Activities and Services will register on the bus and use this to communicate&lt;/li&gt;
  &lt;li&gt;When we wish to load data from the API, we will post an event to the bus which
will cause the Service to start the network request&lt;/li&gt;
  &lt;li&gt;When a network request finishes, the Service will post the result back on the
bus for any listening Activity to handle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The devil is in the details, so let’s look at some code for a simple news-reader
app.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoryActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryListAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mListView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;story_activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mListView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;story_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryListAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mListView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;getBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStoriesEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Subscribe&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStoriesLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoriesLoadedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;getBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unregister&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Use some kind of injection, so that we can swap in a mock for tests.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Here we just use simple getter/setter injection for simplicity.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BusProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Everything is pretty standard in &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate&lt;/code&gt;. We setup the view elements and
wire up our list adapter.&lt;/p&gt;

&lt;p&gt;We register/unregister from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bus&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;onResume&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;onPause&lt;/code&gt; — basically
if our activity is in the foreground, we want to be listening for events. This
can (and should) be moved to a base class (along with the getter/setters for
&lt;code class=&quot;highlighter-rouge&quot;&gt;mBus&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We kick off the process in &lt;code class=&quot;highlighter-rouge&quot;&gt;onResume&lt;/code&gt; by posting a &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStoriesEvent&lt;/code&gt; on the
bus. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;StoryService&lt;/code&gt; will be subscribed to this event and kick off the API
calls.&lt;/p&gt;

&lt;p&gt;Our activity then subscribes (with Otto’s &lt;code class=&quot;highlighter-rouge&quot;&gt;@Subscribe&lt;/code&gt; annotation) to a
corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;StoriesLoadedEvent&lt;/code&gt; — which will be posted after the API
call is returned and contain a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Story&lt;/code&gt; objects to display.&lt;/p&gt;

&lt;p&gt;Notice how event-driven our activity is and how simple the methods are.
Testing becomes straight-forward: inject a mock bus and assert that we post the
correct event to the bus when resuming. Call &lt;code class=&quot;highlighter-rouge&quot;&gt;onStoriesLoaded()&lt;/code&gt; directly with
test data and assert we display the correct items.&lt;/p&gt;

&lt;p&gt;Here is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;StoryService&lt;/code&gt; looks like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoryService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryApi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoryApi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mApi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Subscribe&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoadStories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadStoriesEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadStories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoryResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoryResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoriesLoadedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetrofitError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiErrorEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Both dependencies (&lt;code class=&quot;highlighter-rouge&quot;&gt;StoryApi&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Bus&lt;/code&gt;) are injected via the constructor, so we
can easily pass in mocks for testing. We can make use of Mockito’s
ArgumentCaptor (see &lt;a href=&quot;http://www.mdswanson.com/blog/2013/12/16/reliable-android-http-testing-with-retrofit-and-mockito.html&quot;&gt;this post&lt;/a&gt; for more details) to test the asynchronous
callbacks. In fact, this whole class can be tested with regular old jUnit, so
the tests run super fast.&lt;/p&gt;

&lt;p&gt;Our service accepts events from the bus and posts back new events after making
the appropriate API calls. If an activity initiated an API call and then gets
destroyed or backgrounded, we will still post the resulting response event, but
no one will be there to listen.&lt;/p&gt;

&lt;p&gt;For completeness, here is how we connect everything up using a custom
Application class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReaderApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mStoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BusProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mStoryService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mStoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//listen for &quot;global&quot; events&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryApi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoryApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Subscribe&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiErrorEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Something went wrong, please try again.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ReaderApp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So back to our original goal, is this approach more durable?&lt;/p&gt;

&lt;p&gt;Configuration changes (rotation, phone call, etc) will not crash the app. We
don’t have a bunch of defensive programming or null checks sprinkled every
where. We can even swap out the data source without making changes to our
activity. If we want to retrieve data from a database instead, we just need to
make sure to post the &lt;code class=&quot;highlighter-rouge&quot;&gt;StoriesLoadedEvent&lt;/code&gt; event once we retrieve the data. We
even have a more testable and less coupled design in the process!&lt;/p&gt;

&lt;p&gt;Bear in mind that this approach is not the complete solution. We are always
re-querying data whenever our activity is resumed — this is not ideal for
battery life or necessary for data “freshness”. We could address this with
proper use of &lt;code class=&quot;highlighter-rouge&quot;&gt;onSaveInstanceState()&lt;/code&gt; or some state-keeping to determine if a
request is already in-flight.&lt;/p&gt;

&lt;p&gt;We don’t have much resilience against network errors or loss of connection. The
next step for addressing these issues would probably be to introduce a queue/job
manager to handle retries and perserving user input.&lt;/p&gt;

&lt;p&gt;We still aren’t fully satisfying the “gold standard” from the Google I/O talk.
We will probably want to introduce local storage using SQLite and use this for
querying the data (while updating the underlying database in the background).
This provides a better user experience because we can update the UI immediately.&lt;/p&gt;

&lt;p&gt;There is a lot of work required to create a truly robust REST client on Android
(or any mobile platform for that matter). Moving your network operations out
of the activity lifecycle using the approach outlined above is a good first step
down this path.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’d love to hear your thoughts, criticisms, or suggestions; get in touch with me
on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>One Day Further</title>
   <link href="http://mdswanson.com/blog/2014/03/31/one-day-further.html"/>
   <published>2014-03-31T00:00:00+05:30</published>
   <updated>2014-03-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/03/31/one-day-further</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;I can’t blog/share/talk about that, I’m not an expert!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hear comments along this line regularly. Sometimes from new developers,
but also, surprisingly, from seasoned veterans.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;Impostor Syndrome&lt;/a&gt; is in full force — people just don’t seem to
think they can add value by sharing what they know about a topic.&lt;/p&gt;

&lt;p&gt;Here’s a little secret: You don’t have to be an expert to provide value,
you just need to be &lt;strong&gt;one day further&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is always someone who knows less than you and is in the exact same
position you were a week ago. Write for them.&lt;/p&gt;

&lt;p&gt;If you’ve spent an afternoon figuring out the basics of a framework and you can
distill it down to a 20 minute talk, you have saved someone 4 hours. Speak for
them.&lt;/p&gt;

&lt;p&gt;Your 10 years of software experience might not seem remarkable or noteworthy,
but you have countless lessons to teach someone just starting in the industry.
Share for them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first time you break through this mental barrier is the hardest. The good
part is that you can acquire the requisite knowledge in just one day.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Observations and Practices of a Tech Lead</title>
   <link href="http://mdswanson.com/blog/2014/03/15/tech-lead.html"/>
   <published>2014-03-15T00:00:00+05:30</published>
   <updated>2014-03-15T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/03/15/tech-lead</id>
   <content type="html">&lt;p&gt;I’ve been the “tech lead” for my team at work recently. It is a new role for me
and I’ve had my shares of struggles and successes in the past six months.&lt;/p&gt;

&lt;p&gt;We had a brownbag discussion a couple weeks ago about the responsibilities of
tech leads and I wanted to share some of my observations and practices. For
context, my current project has four full-time developers (including myself) and
two part-time UX/designers.&lt;/p&gt;

&lt;p&gt;So what kind of things do I do as a tech lead?&lt;/p&gt;

&lt;h2 id=&quot;legwork&quot;&gt;Legwork&lt;/h2&gt;

&lt;p&gt;Legwork is what I traditionally think of as “tech lead stuff”. You will be
breaking down features into tasks, planning the high level architecture, getting
your test environment setup, evaluating libraries and tools, etc.&lt;/p&gt;

&lt;p&gt;I’ve found it valuable to focus less on the specifics and more on the strategy.
For my current project, our testing strategy boiled down to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unit test when it provides value. Integration test the happy path. Always use your judgement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A strategy allows the team to rally behind shared values, instead of saying
“that’s just how our testing was setup when we started”.&lt;/p&gt;

&lt;p&gt;Notice that I said &lt;em&gt;strategy&lt;/em&gt; and not &lt;em&gt;rules&lt;/em&gt;. Rules are inflexible and can come
across as “my way or the highway”. A strategy is open for discussion when it
comes down to the implementation. These are the discussions that I want to have
with my team.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;story-scout&quot;&gt;Story Scout&lt;/h2&gt;

&lt;p&gt;The tech lead should play the role of the &lt;strong&gt;Story Scout&lt;/strong&gt;. This means constantly
scouting out upcoming work for the team: looking for technical roadblocks, doing
spikes for unknown functionality or libraries, making sure all the UI/UX work is
in place.&lt;/p&gt;

&lt;p&gt;Spending a few hours every iteration on scouting can reduce the number of
blockers once work reaches active development. When work can easily flow through
the development process, the team is generally happier and more productive.&lt;/p&gt;

&lt;p&gt;It’s important to share your findings with the team: a “scouting report” if you
want to keep up the metaphor. If you had to pick a non-obvious solution because
of a strange requirement or technical reason, explain your rationale to the
team. You should be ready to back up your choices with solid reasons so the
team can trust that you did your due diligence and get on-board.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;codebase-presence&quot;&gt;Codebase Presence&lt;/h2&gt;

&lt;p&gt;I find it hard to play the tech lead role without actively working in the
codebase. A tech lead that isn’t committing code is a smell to me; it reminds me
of Astronaut Architects that are completely disconnected from the day-to-day
development.&lt;/p&gt;

&lt;p&gt;I like to think of my development role as a builder of internal libraries for
the rest of the team. To build an effective library, you need to be in tune with
how the consumers (i.e. the rest of the team) will use it. Handing the team a
UML diagram of “the new architecture” and then scurrying off to my desk is not
the way to go.&lt;/p&gt;

&lt;p&gt;I try to spend the rest of my time sharing knowledge. While pairing is the best
way I’ve found to disseminate knowledge, I also try to write &lt;a href=&quot;http://en.wikipedia.org/wiki/Master_recording&quot;&gt;Golden Master&lt;/a&gt;
code when working alone. A shining example can be a great guide and help teach
standards and common practices when pairing is not an option.&lt;/p&gt;

&lt;p&gt;A tech lead should be the voice of feasibility in  &lt;a href=&quot;http://www.svproduct.com/the-architect-role/&quot;&gt;“valuable,
usable, feasible”&lt;/a&gt; product discussions. Having a deep understanding of the
state of the codebase is crucial in know what may or may not be feasible under
your project’s constraints.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What strategies do you use to balance letting the team learn autonomously versus
pushing them aside and writing (or rewriting) all the code yourself?&lt;/p&gt;

&lt;p&gt;How does the role of tech lead fit into your projects?&lt;/p&gt;

&lt;p&gt;I’d love to hear your thoughts on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Integration Testing against REST APIs in Android</title>
   <link href="http://mdswanson.com/blog/2014/02/24/integration-testing-rest-apis-for-android.html"/>
   <published>2014-02-24T00:00:00+05:30</published>
   <updated>2014-02-24T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/02/24/integration-testing-rest-apis-for-android</id>
   <content type="html">&lt;p&gt;In my last post on Android testing, I talked about how to &lt;a href=&quot;http://mdswanson.com/blog/2013/12/16/reliable-android-http-testing-with-retrofit-and-mockito.html&quot;&gt;reliably test API
calls&lt;/a&gt; with Mockito’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentCaptor&lt;/code&gt;. But that approach was best suited
for unit tests — what about integration tests?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(This post assumes you use &lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;Retrofit&lt;/a&gt; to handle API calls)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The most straightforward way to do integration testing in Android is to use the
built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;InstrumentationTestCase&lt;/code&gt; classes. At a high-level, you create a second
APK that will “drive” your app under test by programmatically sending commands
(key presses, button clicks, etc). If you come from a web development
background, this is similar to how tools like Selenium work.&lt;/p&gt;

&lt;p&gt;One of the common complaints with this kind of blackbox, end-to-end integration
testing is that the tests are flaky. They will fail for no reason and talking to
external APIs only adds more ways to intermittently fail. Tests that fail
randomly are tests that you cannot trust; tests that you cannot trust are a
liability.&lt;/p&gt;

&lt;p&gt;After some &lt;a href=&quot;https://twitter.com/_swanson/status/437703758139506688&quot;&gt;discussions&lt;/a&gt; with &lt;a href=&quot;https://twitter.com/JakeWharton&quot;&gt;Jake Wharton&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/yogurtearl&quot;&gt;Michael Bailey&lt;/a&gt;, I
wanted to summarize approaches that will improve the reliability of your Android
integration tests.&lt;/p&gt;

&lt;h2 id=&quot;setup-a-test-server&quot;&gt;Setup a test server&lt;/h2&gt;

&lt;p&gt;The first approach that you might think of is to stand up a fake server
somewhere that your tests can run against. In your test suite, simply point the
app to your test URL. This is probably not a good long-term solution; I did this
on a project once, but it was just an echo server.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very little code changes to your app&lt;/li&gt;
  &lt;li&gt;Can share the test server across platforms (iOS, web, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Another moving piece that can intermittently fail&lt;/li&gt;
  &lt;li&gt;Requires some expertise outside of the Android domain to deploy the server and keep it updated&lt;/li&gt;
  &lt;li&gt;Difficult to trigger error/edge cases&lt;/li&gt;
  &lt;li&gt;Slow test execution (still making HTTP calls)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; It’s not a great option, but certainly better than running tests
against a production API (don’t do that!!). Probably the least amount of
up-front work of any of these, but has the most chance to increase flakiness.&lt;/p&gt;

&lt;h2 id=&quot;mock-the-retrofit-interface&quot;&gt;Mock the Retrofit Interface&lt;/h2&gt;

&lt;p&gt;This approach creates a boundary before the HTTP level; you take the stance that
you trust the test suites of Gson, Retrofit, etc to work and then just mock out
the data. You can see an &lt;a href=&quot;https://github.com/square/retrofit/blob/master/samples/mock-github-client/src/main/java/com/example/retrofit/GitHubClient.java&quot;&gt;example of this&lt;/a&gt; in the sample application that
comes with Retrofit. A &lt;code class=&quot;highlighter-rouge&quot;&gt;MockGitHub&lt;/code&gt; returns canned data, bypassing any network
operations or serialization.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very robust; will not fail because of a flaky network, timeout, etc&lt;/li&gt;
  &lt;li&gt;Easy to trigger test error/edge cases&lt;/li&gt;
  &lt;li&gt;Can control the server state if you need to dynamically update (e.g. I delete an 
item and don’t want it to show up if I ask for the list of items again)&lt;/li&gt;
  &lt;li&gt;Write dummy data in pure Java; could be re-used for unit tests via factories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Still mocking out some parts of the app, so not a &lt;em&gt;true&lt;/em&gt; integration test&lt;/li&gt;
  &lt;li&gt;Doesn’t exercise Gson serialization (could use unit tests for this)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; A solid approach with no external moving parts. Doesn’t allow
for blackbox integration testing, but gets you pretty close for not much
effort. I’d say this fits the &lt;a href=&quot;http://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;80/20 rule&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-wiremock&quot;&gt;Use WireMock&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://wiremock.org/&quot;&gt;WireMock&lt;/a&gt; allows you to mock web requests and return data either
programmatically or from a file on disk. You can also set headers, status codes,
and anything else you’d need. WireMock can also record requests from a live
server and save them for future runs.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Robust; again no failures from network down/timeouts&lt;/li&gt;
  &lt;li&gt;Easy to test error/edge cases&lt;/li&gt;
  &lt;li&gt;Exercises the serialization/HTTP layers of the app&lt;/li&gt;
  &lt;li&gt;Could re-use JSON files across platforms (iOS, web, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Another moving piece that could fail&lt;/li&gt;
  &lt;li&gt;Powerful features, but more complex and requires some changes to your test code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; Definitely the most flexible and feature-rich approach. A small investment in
learning the tool will probably pay off in time savings down the road. WireMock
reminds me alot of Ruby’s &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VCR&lt;/code&gt;&lt;/a&gt; gem and I will probably use it for the
next Android project I start.&lt;/p&gt;

&lt;h2 id=&quot;custom-retrofit-client&quot;&gt;Custom Retrofit Client&lt;/h2&gt;

&lt;p&gt;The approach I settled on for my current work project was to write a small
&lt;a href=&quot;https://gist.github.com/swanson/7dee3f3474e30fe8f15c&quot;&gt;Retrofit &lt;code class=&quot;highlighter-rouge&quot;&gt;Client&lt;/code&gt;&lt;/a&gt; that converts the HTTP verb and URL into a filename and
then reads the appropriate static JSON files from the &lt;code class=&quot;highlighter-rouge&quot;&gt;res/raw&lt;/code&gt; folder of the
instrumentation application.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No flaky network/timeout failures&lt;/li&gt;
  &lt;li&gt;Easy to trigger test error/edge cases&lt;/li&gt;
  &lt;li&gt;No extra moving pieces&lt;/li&gt;
  &lt;li&gt;Exercises the serialization/HTTP layers of the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Works best for static responses (hard to keep server state)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; I think this approach can work if you have mainly static JSON responses or don’t
want to introduce another dependency into your project. It doesn’t cover every
edge case — but for us it was an adequate solution.&lt;/p&gt;

&lt;p&gt;For this particular project, we were interacting with a legacy API that had some
quirks that required a fair amount of Gson customizations (multiple date
formats, lots of &lt;code class=&quot;highlighter-rouge&quot;&gt;@SerializedName&lt;/code&gt;, strange null vs empty behavior) so we felt
much better running the tests through the serialization layer.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You can’t go wrong with any of the latter three approaches (I would recommend
not going down the test server path if possible).&lt;/p&gt;

&lt;p&gt;If you don’t care about having a true blackbox test, go with the Retrofit
interface mock. If you want something close to a real server, but still want
fine control, give WireMock a shot. If you just need something basic, I think
it’s hard to beat my 100-line Retrofit client and a folder of &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;The approach you choose isn’t important, pick the one that works best for your
project and team. Instrumentation tests can provide a lot of value and reduce
the burden for manual testing, so investing time to create a reliable test suite
will pay off in the end.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>My Year in Review: 2013</title>
   <link href="http://mdswanson.com/blog/2014/02/10/my-year-in-review-2013.html"/>
   <published>2014-02-10T00:00:00+05:30</published>
   <updated>2014-02-10T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2014/02/10/my-year-in-review-2013</id>
   <content type="html">&lt;p&gt;I’ve done a yearly writeup for the past two years. I always struggle to
reflect and look back on what I’ve done, so writing this post is almost
therapeutic. It’s the middle of February, but hey, better late than never.&lt;/p&gt;

&lt;h1 id=&quot;work-projects&quot;&gt;Work Projects&lt;/h1&gt;

&lt;p&gt;I started 2013 working on an embedded wireless lock system 
for a security company. I am hopelessly out of my comfort zone when it comes
to embedded C or hardware, so luckily I was mainly working on a Ruby web app
that ran on Linux on a microcontroller. You know those Linksys configuration
pages where you go to forward ports and stuff? Basically, I built that but for
technicians to setup wireless security systems.&lt;/p&gt;

&lt;p&gt;It was a difficult project with a tight deadline, but it was neat to work on
a physical product that you can actually go buy in a store. The team was large
(around 15 developers at the peak) so there were struggles with planning and
coordinating, but overall, the team has pleasant to work with and came together
to get the product shipped.&lt;/p&gt;

&lt;p&gt;I continued working with &lt;a href=&quot;https://twitter.com/mumau&quot;&gt;Mike&lt;/a&gt; on &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt;, building new features and doing
support for our [slowly] expanding base of users. One of the biggest
issues we have is answering the question of “what do I do with this data?” so
I spent some time writing some general “tips” and making them show up when a
team isn’t doing great.&lt;/p&gt;

&lt;p&gt;Mike and I both struggled with momentum on MoraleApp; we both have other duties so
it makes it tough to try to build a product at the same time. And when we did
manage to get a bit of bandwidth, we struggled with figuring out what to do next.
MoraleApp has been our own little crash course in product development.&lt;/p&gt;

&lt;p&gt;I sound down on MoraleApp, but it is still chugging along with
minimal support needed. We’ve signed up over 100 companies and have logged over
70,000 daily moods — still pretty amazing to me since I built Version 1 in
one weekend.&lt;/p&gt;

&lt;p&gt;I filled the rest of my year was odds and ends: helping upgrade a legacy
Rails app (on a weird stack of jRuby and IIS…), doing a few estimates for
mobile work, and a full fledged story mapping and discovery session for a web
app.&lt;/p&gt;

&lt;p&gt;The summer months brought an influx of new employees — both new hires
fresh out of school and this year’s crop of interns. It’s great to see some
new faces, but sometimes hard to find projects for everyone to work on. I
noticed a couple new engineers had been left to fend for themselves doing
maintenance on an internal tool. Several years ago, the company built an app
called “Corporate Resume” that tracks all the projects SEP has done, what
technologies were used, who worked on them, etc; it comes in handy for
marketing and business development.&lt;/p&gt;

&lt;p&gt;I ended up joining two newbies and we gutted the aging project; bringing in
some newer technologies and making sure that the new app would not easily fall
into disrepair. The old project had lots of baggage so we re-branded the project
as “Chops” — a tool for tracking the development chops of the company.&lt;/p&gt;

&lt;p&gt;I think the jury is still out on adoption of the tool among the engineers, but 
the project was fun and a great way for me to introduce SEP engineering culture
to a pair of bright, new developers.&lt;/p&gt;

&lt;p&gt;As fall rolled around, I finally found some billable work — building an
Android app for a local credit union. It had been almost 2 years since I last
did Android, but I was excited to dive back in — especially after seeing the
improvements to the developer ecosystem (mainly testing, yah!).&lt;/p&gt;

&lt;p&gt;This is (the project is still ongoing) my first project as a Tech Lead 
— meaning that I was in charge of picking tools for the team, doing 
system architecture type stuff, and generally trying to help the team build 
awesome software. It’s been a challenge to try to clear paths and build
scaffolding so that the other team members can be more productive, but it’s been
fun to be able to have a large say in how our code base grows.&lt;/p&gt;

&lt;p&gt;I’m really pleased with our current testing setup. We’ve got a full suite of
unit tests and then a nifty setup where we can run automated tests on seven
different devices on every commit. Compared to my last Android project (with
two full time testers running hundred page test plans), our approach is miles
ahead and has made working with Android much more enjoyable.&lt;/p&gt;

&lt;h1 id=&quot;side-projects&quot;&gt;Side Projects&lt;/h1&gt;

&lt;h3 id=&quot;stringer-an-anti-social-rss-reader&quot;&gt;Stringer, an anti-social RSS reader&lt;/h3&gt;
&lt;p&gt;In March, I wrote my own RSS reader with Ruby and Sinatra because Google Reader
was shutting down. I didn’t like any of the other solutions and wanted something
I could just spin up on Heroku; apparently so did a bunch of other people. With
over two thousand stars on Github, contributions from over 60 people, and being
translated to 15 languages, Stringer has been my most successful open source
project to date.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/swanson/stringer/raw/master/screenshots/instructions.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;Stringer&lt;/a&gt; is mostly in maintenance mode now. It does what I want it to and
works for most people’s needs. I brought on a contributer to help maintain the
project and I still get a few issues/pull requests a month.&lt;/p&gt;

&lt;h3 id=&quot;capuchin-jekyll-for-mailchimp-newsletters&quot;&gt;Capuchin, Jekyll for Mailchimp newsletters&lt;/h3&gt;
&lt;p&gt;I wrote a ton of newsletters this year (more on that later) and as much as I
love Mailchimp, I really hate their WYSIWYG editor. I write in Markdown, dammit!
None of this rich text crap!&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&quot;https://github.com/swanson/capuchin&quot;&gt;simple gem&lt;/a&gt; that mimics Jekyll (my blogging tool of choice) and allows
me to write content in Markdown and then creates the newsletter via the Mailchimp
API. It is especially helpful for text-heavy posts.&lt;/p&gt;

&lt;p&gt;This was my first gem that I published on Rubygems.org and it was a good learning 
experience. I hadn’t built many command line tools before so it was interesting 
to dive into the source code of other tools and see how they do things.&lt;/p&gt;

&lt;h3 id=&quot;gem-license-checker-insert-gemfile--output-list-of-license&quot;&gt;Gem License Checker, insert Gemfile =&amp;gt; output list of license&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/swanson/gem-license-checker&quot;&gt;Gem License Checker&lt;/a&gt; was kind of a dud. I built it during one of the SEP Startup 
Weekend events because we had a very small need for it on a work project. Ultimately, it
wasn’t super useful and didn’t get much use. Oh well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EqHftgT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;triplico-share-youtube-videos-with-small-groups&quot;&gt;Triplico, share YouTube videos with small groups&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/swanson/triplico&quot;&gt;Triplico&lt;/a&gt; was &lt;em&gt;definitely&lt;/em&gt; a dud. I got a case of the weekend hack madness
and decided to solve the very important problem of how to share YouTube videos
with my siblings. I had been pasting lots of videos into IM conversations
and text messages and thought “THEY HAS TO BE A BETTER WAY!”. And then I started
thinking about how arbitrary limitations affect product design (140 characters
on Twitter, 6 seconds on Vine, etc) so I built an app that lets you share videos,
but only with two other people.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/swanson/triplico/master/app/public/img/demo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was a big flop, I didn’t even use it once after it was built!&lt;/p&gt;

&lt;h3 id=&quot;lagom-a-blog-theme-with-just-the-right-amount-of-style&quot;&gt;Lagom, a blog theme with just the right amount of style&lt;/h3&gt;
&lt;p&gt;I extracted &lt;a href=&quot;https://github.com/swanson/lagom&quot;&gt;the theme&lt;/a&gt; from my Jekyll blog (the one you are reading right now),
gave it a cool Swedish name, and put it on &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes.org&lt;/a&gt; for others to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CT2Xvug.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s gotten around 50 stars and 70 forks and I’ve seen a few blogs in the wild
that are using it, so that’s cool. I’m happy to give back after ripping off of
Tom Preston-Werner’s theme for so long. I really wish Jekyll had a better standard
for themes, I’d probably release a few more if it was a bit easier.&lt;/p&gt;

&lt;h3 id=&quot;greyhouse-online-store&quot;&gt;Greyhouse Online Store&lt;/h3&gt;
&lt;p&gt;I helped build an &lt;a href=&quot;http://greyhousecoffee.com/&quot;&gt;online store&lt;/a&gt; for a coffee shop at my alma mater with a &lt;a href=&quot;https://twitter.com/kyleashipley&quot;&gt;friend&lt;/a&gt;. It
originally started as a Rails rescue project, but we ended up just using Shopify
with a bunch of custom Liquid templates.&lt;/p&gt;

&lt;h3 id=&quot;freedom-registry&quot;&gt;Freedom Registry&lt;/h3&gt;
&lt;p&gt;Another small freelance project I helped out with; this one involved building out
some user profile features in a Rails app that helps 
&lt;a href=&quot;http://freedomcollaborative.org/&quot;&gt;anti-human trafficking organizations share resources&lt;/a&gt;. It was interesting working in a 
remote, asynchronous style (I worked in the evenings, the rest of the team during the day).&lt;/p&gt;

&lt;h1 id=&quot;writing&quot;&gt;Writing&lt;/h1&gt;

&lt;p&gt;Things kept chugging along on this blog. I wrote 37 posts in 2013, more than 2011
and 2012 combined. I wrote almost weekly from May to September. Page views were up
33% over last year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/2013-blog-stats.png&quot; alt=&quot;2013 Blog Stats&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The top three posts in terms of views:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/blog/2013/01/20/worst-bug-ever.html&quot;&gt;Worst. Bug. Ever.&lt;/a&gt; (44,624)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/blog/2013/08/11/write-things-tell-people.html&quot;&gt;Do things, write about it&lt;/a&gt; (35,822)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/blog/2013/10/14/how-not-to-validate-email-addresses.html&quot;&gt;How not to validate email addresses&lt;/a&gt; (13,779)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My three favorite posts I wrote:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/blog/2013/08/11/write-things-tell-people.html&quot;&gt;Do things, write about it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/blog/2013/05/29/the-30-second-standup.html&quot;&gt;The 30 Second Standup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/blog/2013/05/02/expanding-contracting.html&quot;&gt;Expanding and Contracting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started writing two newsletters in 2013: a monthly newsletter under the &lt;a href=&quot;http://indyhackers.org/&quot;&gt;Indy Hackers&lt;/a&gt;
branding and a (now-defunct) weekly newsletter about building awesome software.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://us6.campaign-archive2.com/home/?u=244b5370d41b5cf4146ec517c&amp;amp;id=b51f983563&quot;&gt;Hacks &amp;amp;&amp;amp; Happenings&lt;/a&gt; is a monthly newsletter that features projects, meetups, and blog
posts related to developers in Indiana. I co-run this with my good buddy &lt;a href=&quot;https://twitter.com/mileszs&quot;&gt;Miles&lt;/a&gt;; he
helps me collect links and I do the monthly writeup. That list is up to 130 readers,
with a 65% open-rate and is going strong.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://us5.campaign-archive1.com/home/?u=42197992359c6140b24ce0046&amp;amp;id=ee7084f978&quot;&gt;Building Awesome Software&lt;/a&gt; was a weekly newsletter that I started in Septemeber. I wrote
9 issues on software topics that were interesting to me; a bit of UX, a bit of testing,
a bit of ranting. I was heavily inspired by &lt;a href=&quot;http://nickd.org/&quot;&gt;Nick Diasboto’s weekly newsletter&lt;/a&gt;, but 
ultimately I ran out of steam (and topics) and haven’t posted to the list since November.
It was an interesting experience in trying to build an audience from zero (I got it up
to 150 pretty quickly).&lt;/p&gt;

&lt;p&gt;I really like writing, but my desire to write comes in spurts (part of the reason why this
yearly writeup is 2 months late…) so it’s been a bit of a personal quest to figure out
how to best harness my enthusiasm.&lt;/p&gt;

&lt;h1 id=&quot;random-highlights&quot;&gt;Random Highlights&lt;/h1&gt;

&lt;p&gt;I started a &lt;a href=&quot;http://itttl.org/&quot;&gt;table tennis league&lt;/a&gt; for local tech companies. So far, we’ve played two other
companies in a home-and-home series and are 1-1 overall. Table tennis has become my go-to
“I need a quick break” activity and it’s been funny to see people at work start getting
serious and buying their own gear.&lt;/p&gt;

&lt;p&gt;I attended &lt;a href=&quot;http://scna.softwarecraftsmanship.org/&quot;&gt;SCNA&lt;/a&gt; for the second year in a row; it was a great event again. This time I got
to go on the company dime and do a bit of business development (which for developers just
means talking to other developers). We ended up taking a small group up so there was plenty of 
interesting discussions and a built-in social group to hang out with. I high-fived 
&lt;a href=&quot;https://twitter.com/garybernhardt&quot;&gt;Gary Bernhardt&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/kytrinyx&quot;&gt;Katrina Owen&lt;/a&gt;, so my life is only going to go downhill from here.&lt;/p&gt;

&lt;p&gt;I deleted my [dormant] Facebook account and started sending a quarterly email update to the
handful of people I still wanted to keep in touch with. I really like writing emails apparently.&lt;/p&gt;

&lt;p&gt;I got promoted over the summer; I was very fortunate to have a wide variety of projects in my 
time at SEP thus far and to learn from some great people. My career has followed a simple 
loop: seek out opportunities, demonstrate competence, reflect, improve, and be rewarded with 
more opportunities.&lt;/p&gt;

&lt;h1 id=&quot;new-year-new-ideas&quot;&gt;New year, new ideas&lt;/h1&gt;

&lt;p&gt;The most interesting new ideas I came across in the past year — and ones I hope
to incorporate more into my life:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alfiekohn.org/books/pbr.htm&quot;&gt;Punished by Rewards&lt;/a&gt;: Rewards harm intrinsic motivation, our workplace culture
is full of shallow “reward schemes” that ultimately fail when external rewards are removed. Finding 
out why people are not intrinsically motivated is way harder, but much better in the long run.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://calnewport.com/books/so-good/&quot;&gt;So Good They Can’t Ignore You&lt;/a&gt;: Stop feeling bad because you haven’t “found your passion”. Focus
on getting better and great work will follow. Satisfaction with work comes from autonomy and skill,
not free lunches and beanbag chairs.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dilbert.com/blog/entry/goals_vs_systems/&quot;&gt;System thinking over goals&lt;/a&gt;: Setting goals is for suckers. They make you feel bad until you
hit the goal (or fail and feel worse) and then you lose purpose. After accidentally using systems
thinking in 2012 and getting away from it in 2013, I am fully back on board for systems in 2014.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jobstobedone.org/&quot;&gt;Jobs-to-be-Done&lt;/a&gt;: The “milkshake phenomenon” is incredibly interesting to me. Probably because it’s
a classic “Turns out…” reveal, but I think this concept has legs. Not sure how, but I’d like to
try out some of the approaches in JTBD this year.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Inspiration from outside software: two non-technical disciplines really captured my
attention. The first was a &lt;a href=&quot;http://mdswanson.com/blog/2013/11/11/how-buildings-learn-and-why-software-is-no-different.html&quot;&gt;great mini-series&lt;/a&gt; about the process of designing buildings and how 
they grow and change through usage. The second was a talk about &lt;a href=&quot;http://www.youtube.com/watch?v=ShEez0JkOFw&quot;&gt;hand tool woodworking&lt;/a&gt; (okay, 
this was from 2014 so I’m cheating…). There was something so visceral and tangible about physical
buildings and furniture that interests me. Not sure where that interest might go, but excited to see.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;

&lt;p&gt;Do things that &lt;a href=&quot;http://www.codusoperandi.com/posts/increasing-your-luck-surface-area&quot;&gt;increase your luck surface area&lt;/a&gt;. But don’t take yourself &lt;a href=&quot;http://i.imgur.com/7OxwL.gif&quot;&gt;too seriously&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Reliable API testing for Android with Retrofit and Mockito</title>
   <link href="http://mdswanson.com/blog/2013/12/16/reliable-android-http-testing-with-retrofit-and-mockito.html"/>
   <published>2013-12-16T00:00:00+05:30</published>
   <updated>2013-12-16T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/12/16/reliable-android-http-testing-with-retrofit-and-mockito</id>
   <content type="html">&lt;p&gt;Testing HTTP calls that interact with an API have always been a tricky beast.
Hitting a real web server comes with a host of issues: brittle tests (test
fail because your internet or the API is down), slow tests (HTTP calls can
take several seconds each), and incomplete tests (“How do I trigger a rate
limit exceeded case? Guess I’ll just hope it works…”).&lt;/p&gt;

&lt;p&gt;The issue is complicated further in a platform like Android, where HTTP calls
should be asynchronous. Now you add timing into the mix and you are probably
ready to throw in the towel on testing your API calls.&lt;/p&gt;

&lt;p&gt;A great way to solve these issues and reliably exercise these HTTP calls is
to use a nifty utility in &lt;a href=&quot;https://code.google.com/p/mockito/&quot;&gt;Mockito&lt;/a&gt; (a test double library for Java): 
&lt;a href=&quot;http://docs.mockito.googlecode.com/hg/org/mockito/ArgumentCaptor.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentCaptor&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentCaptor&lt;/code&gt; is kind of a hybrid test double; it is a little like a stub,
a little like a spy, but not quite either one. You use an argument captor to —
unsurprisingly — capture and store the arguments passed to a mock/stub.
The real win here is the ability to call methods on the captured argument, which
works great for something like &lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Retrofit’s callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With Retrofit, we make an API call and provide a callback. The library will
run the callback, passing in the response data when the server responds.&lt;/p&gt;

&lt;p&gt;Let’s say we have some code to query the &lt;a href=&quot;http://developer.github.com/v3/repos/#list-user-repositories&quot;&gt;GitHub API&lt;/a&gt; for a user’s repositories.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;getApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;swanson&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;displaySadMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRepositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetrofitError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofitError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;displayErrorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are three cases we want to test: the happy path (we got some repos and
pass them to our adapter), the error path (there was some server error, toast
a message to the user), and a special case (the user has no repos, toast a 
message to the user).&lt;/p&gt;

&lt;p&gt;The second and third cases will be tricky to test if you are relying on hitting
a real API server. I know GitHub has had some DDOS issues lately, but you certainly
can’t rely on that to test your error cases!&lt;/p&gt;

&lt;p&gt;But with an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentCaptor&lt;/code&gt;, we can grab the callback argument and then we have
full control of what data we send in.&lt;/p&gt;

&lt;p&gt;Let’s look at testing the happy path (I am using &lt;a href=&quot;http://robolectric.org/&quot;&gt;Robolectric&lt;/a&gt; and you should
be too!).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRepos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;testRepos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rails&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dhh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;testRepos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testRepos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getListAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our captor (&lt;code class=&quot;highlighter-rouge&quot;&gt;cb&lt;/code&gt;) captures the callback and then, after calling &lt;code class=&quot;highlighter-rouge&quot;&gt;getValue()&lt;/code&gt;, we
can call the &lt;code class=&quot;highlighter-rouge&quot;&gt;success&lt;/code&gt; method and pass it some dummy objects.&lt;/p&gt;

&lt;p&gt;You might have an “Aha!” moment now, but if not, that’s okay. Let’s look at
testing the error path.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            
&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShadowToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTextOfLatestToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same as before — we capture the callback. But this time we call the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;failure&lt;/code&gt; method, which simulates an API error. If we need more discrete error
handling (e.g. if the response is HTTP 401, redirect to login; if HTTP 500, 
toast a general system error message), we can easily create the appropriate
&lt;code class=&quot;highlighter-rouge&quot;&gt;RetrofitError&lt;/code&gt; objects and pass them in.&lt;/p&gt;

&lt;p&gt;The power of &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentCaptor&lt;/code&gt; really shines through here. We have complete
control of the object we’ve captured. We can feed it any data or trigger any 
error conditions we want.&lt;/p&gt;

&lt;p&gt;For prosperity, let’s test the special case.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noRepos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noRepos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShadowToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTextOfLatestToast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No repos :(&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getListAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(You can find the full source of these examples and a full sample app on 
&lt;a href=&quot;https://github.com/swanson/retrofit-demo/blob/master/Octodroid/test/com/swanson/octodroid/test/MainActivityTest.java&quot;&gt;GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;One special detail to note, if you use the Mockito annotation when declaring
the captor,&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Captor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArgumentCaptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Make sure that somewhere in your setup, you do:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MockitoAnnotations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initMocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;This approach to testing hits all the marks in my book: fast, robust, and easy
to work with. It has allowed us to easily test rare edge cases (session timeout,
server down for maintenance, extraordinary values) in my current project and
achieve a high level of confidence that our app is working.&lt;/p&gt;

&lt;p&gt;While this example is specific to a certain stack (Android, Robolectric,
Retrofit, Mockito), a similar approach can be applied to nearly any application.&lt;/p&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Responsive Layouts in Android without Copy/Paste</title>
   <link href="http://mdswanson.com/blog/2013/12/11/responsive-layouts-in-android.html"/>
   <published>2013-12-11T00:00:00+05:30</published>
   <updated>2013-12-11T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/12/11/responsive-layouts-in-android</id>
   <content type="html">&lt;p&gt;I’m working on an Android app that targets both phones and tablets so I’ve been
digging into how to build layouts that work across all device sizes.&lt;/p&gt;

&lt;p&gt;I have some experience with responsive design on the web — things like
fluid grids, media queries, etc — so I wanted to try to leverage those
same approaches for Android.&lt;/p&gt;

&lt;p&gt;My biggest goal was to create a layout that can scale up without having
completely separate layouts for each screen size. Android uses 
&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html#DeclaringTabletLayouts&quot;&gt;configuration qualifiers&lt;/a&gt; to load up the right resources based on your screen
size or orientation (portrait or landscape).&lt;/p&gt;

&lt;p&gt;Instead of tweaking individual layouts per device, I’ve found that it is much
easier to just overload a &lt;code class=&quot;highlighter-rouge&quot;&gt;styles.xml&lt;/code&gt; file for changes between sizes.&lt;/p&gt;

&lt;p&gt;If you think of it like CSS, you will have your base styles in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;values/styles.xml&lt;/code&gt; file and then define media query-like customizations in
&lt;code class=&quot;highlighter-rouge&quot;&gt;values-sw600dp/styles.xml&lt;/code&gt; (7” tablets), &lt;code class=&quot;highlighter-rouge&quot;&gt;values-sw600dp-land/styles.xml&lt;/code&gt; 
(7” tablets in landscape), &lt;code class=&quot;highlighter-rouge&quot;&gt;values-sw720dp/styles.xml&lt;/code&gt; (10” tablets), etc.&lt;/p&gt;

&lt;p&gt;In a typical CSS responsive grid system you might have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt; class
that is 960px wide (with auto-margins) on desktop screens. On a phone, you would
make the &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt; have 100% width (with no margins).&lt;/p&gt;

&lt;p&gt;We can take the same approach using Android styles. First, setup a base style.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;res/values/styles.xml
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_margin&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:padding&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;16dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;match_parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_height&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;match_parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:orientation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;vertical&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@drawable/container_background&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For tablets in portrait orientation, we add a bit more padding since the 
screen is larger.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;res/values-sw600dp/styles.xml
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_margin&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:padding&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;32dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;match_parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_height&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;match_parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:orientation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;vertical&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@drawable/container_background&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The big change is on tablets in landscape orientation. We add layout margins
so that the content doesn’t stretch the full width of the screen. We can add
a different background drawable to the parent view (like a &lt;a href=&quot;http://mdswanson.com/blog/2012/01/30/repeating-background-textures-in-android.html&quot;&gt;subtle pattern&lt;/a&gt;)
to fill the whitespace.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;res/values-sw600dp-land/styles.xml
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_marginRight&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;130dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_marginLeft&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;130dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:padding&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;32dp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;match_parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:layout_height&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;match_parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:orientation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;vertical&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@drawable/container_background&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then on our various application screens, we use our style like so:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/Container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ... buttons, edit texts, text views, etc ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A single application layout for all screens that scales up (and down)
gracefully.&lt;/p&gt;

&lt;h3 id=&quot;4-phone&quot;&gt;4” Phone&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/responsive_android_phone.JPG&quot; alt=&quot;Responsive Layout on Phone&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-tablet&quot;&gt;7” Tablet&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/responsive_android_tablet.JPG&quot; alt=&quot;Responsive Layout on Tablet&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-tablet-landscape&quot;&gt;7” Tablet (Landscape)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/responsive_android_tablet_landscape.JPG&quot; alt=&quot;Responsive Layout on Landscape Tablet&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Another handy feature of some CSS frameworks (like Bootstrap) are the helper
classes like &lt;code class=&quot;highlighter-rouge&quot;&gt;.visible-phone&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.hidden-phone&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.visible-tablet&lt;/code&gt;, etc. We
can do the same with Android.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Device Visibility --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PhoneOnly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:visibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;gone&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TabletOnly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:visibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;visible&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TabletPortraitOnly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:visibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;gone&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TabletLandscapeOnly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:visibility&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;visible&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Drop these styles in each of your configuration folders and toggle the
visibilities on and off as appropriate.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/column_one&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ... some content ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/column_two&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/TabletLandscapeOnly&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ... some extra content since we have space ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For a tablet in landscape, the style will cause the second column to be shown.
For all other devices, the second column will be hidden.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With just a few lines of XML, we have a mini-framework setup that can be used
throughout our app. You can extend this technique to implement other common 
“classes” (think master-detail or cards) as needed.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is &lt;a href=&quot;http://stackoverflow.com/questions/1995004/packaging-android-resource-files-within-a-distributable-jar-file&quot;&gt;tricky&lt;/a&gt; to distribute a JAR that contains Android resources
(outside of Gradle) so there hasn’t been much progress made in creating the
Bootstrap-equivalent for Android (don’t be confused by either of &lt;a href=&quot;http://www.androidbootstrap.com/&quot;&gt;these&lt;/a&gt; 
&lt;a href=&quot;https://github.com/Bearded-Hen/Android-Bootstrap&quot;&gt;projects&lt;/a&gt;,
they don’t do what you might expect). Hopefully, Android’s move to Gradle will
make a reusable layout framework more feasible.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Some tools I like</title>
   <link href="http://mdswanson.com/blog/2013/11/13/some-tools-i-like.html"/>
   <published>2013-11-13T00:00:00+05:30</published>
   <updated>2013-11-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/11/13/some-tools-i-like</id>
   <content type="html">&lt;h2 id=&quot;what-date-is-next-thursday&quot;&gt;What date is next Thursday?&lt;/h2&gt;

&lt;p&gt;If you have ever clicked on the time in the system tray or Googled for “calendar”, then I
am about to blow your mind.&lt;/p&gt;

&lt;p&gt;Just use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cal_(Unix)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cal&lt;/code&gt;&lt;/a&gt; UNIX command!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/cal.png&quot; alt=&quot;cal UNIX command&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-is-my-blog-loading-so-slow&quot;&gt;Why is my blog loading so slow?&lt;/h2&gt;

&lt;p&gt;Have you optimized your images? No? Yeah, I didn’t think so.&lt;/p&gt;

&lt;p&gt;Try running &lt;a href=&quot;http://imageoptim.com/&quot;&gt;ImageOptim&lt;/a&gt; (Mac-only) or &lt;a href=&quot;http://optipng.sourceforge.net/&quot;&gt;OptiPNG&lt;/a&gt; (Windows) and be amazed when
your image sizes are reduced by 25-75%.&lt;/p&gt;

&lt;p&gt;(Warning: your MacBook might sound like a jet engine while this runs…)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/imageoptim.png&quot; alt=&quot;ImageOptim screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-need-to-make-a-quick-web-page-should-i-install-wordpress&quot;&gt;I need to make a quick web page. Should I install WordPress?&lt;/h2&gt;

&lt;p&gt;No, please, no! Why not try out &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; — an awesome static site generator?&lt;/p&gt;

&lt;p&gt;I’ve used it to make:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This &lt;a href=&quot;http://mdswanson.com&quot;&gt;blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Websites for meetup groups: &lt;a href=&quot;http://indysa.org/&quot;&gt;IndySA&lt;/a&gt;, &lt;a href=&quot;http://indystartuplab.org/&quot;&gt;Indy Startup Lab&lt;/a&gt;, &lt;a href=&quot;http://itttl.org/&quot;&gt;Indy Tech Table Tennis League&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stupid single page sites: &lt;a href=&quot;http://mostpreciseweather.com/&quot;&gt;Most Precise Weather&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with Jekyll 1.3’s new &lt;a href=&quot;http://jekyllrb.com/docs/datafiles/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt; files feature&lt;/a&gt;, you can easily turn Jekyll into
a mini CMS powered by YAML files. Sky’s the limit now, folks!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How to Fail at Almost Everything and Still Win Big</title>
   <link href="http://mdswanson.com/writeup/2013/11/13/how-to-fail-at-almost-everything-and-still-win-big.html"/>
   <published>2013-11-13T00:00:00+05:30</published>
   <updated>2013-11-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/11/13/how-to-fail-at-almost-everything-and-still-win-big</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Scott Adams created the mega-successful &lt;em&gt;Dilbert&lt;/em&gt; comic strip. But he has also failed
at a ton of things, including a career in banking, making computer games, opening 
restaurants, and launching a TV show. Each failure taught him something important that
he would later use to find success.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book has a very conversational style and was an enjoyable read. The author recounts
his long list of failures — but also what he learns from each endeavor. For example,
a failed publishing venture selling meditation guides never got off the ground, but Adams
learned the ins-and-outs of advertising and marketing that benefited him later on.&lt;/p&gt;

&lt;p&gt;Mr. Adams also explains why he thinks setting goals are for suckers. He argues that it
is better to setup systems. Once you achieve a goal, you celebrate but lose all purpose.
With a system, you get small rewards every time you apply your system and can continually
improve. It is mostly a semantic difference, but I’ve found it to be very true in my own
experiences.&lt;/p&gt;

&lt;p&gt;I enjoyed Adams’ advice to try to optimize your life around your own personal energy and
enthusiasm. Not everyone works most efficiently in the same way or at the same time of
day — and not all tasks require the same kind of energy. Adams also talks doing
certain types of work in their own designated settings, like going to a certain coffee
shop to work on particularly tricky.&lt;/p&gt;

&lt;p&gt;There are some diversions along the way that cover Scott’s unusual medical history, his
take on diet and exercise, and some anecdotes about affirmations (which may turn off some
potential readers). Personally, I really enjoyed the tangents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
The book is a quick read, pretty funny, and has enough practical advice for me to give it
a good recommendation.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How Buildings Learn (and why software is no different)</title>
   <link href="http://mdswanson.com/blog/2013/11/11/how-buildings-learn-and-why-software-is-no-different.html"/>
   <published>2013-11-11T00:00:00+05:30</published>
   <updated>2013-11-11T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/11/11/how-buildings-learn-and-why-software-is-no-different</id>
   <content type="html">&lt;p&gt;I like to read material from outside of software; I find thinking about how I can apply some lessons
from other fields to programming to be very stimulating.&lt;/p&gt;

&lt;p&gt;Ideally, I like to find stuff that is approachable to a beginner. If a doctor wanted to learn about
how software teams solve problems, we shouldn’t recommend &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&quot;&gt;Knuth’s TAOCP&lt;/a&gt;; they are probably 
better with something like &lt;a href=&quot;http://www.amazon.com/Joel-Software-Occasionally-Developers-Designers/dp/1590593898&quot;&gt;Joel on Software&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot;&gt;The Mythical Man Month&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was really pleased to stumble across this &lt;a href=&quot;http://ask.metafilter.com/71101/What-single-book-is-the-best-introduction-to-your-field-or-specialization-within-your-field-for-laypeople&quot;&gt;MetaFilter curation&lt;/a&gt; entitled “What single book is 
the best introduction to your field for laypeople?”.&lt;/p&gt;

&lt;p&gt;One of the fields that piqued my interest was architecture and building construction. From that post, 
I found a book called &lt;a href=&quot;http://en.wikipedia.org/wiki/How_Buildings_Learn&quot;&gt;How Buildings Learn&lt;/a&gt;. I knew this would be good just based on the short
summary:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An illustrated book on the evolution of buildings and how buildings adapt to changing requirements over long periods&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Replace buildings with software and you’ve probably got a best-seller from Pragmatic Programmers!&lt;/p&gt;

&lt;p&gt;I was about to pull the trigger on this book when I found that the author (Steward Brand) 
actually produced a BBC mini-series about it. And, because we live in an amazing time, Mr. Brand
has graciously uploaded the whole thing to &lt;a href=&quot;http://www.youtube.com/user/brandst/videos&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And it is really lovely; I watched the whole thing over two evenings. I would highly recommend it 
to anyone that builds software.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Warning: there is a very loud and obnoxious beeping during the first 10 seconds or so)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=AvEqfg2sIH0#t=20&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;http://i.imgur.com/odd58FK.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit me up on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt; if you have come across any other cross-displinary gems or if you want me
to share more of the ones I have found.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>When in doubt, do a Spike</title>
   <link href="http://mdswanson.com/blog/2013/11/03/when-in-doubt-do-a-spike.html"/>
   <published>2013-11-03T00:00:00+05:30</published>
   <updated>2013-11-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/11/03/when-in-doubt-do-a-spike</id>
   <content type="html">&lt;p&gt;I’ve been kicking off a new project at work in the past week. We are in the
so-called &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/hh273039(v=vs.88).aspx&quot;&gt;“Iteration 0”&lt;/a&gt; phase. Getting dev environments and build servers
setup and all that.&lt;/p&gt;

&lt;p&gt;Something about having an empty codebase makes me anxious. Since there are 
almost infinite ways to start, there  is actually no way to start. 
&lt;a href=&quot;https://twitter.com/BarrySch&quot;&gt;Paradox of choice&lt;/a&gt; and whatnot.&lt;/p&gt;

&lt;p&gt;This particular project is an Android app — something that I have some
experience developing for, but nothing recent. One of my big goals for the
first week was to get reacquainted with the framework and figure out how to
structure the app at a high level.&lt;/p&gt;

&lt;p&gt;A technique I lean on in these situations is the &lt;a href=&quot;http://c2.com/cgi/wiki?SpikeDescribed&quot;&gt;Spike&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;driving-a-nail-through-a-logerr-application&quot;&gt;Driving a nail through a log…err application&lt;/h1&gt;

&lt;p&gt;A spike is a quick prototype that covers the major functionality and hits all 
the layers. Think “end-to-end for a single slice of the app”.&lt;/p&gt;

&lt;p&gt;In my case, our app interacts heavily with a JSON web API. My goal with this
spike is to make sure I can make API calls, parse the responses into Java 
objects, and render that data as a custom view onto the screen.&lt;/p&gt;

&lt;p&gt;The app will probably have close to 30 of these API-backed screens. I don’t need
to build out every one in this spike, but I should make sure I can at least do
one screen.&lt;/p&gt;

&lt;p&gt;Code written for a spike is &lt;strong&gt;intentionally disposable&lt;/strong&gt;. The purpose is to try 
to uncover early problems (and resolve them) and gain knowledge of new APIs or 
framework components. It is not production code so be very wary of straight 
copy-pasting the spike into your project.&lt;/p&gt;

&lt;p&gt;Given the disposable nature, I don’t usually test drive the code in a spike.
I don’t usually even write tests at all — unless I am doing a spike with the
intention of getting familiar with a new testing library. I don’t worry about 
optimization or good naming practices or fret about putting class in the right 
packages.&lt;/p&gt;

&lt;h1 id=&quot;clearing-the-fog&quot;&gt;Clearing the fog&lt;/h1&gt;

&lt;p&gt;I get a big sense of accomplishment (and relief!) when I finish a spike. In my
case, I figured out a bunch of unknowns in the past few days. Stuff like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;creating reusable “master layout” with an &lt;a href=&quot;http://developer.android.com/design/patterns/actionbar.html&quot;&gt;ActionBar&lt;/a&gt; and &lt;a href=&quot;http://developer.android.com/design/patterns/navigation-drawer.html&quot;&gt;NavigationDrawer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;using the &lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;Retrofit library&lt;/a&gt; to interact with the API&lt;/li&gt;
  &lt;li&gt;finding out how to handle &lt;a href=&quot;http://download.java.net/jdk8/docs/api/java/net/CookieManager.html&quot;&gt;cookie-based&lt;/a&gt; sessions for authentication&lt;/li&gt;
  &lt;li&gt;learning how to remove a bunch of boilerplate with &lt;a href=&quot;https://github.com/roboguice/roboguice&quot;&gt;RoboGuice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;rendering a custom view in a ListView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But with this success also comes temptation. I just hacked out this
code, resolving problems as I came across them. While the code works fine
and isn’t awful, it is not up to the production standards that I want.&lt;/p&gt;

&lt;p&gt;I think
it is especially important to be diligent with code quality at the start of a 
project. The first Activity (or Controller or unit test or whatever) has to be
a shining example because it is what everyone will look to for reference.&lt;/p&gt;

&lt;p&gt;Even though I wrote 800 lines of code over the past few days, I will
likely keep only one 30-line class and throw the rest away (metaphorically 
speaking; I always keep the spike around for later reference). The
rest of the code will be redone as needed, with proper test coverage and design.&lt;/p&gt;

&lt;p&gt;Isn’t that a waste of time though? Absolutely not.&lt;/p&gt;

&lt;p&gt;On Monday, I didn’t have a clear direction for how to start building this
piece of software.&lt;/p&gt;

&lt;p&gt;Now I have vision and a plan. Next week — it’ll be time to &lt;a href=&quot;http://www.youtube.com/watch?v=t8wuTWgBcMQ#t=25&quot;&gt;do work&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How not to validate email addresses</title>
   <link href="http://mdswanson.com/blog/2013/10/14/how-not-to-validate-email-addresses.html"/>
   <published>2013-10-14T00:00:00+05:30</published>
   <updated>2013-10-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/10/14/how-not-to-validate-email-addresses</id>
   <content type="html">&lt;p&gt;One task I’ve seen in nearly every web project I’ve worked on was: make sure this form field is a
valid email address.&lt;/p&gt;

&lt;p&gt;Whether this is for creating an account or some other function inside your app (inviting others,
sending reports, etc), email address validation seems totally reasonable on the surface.&lt;/p&gt;

&lt;p&gt;And it is a typical computer science-y problem. If you look around the internet, you will quickly
find &lt;a href=&quot;http://tools.ietf.org/html/rfc2822&quot;&gt;RFC 2822&lt;/a&gt;, a 47 page technical spec describing what a valid email address is. Or maybe
you will find a regular expression that looks something like &lt;code class=&quot;highlighter-rouge&quot;&gt;^[_a-z0-9-]+(\.[_a-z0-9-]omg-whyyyyy$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can probably even find a library in your language of choice that implements a full, RFC 2822
compliant parser or wraps that unreadable 200 line regex.&lt;/p&gt;

&lt;p&gt;Both of these solutions are &lt;strong&gt;wrong and a waste of development hours&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So what should you do instead?&lt;/p&gt;

&lt;p&gt;Just check for the existence of &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;. Every email address will have at least one of them and it is
trivially easy to write this code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s step back and talk about why you might want to validate an email address in the first place.&lt;/p&gt;

&lt;p&gt;The most common two reasons I hear are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To prevent fake/spam signups&lt;/li&gt;
  &lt;li&gt;To make sure the real email account owner is the one signing up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think trying to prevent spammy signups is a pre-mature optimization, but let’s put that
aside for now. Trying to prevent fake email addresses from getting into your app harms legitimate
users.&lt;/p&gt;

&lt;p&gt;How sure are you that your complex validator is not going to have any false positives? People use
Gmail’s tag-syntax (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;matt+whatever@gmail.com&lt;/code&gt;) to sign up for stuff all the time. Are you allowing
those?&lt;/p&gt;

&lt;p&gt;How about &lt;code class=&quot;highlighter-rouge&quot;&gt;!matt$=awesome@mail.aol.biz&lt;/code&gt;? Yep, that is a valid email address according to the spec.&lt;/p&gt;

&lt;p&gt;Especially in the early stages of a product, every user counts when you are trying to learn about
how real people use your software. Don’t lose a potential customer in order to block a few spammers
(if they really want to get in, they will just make tons of real email addresses anyways).&lt;/p&gt;

&lt;p&gt;The second reason really has nothing to do with the &lt;em&gt;format&lt;/em&gt; of the email address, but it often
gets conflated. If you require a user to confirm their email address, why don’t you just let them
enter whatever they want and let fake emails bounce? Just make sure you tell the user they have to
confirm their address to use your software.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here are my recommendations for how to use the time you saved from &lt;em&gt;not&lt;/em&gt; implementing complex email
address validation and dealing with bugs and support tickets from valid users that can’t sign up 
for your app.&lt;/p&gt;

&lt;h1 id=&quot;detect-typos&quot;&gt;Detect typos&lt;/h1&gt;

&lt;p&gt;How about checking for common domain typos? There is a really slick Javascript library called 
&lt;a href=&quot;https://github.com/Kicksend/mailcheck&quot;&gt;mailcheck&lt;/a&gt; that handles this well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/mailcheck-example.png&quot; alt=&quot;mailcheck example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, don’t be strict and auto-correct the address, but pointing out that &lt;code class=&quot;highlighter-rouge&quot;&gt;bob@gmial.com&lt;/code&gt; is
a typo is a win for user experience. You can even add custom domains easily — if you know
the current user’s email is from “microsoft.com” and he tries to send a report to someone
with a “microsotf.com” address, you can catch this!&lt;/p&gt;

&lt;h1 id=&quot;be-more-accepting&quot;&gt;Be more accepting&lt;/h1&gt;

&lt;p&gt;Have you ever copied an email address from your Outlook address book and tried to paste it into a
form? It probably pasted something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Matt Swanson &amp;lt;matt@mdswanson.com&amp;gt;&lt;/code&gt; when you really just
wanted the email part. That’s going to break some email validations.&lt;/p&gt;

&lt;p&gt;Does your app handle this case and extract the address for the user? No? Well, adding that sure 
seems more valuable than implementing the complex validation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you know any other UX improvements for email address fields? I’d love to hear them, let me know 
on &lt;a href=&quot;http://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Crappy emails make me sad</title>
   <link href="http://mdswanson.com/blog/2013/09/30/crappy-emails-make-me-sad.html"/>
   <published>2013-09-30T00:00:00+05:30</published>
   <updated>2013-09-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/09/30/crappy-emails-make-me-sad</id>
   <content type="html">&lt;p&gt;Email is a really powerful tool for delighting your users, but I find that
tons of apps are failing to take advantage of it. Sure, you probably don’t want
to get cute with your &lt;em&gt;Password Reset&lt;/em&gt; instructions, but there are so many missed
opportunities to create a great user experience.&lt;/p&gt;

&lt;p&gt;Here is an email I got a week ago from Netflix.&lt;/p&gt;

&lt;p&gt;Subject: Congratulations to House of Cards!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ZXW1hjr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uh, what? This email does nothing for me (except make me consider hitting
the unsubscribe button). It is like an internal Netflix company e-card
accidentally got sent to all 29 million subscribers. Yikes.&lt;/p&gt;

&lt;p&gt;Netflix, you are better than this!&lt;/p&gt;

&lt;p&gt;This was a great opportunity for Netflix to earn some brownie points in my
book. Instead of that self-congratulatory email above, why not something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Congrats to House of Cards on three Emmys. To celebrate, we’ve made the first episode 
free to stream this month — share it with your friends!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool — now I’ll tweet out a link because I freakin’ loved that show and I want all my 
friends to watch it. And I get to feel cool for linking people to neat things.&lt;/p&gt;

&lt;p&gt;Don’t like that version? How about this instead:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;House of Cards won three Emmys, thanks so much for your support. 
We couldn’t have done it without great fans like you watching the
show and telling your friends, so here is a free month off your bill.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Offer that to anyone that watched all the episodes of &lt;em&gt;House of Cards&lt;/em&gt; (you’ve got 
that data Netflix). Boom, instant brand zealots.&lt;/p&gt;

&lt;p&gt;Okay, maybe that is too costly. One more idea: since Netflix knows I watched all
of &lt;em&gt;House of Cards&lt;/em&gt; and that, in the past, I rented all of &lt;em&gt;The Wire&lt;/em&gt; on DVD and I’ve
streamed a few seasons of &lt;em&gt;Mad Men&lt;/em&gt; — they can probably infer that I like critically
acclaimed TV dramas. Why not craft an email like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Congrats to House of Cards on three Emmys (though you probably already knew that since 
you have great taste in TV shows)!&lt;/p&gt;

  &lt;p&gt;Thanks to your support, Netflix will continue it’s commitment to producing great
original content that we know you’ll love.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why yes, I do have great tastes, don’t I?&lt;/p&gt;

&lt;p&gt;Netflix — you have the data, use it! Make me feel special, give me something, help
me become a &lt;a href=&quot;http://businessofsoftware.org/2013/02/kathy-sierra-building-the-minimum-badass-user-business-of-software-a-masterclass-in-thinking-about-software-product-development/&quot;&gt;bad-ass user&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Don’t treat the emails you send like throwaway communications. It makes me sad :(&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Making of a Chef</title>
   <link href="http://mdswanson.com/writeup/2013/09/24/the-making-of-a-chef.html"/>
   <published>2013-09-24T00:00:00+05:30</published>
   <updated>2013-09-24T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/09/24/the-making-of-a-chef</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Ruhlman — a journalist who wants to learn the art of cooking — spends
time embedded in the kitchens of the Culinary Institute of America. This book provides
an inside look at the modern culinary education and what it means to be a chef.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The most impressive and lasting virtue from the book was &lt;strong&gt;discipline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The course structure is very demanding; students rotate sections every few weeks
instead of traditional university semesters. This leaves little room for mistakes or
slacking off. Kitchen hours seemed pretty extreme to me, if you were on a morning 
shift you might arrive at 4am and work until 4pm. You just busted your ass for 
twelve hours and want nothing more than to go crash, but instead you have to start 
prepping for the next day.&lt;/p&gt;

&lt;p&gt;Discipline also came up when talking about food quality. I think this quote really
sums up the ethos of a true chef,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We project our values by the food we have on the plate, not necessarily in the same artistic sense, but in the sense of flavors we offer. I always feel that when I put food on the plate for my family - anybody - I’m saying, “I feel good about this. This is what I believe is good food.” If it’s not good food, I wouldn’t put it there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ensuring a rigorous quality standard takes incredible discipline. When you are in
the weeds in the kitchen, you need to get food out. But a true chef will not let the
quality suffer, even if it means working late or redoing sub-par dishes that the
customer might not notice.&lt;/p&gt;

&lt;p&gt;This same concept of discipline aligns perfectly with software and is something that
I have been struggling with recently. Code quality, good design, maintaining a test
suite — all of these things are signs of a true craftsmen, but they are easy
to shrug off without discipline.&lt;/p&gt;

&lt;p&gt;When a winter storm is preventing Ruhlman for making the commute to the CIA for a 
final exam, he phones the instructor — expecting his understanding and maybe a
chance to reschedule. But this is not how a chef operates. The instructor says,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’re different. We get there. It’s part of what makes us a chef…The food is either finished at six o’clock or it’s not. It wasn’t simply that excuses were not accepted here - excuses had no meaning at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A professional (at anything) does not make excuses, they do what it takes to get
the job done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I really enjoy reading books from non-software industries, especially those that
value quality and treat their job like a craft. If you have any interest in cooking 
(even if you just watch &lt;em&gt;Top Chef&lt;/em&gt;) you will like this book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>"Have It Your Way" Software</title>
   <link href="http://mdswanson.com/blog/2013/08/27/have-it-your-way-software.html"/>
   <published>2013-08-27T00:00:00+05:30</published>
   <updated>2013-08-27T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/27/have-it-your-way-software</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=u4YAcsAe6UI&quot;&gt;Have It Your Way&lt;/a&gt; is an iconic slogan from Burger King.&lt;/p&gt;

&lt;p&gt;Letting the customer pick and chose whatever toppings and
condiments they want works really great when you are making
burgers.&lt;/p&gt;

&lt;p&gt;Customization is good for the customer and the business. If BK
only sold hamburgers with pickles, they would lose the business
of anyone who doesn’t like slimy cucumbers on their food. And 
like-wise, everyone ordering gets a burger that they like.&lt;/p&gt;

&lt;p&gt;So when it comes to software, clients want things to be customizable
as well. After all, the users all have slightly different workflows
and want to tweak certain aspects of the tool to their own liking.&lt;/p&gt;

&lt;p&gt;The beauty of how Burger King’s customization works is that
it is the &lt;strong&gt;illusion of choice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Though they offer to make a burger in any way the customer wants,
there are actually a limited number of choices. And most of those
choices are isolated and independent.&lt;/p&gt;

&lt;p&gt;You can opt out of pickles, but that has no effect on whether or
not you want ketchup. The kitchen only needs to stock eight or so
condiments that are used for every menu item they prepare.&lt;/p&gt;

&lt;p&gt;And it is not like each customer can specify their own list of
toppings. You can’t roll up and order a flame-broiled burger with
a fried egg and Sriracha (&lt;em&gt;though that would be awesome, they should
totally add that…&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Burger King has come up with &lt;a href=&quot;http://patrickrhone.com/2010/11/08/sensible-defaults/&quot;&gt;sensible defaults&lt;/a&gt; and lets you
tweak your own preferences just slightly.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Compare to this how software customization usually works.&lt;/p&gt;

&lt;p&gt;Take your generic invoicing software. Customers might want to
customize the stages of the invoice process: not sent, awaiting
payment, paid in full, etc.&lt;/p&gt;

&lt;p&gt;You could probably get away with having the 8-10 most common stages,
toggling on the most common 3-4 and letting the customer opt-in to
the rest. This would be the Burger King way.&lt;/p&gt;

&lt;p&gt;Instead, what often gets built is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoice Stage List Manager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can add, remove, or edit the stages - ultimate 
customization, everything is great! Except now your system is a 
whole lot more complex.&lt;/p&gt;

&lt;p&gt;Every time you show a drop-down of all the stages, you need to do a
database query with several &lt;code class=&quot;highlighter-rouge&quot;&gt;joins&lt;/code&gt;. You’ll need admin pages to 
allow the user to manage the list of stages. You need to handle
old invoices that are in states that have since been removed (do 
you soft-delete? or de-normalize?). Do all users of the system
have permission to create new stages? Do some users have access to
different stages? What about sub-stages or stage categories? How
do you handle “bucketed” reports (what invoices are paid, out, not
paid) if the user can modify every stage? What if the user enters
a stage that is 500 characters long, is the CSS going to explode?&lt;/p&gt;

&lt;p&gt;This is not a deathblow on it’s own. But once you have the first
completely customizable field, why stop there? Why not let the
user customize the Due Date field? Don’t use Net-15, Net-30, or
Net-45? We can let you bill with Net-23! All you need to do is
setup a custom Billing Rule in the Admin section (under Billing
Settings and then click Custom Rules).&lt;/p&gt;

&lt;p&gt;If you tried this level of customization in a Burger King it would
be nuts, right?&lt;/p&gt;

&lt;p&gt;Every new person that strolls up to the counter will have a 
different set of toppings for their burgers. How is the kitchen
supposed to keep track of all that? It would be pretty difficult
and you certainly couldn’t staff a team of minimum-wage teens on
summer break.&lt;/p&gt;

&lt;p&gt;Adding a new menu item would be a big ordeal, since the type of bun,
type of meat, list of toppings, weight, and side options might all
be customizable.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I recently did an estimate for a project that featured lots of
per-user customization. Compared to a stripped down version (with
sensible defaults that cover the 80% cases), the fully custom
estimate bloated to &lt;strong&gt;&lt;em&gt;nearly 4x the cost&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;And we all knew that every new feature after &lt;code class=&quot;highlighter-rouge&quot;&gt;V1&lt;/code&gt; was going to cost
more and take longer because of the added complexity.&lt;/p&gt;

&lt;p&gt;At the end of the day, I don’t think most users want to really ‘Have
it their way’ when it comes to software. They want to use an
app to help them achieve a goal or make more money.&lt;/p&gt;

&lt;p&gt;They probably will want to tweak some things to make it feel more
personalized, but all they really need is the illusion of choice
— not 27 different customizable drop-downs.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How to Practice Code Reviews</title>
   <link href="http://mdswanson.com/blog/2013/08/19/how-to-practice-code-reviews.html"/>
   <published>2013-08-19T00:00:00+05:30</published>
   <updated>2013-08-19T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/19/how-to-practice-code-reviews</id>
   <content type="html">&lt;p&gt;I’ve become addicted to a simple new app by &lt;a href=&quot;https://twitter.com/kytrinyx&quot;&gt;Katrina Owen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is called &lt;a href=&quot;http://exercism.io/&quot;&gt;Exercism&lt;/a&gt; and I have found it to be a really great way to
practice both giving and receiving code reviews.&lt;/p&gt;

&lt;p&gt;It works like this: you are given a small programming problem with
a suite of unit tests. You make the tests pass and submit your 
solution for critiquing. You have a few cycles of feedback —
people that have completed the exercise make &lt;a href=&quot;http://exercism.io/nitpick&quot;&gt;‘nitpicks’&lt;/a&gt;, you make
some changes, repeat until enough people mark your answer as completed.&lt;/p&gt;

&lt;p&gt;Unlike the more mathematical &lt;a href=&quot;http://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; or the fun-but-impractical
&lt;a href=&quot;http://codegolf.com/&quot;&gt;code golf&lt;/a&gt; challenges, the aim of Exercism is to help you write the
most “simple, expressive, readable code”. So, you know, actually useful in
the real world.&lt;/p&gt;

&lt;h2 id=&quot;so-how-is-this-good-code-review-practice&quot;&gt;So how is this good code review practice?&lt;/h2&gt;

&lt;p&gt;As I’ve &lt;a href=&quot;http://mdswanson.com/blog/2012/11/04/code-reviews-good-idea-bad-idea.html&quot;&gt;mentioned before&lt;/a&gt;, I think it is really tough to get good at
code reviews. Coming out of school, the only code review you have
probably received was from an automated grading script (and maybe a 5pt
deduction from the TA if your source code was a mess). And I have yet
to find a good resource to help guide an experienced developer on
how to give constructive feedback to a newbie.&lt;/p&gt;

&lt;p&gt;This is an area where Exercism really shines.&lt;/p&gt;

&lt;p&gt;To be able to nitpick a submission, you first need to complete
the exercise yourself. This ensures that users see at least one example
of how to conduct a review. You are also encouraged to nitpick your
own submission and the app shows you guidelines for what is appropriate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What do you like about the code?&lt;/li&gt;
  &lt;li&gt;How does the code make use of Ruby?&lt;/li&gt;
  &lt;li&gt;Does the code make appropriate use Object-Oriented or Functional principles?&lt;/li&gt;
  &lt;li&gt;How readable is the code? How well does it tell its story?&lt;/li&gt;
  &lt;li&gt;What software design patterns or principles (could) inform the code?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you finish an exercise, you can spend your time reviewing other
submissions, giving you a great opportunity to practice doing small-scale
code reviews. Since you have already solved the problem, even if you are
a relative newbie, you can still provide feedback (even if you are just
parroting back the feedback someone else gave you).&lt;/p&gt;

&lt;p&gt;As a veteran developer, Exercism is a great way to practice giving
polite and thoughtful feedback to a captive newbie. As a new developer,
Exercism allows you to gain experience receiving criticism, asking for
clarification, and determining when to take (or ignore) suggestions in a 
code review.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The app is still in the experimental phase but I would highly, highly
recommend you try it out. I’ve gotten more practice at code reviews in
15 minutes a day on Exercism than I could have in several weeks at work.&lt;/p&gt;

&lt;p&gt;You can do the exercises in Ruby (♥), Python, JavaScript, Clojure, or
Elixir and login with GitHub — so you really have no excuse not to try
it out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Do things, write about it</title>
   <link href="http://mdswanson.com/blog/2013/08/11/write-things-tell-people.html"/>
   <published>2013-08-11T00:00:00+05:30</published>
   <updated>2013-08-11T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/11/write-things-tell-people</id>
   <content type="html">&lt;p&gt;One of my favorite phrases is “Do things, tell people”. I came across it in
Carl Lange’s &lt;a href=&quot;http://carl.flax.ie/dothingstellpeople.html&quot;&gt;eponymous post&lt;/a&gt; and could instantly relate.&lt;/p&gt;

&lt;p&gt;Carl argues — and I wholeheartedly agree — that you need to do
only two things to put yourself in a position to encounter interesting work: 
make something cool and then tell people about it.&lt;/p&gt;

&lt;p&gt;Opportunities start appearing out of thin air. Make a cool little project,
post it to Hacker News, receive job offers. Write some code to simulate your
favorite RPG, go talk about it a local meetup, gain new friends and expand your
network.&lt;/p&gt;

&lt;p&gt;If all that seems overwhelming to you, realize that “telling people” can come
in the form of a simple blog post.&lt;/p&gt;

&lt;p&gt;The level of commitment is ridiculously low. It takes 10 minutes to setup a blog
and start writing. But sharing what you are doing is incredibly rewarding.&lt;/p&gt;

&lt;p&gt;I started this blog as a sort of “developer notebook”. If you look back at the
first ten or so posts, they are titled “Weekly Noise”. I was interested in
learning Node.js (the hotness at the time) so I just wrote about what I learned
each week and what I was planning to do next week.&lt;/p&gt;

&lt;p&gt;Later on, I wrote about an app I was building that used the GitHub API. Two years
later, I still get several hundred hits a month on those posts. I’ve gotten about
20 different emails or tweets from people asking me about the project. These
opportunities didn’t ever turn into anything, but they easily could have.&lt;/p&gt;

&lt;p&gt;Not too bad for an hour of work to document my learning.&lt;/p&gt;

&lt;p&gt;I wrote a post about my &lt;a href=&quot;http://mdswanson.com/blog/2012/03/01/my-side-project-queue.html&quot;&gt;side project queue&lt;/a&gt; that was read by a local
developer. We meet for coffee (which was odd since I don’t drink coffee…) and
wound end up co-organizing a &lt;a href=&quot;http://indystartuplab.org/&quot;&gt;weekly meetup&lt;/a&gt; that has been running for over a 
year now.&lt;/p&gt;

&lt;p&gt;Through that group, I’ve meet dozens of other developers and learned all about
the cool stuff they work on. And it all started by just telling people what my 
list of potential new projects was in a 500 word post.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This past month I set a goal to write 20,000 words and tracked it with
&lt;a href=&quot;https://www.beeminder.com&quot;&gt;Beeminder&lt;/a&gt;. I had a small backlog of post ideas that I wanted to knock out,
mostly opinion pieces of software. I ended up throwing several posts away; writing
deep posts about abstract topics is hard stuff!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/beeminder.png&quot; alt=&quot;&amp;quot;Write 20k this month&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But I’ve found a huge source of material in my recent projects. I wrote three posts
about my UX process for a work project, two posts about my open source RSS reader,
and two more posts about general lessons learned from building a handful of
personal projects over the past year and a half.&lt;/p&gt;

&lt;p&gt;The writing was easy to do and the response has been very positive. Don’t think
that your blog has to be the next Joel on Software or Rands in Repose — just
write about what you’ve done recently. Even if it doesn’t seem that interesting to
you, it will very likely be interesting to someone else.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/super-popular.png&quot; alt=&quot;&amp;quot;Super popular!&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I sometimes joke around with friends about my “super popular” blog. It isn’t really
super popular. But I have had some neat things happen as a result of writing on 
this blog.&lt;/p&gt;

&lt;p&gt;I’ve had managers and co-workers tell me about how they enjoyed reading it. It has
led to a string of desirable work projects, simply by demonstrating my ability 
and initiative in things like product development and Ruby.&lt;/p&gt;

&lt;p&gt;I occasionally post my stuff to Reddit or Hacker News — sometimes it gets on
the front page and I get 30k views in a day. I wrote a post that was in 
&lt;a href=&quot;http://mdswanson.com/static/dead-tree.png&quot;&gt;a magazine&lt;/a&gt;. Some of my stuff has been in &lt;a href=&quot;http://rubyweekly.com/&quot;&gt;Ruby Weekly&lt;/a&gt; and &lt;a href=&quot;http://sidebar.io/&quot;&gt;Sidebar&lt;/a&gt;.
I have a couple hundred RSS subscribers and Twitter followers as a direct result
of my blog.&lt;/p&gt;

&lt;p&gt;It wasn’t really difficult. And like I said, I’m not the next Coding Horror or
anything.&lt;/p&gt;

&lt;p&gt;But it is still pretty crazy. I’m just some dude in Indiana trying to write good 
code and share what I’ve figured out.&lt;/p&gt;

&lt;p&gt;All I did was “Do things and write about it”…and you should too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Engineering a First Run Experience</title>
   <link href="http://mdswanson.com/blog/2013/08/10/engineering-a-first-run-experience.html"/>
   <published>2013-08-10T00:00:00+05:30</published>
   <updated>2013-08-10T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/10/engineering-a-first-run-experience</id>
   <content type="html">&lt;p&gt;First impressions are important. I spent a lot of time thinking about the first 
run experience for &lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;Stringer, my RSS reader&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;it-starts-at-the-source&quot;&gt;It starts at the source&lt;/h2&gt;

&lt;p&gt;Stringer is an open source project and you self-host your own instance of it. So
the first run really starts before someone even installs the app. It starts on
the &lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote about it in &lt;a href=&quot;http://mdswanson.com/blog/2013/07/19/getting-traction-for-your-open-source-project.html&quot;&gt;more detail before&lt;/a&gt;, but on GitHub the README is
everything. It is like the landing page of a traditional product. You need a
clear value proposition, screenshots, and a call-to-action (in this case, 
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and deploy to Heroku).&lt;/p&gt;

&lt;p&gt;The installation instructions should be kept as concise as possible, while still
being thorough. If the user can’t get the app up and running without problems,
they are likely to just bail. Run through your setup instructions from a clean
slate, multiple times if you need to.&lt;/p&gt;

&lt;p&gt;Onward to the actual app!&lt;/p&gt;

&lt;h2 id=&quot;require-the-minimum-amount-of-input&quot;&gt;Require the minimum amount of input&lt;/h2&gt;

&lt;p&gt;Most apps start off with registration. You can experiment with a demo mode or
some kind of trial account, but I prefer to just ask for the minimum amount of
information up front and fill in blanks as you go.&lt;/p&gt;

&lt;p&gt;For Stringer, the minimum thing I need is a password. Originally, I asked for
an email address, but since Stringer is a single-user app, there is no need. If
I were to go back, I would kill the password confirmation too. 95% of the time,
the confirmation will match and if it doesn’t they can always reset the password.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/stringer_pw_setup.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_pw_setup_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first page also sets the tone of the app — for Stringer, this means 
short, to-the-point copy and an emphasis on the opinionated decisions of the app.&lt;/p&gt;

&lt;h2 id=&quot;welcome-aboard&quot;&gt;Welcome aboard&lt;/h2&gt;

&lt;p&gt;As you can imagine, the next piece of information I need is the list of RSS
feeds you want to read. The target audience for Stringer knows what an RSS feed
is and is comfortable with technical language like “importing”. Tailor your
on-boarding language to the end-user.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/stringer_welcome_aboard.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_welcome_aboard_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some small touches that improve the user experience here. 90% of the
users were coming from Google Reader when the project launched, so there is a
direct link that, when clicked, will export your Google Reader subscriptions 
(assuming you are logged in). I should probably change this now that new users
might be coming from Feedly, Newsblur, etc.&lt;/p&gt;

&lt;p&gt;Another noteworthy item is the “Not now” button. Give the user a way to skip
through any steps that aren’t strictly necessary — just make sure you give
them a way to add the information later on.&lt;/p&gt;

&lt;h2 id=&quot;time-to-delight&quot;&gt;Time to delight&lt;/h2&gt;

&lt;p&gt;So far all of this stuff is kind of standard, but now I can really turn on the
magic.&lt;/p&gt;

&lt;p&gt;You might have heard about the “blank slate” or “empty state” of your app, right?&lt;/p&gt;

&lt;p&gt;Basically, we usually think about how the app works when there is data in it.
For an RSS reader, this means you have a bunch of subscriptions, a bunch of 
stories, some things are read, some are unread, the user knows what all the
buttons do.&lt;/p&gt;

&lt;p&gt;This is because, as a developer, you spend most of your time working on the app
with all the data loaded in. But for the user, they are starting from scratch.&lt;/p&gt;

&lt;p&gt;It would be great if the first time you open up Stringer, you see your stories.
It lets you know that everything is working and you can dive in right away. But
there is a problem. It takes some time to parse all of your feeds to load in
your initial stories.&lt;/p&gt;

&lt;p&gt;I could just let the import page spin for 2 minutes while the app pulls down 
all your feeds, but that is a poor experience. Instead, I can fill that time with 
something useful, like explaining how the app works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/stringer_tutorial.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_tutorial_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added a background job to start parsing the imported feeds and then take the
user to an interactive instruction manual. Turn a technical problem (feeds take
a few minutes to parse) into a delightful experience (play around with sample
stories).&lt;/p&gt;

&lt;p&gt;This page was really fun to create. I drew some arrows and used a handwritten
&lt;a href=&quot;http://www.google.com/fonts/specimen/Reenie+Beanie&quot;&gt;Google Web Font&lt;/a&gt; to create the annotated layover. This is a fun way to 
show the user what all the buttons do and only took about an hour to implement.&lt;/p&gt;

&lt;p&gt;Notice the sample stories. They are cheeky little parodies of the type of feeds
that would be popular among Stringer’s target audience (tech-savvy readers).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/stringer_tutorial_2.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_tutorial_2_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And everything works just like the real app, you can open a story, use the
keyboard shortcuts, click the other buttons. When you open a story, it is filled
with a few paragraphs of &lt;a href=&quot;http://hipsteripsum.me/&quot;&gt;Hipster Ipsum&lt;/a&gt; (way better than Lorem!) and a 
kitten pic from &lt;a href=&quot;http://placekitten.com/&quot;&gt;Placekitten&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The bottom line is that I need to distract the user for at least 30 seconds so
the app can fetch them some stories. But at the same time, I can teach them 
how to use the app and (hopefully…) make them chuckle at the fake headlines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/stringer_tutorial_3.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_tutorial_3_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; JavaScript call to show a “Start Reading” button
after 10 seconds.&lt;/p&gt;

&lt;h2 id=&quot;now-youre-in&quot;&gt;Now you’re in!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/stringer_home.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_home_thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the user enters the app to find it already filled with stories. I made the
decision to only grab stories that were published in the past 24 hours, it makes
it faster to parse the feed and the user doesn’t end up with 500 unread items.&lt;/p&gt;

&lt;p&gt;On the backend, I toggle a flag that the user has completed the setup, so that
every time they use the app from now on, I take them straight to the news feed
instead of through the tutorial again.&lt;/p&gt;

&lt;p&gt;The time from cloning the repository to reading your own feeds on Stringer is
less than 10 minutes. None of the setup seemed like work, I didn’t make the
user link their Google Account or enter a bunch of feed URLs.&lt;/p&gt;

&lt;p&gt;But more importantly, the user had a great experience setting up the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/stringer_tweet_1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/static/stringer_tweet_2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/static/stringer_tweet_3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/static/stringer_tweet_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It is easy to focus on building cool features, but if you can’t get them past
the setup, the user will never get to see any of your hard work.&lt;/p&gt;

&lt;p&gt;Even though the first run only happens once, it can make or break your app so 
give it some love!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Interview to Implementation: Horizon Report</title>
   <link href="http://mdswanson.com/blog/2013/08/07/interview-to-implementation-horizon-report.html"/>
   <published>2013-08-07T00:00:00+05:30</published>
   <updated>2013-08-07T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/07/interview-to-implementation-horizon-report</id>
   <content type="html">&lt;p&gt;We recently added a new report to my current project at work. I am very
picky about what reports we add to this app — a stance shaped by
working on a project with an entire “Report Builder” that could generate
tens of thousand of report combinations.&lt;/p&gt;

&lt;p&gt;So I thought I’d share some of my process.&lt;/p&gt;

&lt;p&gt;Background: The app tracks company projects (who worked on them, what
technologies were used, etc). Employees can also list technologies that
interest them and record external projects that they have worked on
(personal projects, open source, past job, etc).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My basic process goes like this: expose some data, let the end-user
play around with it, talk to the end-user and find out what questions
they want answers to based on the data. If those questions are compelling,
create a report to help them answer said questions.&lt;/p&gt;

&lt;h2 id=&quot;interview-mike-our-biz-dev-champ&quot;&gt;Interview: Mike, our biz-dev champ&lt;/h2&gt;

&lt;p&gt;I had Mike poke around the app for a few days and I blocked out an hour 
of time to talk with him about what kind of questions he wanted answers
to from the app. We came up with four main questions and then pick the
top two to dive deeper - one of which was what we called the “horizon
report”.&lt;/p&gt;

&lt;p&gt;Mike wants to know what kind of work would be interesting to the employees
when he is pursuing new opportunities. If Mike knows that a lot of people
are really excited about Arduino or RubyMotion, he can spend time pursuing
those projects.&lt;/p&gt;

&lt;p&gt;I like Mike :)&lt;/p&gt;

&lt;p&gt;During our meeting, I tried to get Mike to tell me stories or examples
to illustrate the need for this data. Sometimes, you both realize that
there aren’t any actual use-cases for a report (other than “we have
data, therefore REPORTS!!”). Mike talked about how he has made an effort
to find more Ruby projects because he knows several engineers are
interested in it, but he had to spend a lot of time talking to people
to find that out and it was a small sample size (4-5 engineers out of 100).&lt;/p&gt;

&lt;p&gt;While Mike was talking, I tried to sketch out some notes using a weird
shorthand that combines bullet points and UI mockups. I tend to avoid
doing full blown mockups at this time, because people get too bogged down
in the details at this stage. No reason to spend 15 minutes deciding on
which columns to display or what the button text says right now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/chops-horizon-notes-big.png&quot; alt=&quot;&amp;quot;Shorthand Notes&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mockup-what-the-heck-did-i-write&quot;&gt;Mockup: What the heck did I write?!&lt;/h2&gt;

&lt;p&gt;When I got back to my desk — with the interview still fresh in my 
mind — I did a quick mockup. It is a good thing mockups are supposed
to be “rough looking” because I’m not great at drawing!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/chops-horizon-mockup.png&quot; alt=&quot;&amp;quot;Quick Mockup&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My main goal was to make sure I captured the key features from the
interview and translated them from my shorthand into something I could
give to another developer (or a future version of myself).&lt;/p&gt;

&lt;p&gt;I like to make notes on function, rather than graphics. I try to preempt
questions like: what should happen if this field is really long? how many 
results should we show? how should this be sorted? You can see some examples
of that above.&lt;/p&gt;

&lt;p&gt;Mike was too busy for a quick look at the mockup, but I was confident it
was pretty close based on our interview. When I had questions, I could
always refer back to the purpose of the report (“what is on the ‘tech
horizon’ for our engineers?”) and make a decision based on alignment to that
purpose.&lt;/p&gt;

&lt;h2 id=&quot;implementation-from-paper-to-pixels&quot;&gt;Implementation: From paper to pixels&lt;/h2&gt;

&lt;p&gt;I passed off the mockup to Jackson (another developer on the team) and he
cranked out the report in a few hours. It was smooth sailing with the
annotated mockup.&lt;/p&gt;

&lt;p&gt;After seeing it in the app, we made a few tweaks (swapped the “Interests”
and “External Project” sections, show Top 21 vs Top 20 so it would fill the
three-column grid evenly), but overall, the report is pretty close to the
mockup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-horizon-pixels.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/chops-horizon-pixels-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;caption&quot;&gt;Dummy data, click for larger image&lt;/div&gt;

&lt;h2 id=&quot;circle-back-make-sure-you-got-it-right&quot;&gt;Circle back: Make sure you got it right&lt;/h2&gt;

&lt;p&gt;We pushed out the feature and I grabbed Mike to take a quick look, he gave
it the thumbs up. A happy user!&lt;/p&gt;

&lt;p&gt;I set an Outlook reminder to ask Mike if the
report has been helpful for 60 days in the future. If it isn’t useful, I will
try to kill it or fix the problems.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t get bogged down by details when talking to a user/customer&lt;/li&gt;
  &lt;li&gt;Make sure there is a clear purpose for a report, don’t just build it
because you have the data&lt;/li&gt;
  &lt;li&gt;Think ahead to what questions you might have during development and
try to answer them on the mockup&lt;/li&gt;
  &lt;li&gt;Be deliberate about getting feedback once a feature has been in use for
a bit. Kill failed features ruthlessly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was fun to go soup-to-nuts on a feature. Sometimes working just at the
development level makes your forget that there isn’t some magic machine that
spits out specs and mockups. I encourage all developers to 
try shepherding a feature from end-user to “shipped” every once in a while.&lt;/p&gt;

&lt;p&gt;If you liked this format, let me know on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt; and I’ll try to 
write up a few more.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How to make writing tests less painful</title>
   <link href="http://mdswanson.com/blog/2013/08/03/how-to-make-testing-less-painful.html"/>
   <published>2013-08-03T00:00:00+05:30</published>
   <updated>2013-08-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/03/how-to-make-testing-less-painful</id>
   <content type="html">&lt;p&gt;I’ve been hacking on a few new projects recently, both at work and on my own 
time.&lt;/p&gt;

&lt;p&gt;But I’ve been kind of sloppy with testing.&lt;/p&gt;

&lt;p&gt;The biggest hurdle I am running into is pain. Slow tests are painful. Doing a
bunch of manual setup to test something is painful. Gluing together 13 different
gems to get things how I like them is painful. Mustering the initiative to write
the first test is painful.&lt;/p&gt;

&lt;p&gt;Turning a test suite from a hostile environment into a cozy place that makes you
feel all warm inside takes a lot of upfront effort. Sometimes I don’t think about
the benefits of investing time at the start of a project to up my motivation to
write good tests later on.&lt;/p&gt;

&lt;p&gt;There are a few concrete things that encourage me to keep up a well-groomed 
test suite. I’ve found that I am very likely to break good testing habits on 
projects that are missing the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Single command to run all tests&lt;/strong&gt; I recently spent a few weeks on a legacy
project and I was happy to see a full test suite. I was not so happy to learn that
you couldn’t run the full suite at once. It wasn’t that the project was just 
missing a script to run all the tests, but that you would hit a cryptic &lt;code class=&quot;highlighter-rouge&quot;&gt;JRuby&lt;/code&gt;
out-of-memory error if you ran them all at once. I can not imagine wanting to
pay the upkeep for that test suite — I had to run the tests in 5-10 test
“chunks” to see if anything was broken. Yuck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Seeds have been planted&lt;/strong&gt; I feel guilty slacking off on tests if I arrive
on a project that has decent tests already. Even if that person is just a past
version of me! Harness your initial momentum to do the grunt work and set 
yourself up for future success and good habits later. Pretend someone you really
admire has left the project in your care and trusted you to keep the quality
consistent.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Factories&lt;/strong&gt; I have a love/hate relationship with &lt;code class=&quot;highlighter-rouge&quot;&gt;FactoryGirl&lt;/code&gt; and the 
factory pattern in general. I love when I can replace 50 lines of setup code with
&lt;code class=&quot;highlighter-rouge&quot;&gt;Factory.create :project_with_contributions&lt;/code&gt; in a test; it is super expressive 
and lets me focus on the important behavior I am trying to explore. But I hate,
hate, hate setting up factories. It is some of the most boring stuff I can think
of.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of this stuff is not fun. I don’t know many people that like doing the
grunt work that turns a test suite into a well-oiled machine. But if you can deal
with the pain early, you will be thankful (and more likely to still be writing
good tests) a month or two down the line.&lt;/p&gt;

&lt;p&gt;Most projects are marathons, not sprints. Unless you are doing scrum.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Don't Email Me at 2am</title>
   <link href="http://mdswanson.com/blog/2013/08/02/dont-email-me-at-2am.html"/>
   <published>2013-08-02T00:00:00+05:30</published>
   <updated>2013-08-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/08/02/dont-email-me-at-2am</id>
   <content type="html">&lt;p&gt;Almost every web app these days sends emails. You’ve got your 
“thanks for registering” emails, your “password reset” emails, your “someone added
a comment to your post” emails. Whatever, that’s fine.&lt;/p&gt;

&lt;p&gt;But I wish developers would pay a little more to attention to the context in
which they are sending me these messages.&lt;/p&gt;

&lt;p&gt;I’ve noticed the difference recently in two apps in particular.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.beeminder.com&quot;&gt;Beeminder&lt;/a&gt; is a goal tracking application that encourages you to make steady
progress to stay on track. Every day or so you enter data into the app about
your goal. When you start going off track, Beeminder starts buzzing you.&lt;/p&gt;

&lt;p&gt;You start getting a daily email that summarizes your progress and lets you
enter data straight from the email by replying. But there are some
smaller details that I really like.&lt;/p&gt;

&lt;p&gt;The email comes at 9:30am — at the start of the day — so I’m reminded
to make some progress that day. It is a small thing, but they could send an
email at 10pm asking me to log what I did that day. But at 10pm, it’s probably
too late to do anything if I forgot.&lt;/p&gt;

&lt;p&gt;Compare this to an email I got this morning from Leanpub.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leanpub.com/&quot;&gt;Leanpub&lt;/a&gt; is a tool for authors to create ebooks that makes it easy to add 
updates and get them automatically beam them down to my Kindle. I really like
the app and have brought a dozen books using their platform.&lt;/p&gt;

&lt;p&gt;At 1:48am this morning, I was drifting off to sleep
when my phone buzzed. I had an email. It was Leanpub telling me that a new
version of a book I had purchased was available. That’s great, Leanpub, but I
don’t really care and you just woke me up. Now I have a negative connotation
associated with your emails, I might unsubscribe or mark them as spam. But
mostly I’m just annoyed.&lt;/p&gt;

&lt;p&gt;If I had to guess, I bet the logic for Leanpub goes something like: when a
publisher updates their book, email all the book owners to tell them an update
is available. Sounds great, until you consider an author in California pushing
an update at 10:48pm that buzzes my phone in the wee hours of the night. Leanpub
should really batch up these emails and send them out during normal waking hours.&lt;/p&gt;

&lt;p&gt;Another thing that Beeminder does well is when you stop entering data into
the app, it starts a gradual back-off. If I stop responding to daily emails, it
starts sending them every few days, then every week, then just stops completely.&lt;/p&gt;

&lt;p&gt;This is another trick that Leanpub should steal. I’ve gotten 5 emails about
updates to a certain book I bought. I haven’t clicked any of the “download update”
links in any of the emails. Why doesn’t Leanpub start emailing me less often? Maybe
only when a major update happens, instead of several minor ones?&lt;/p&gt;

&lt;p&gt;The major difference between Beeminder and Leanpub emails is that one feels like
a thought-out user interaction and the other feels like a developer afterthought.&lt;/p&gt;

&lt;p&gt;Beeminder probably sat down and worked through how a user would receive their
emails, where as it seems that Leanpub probably had a story that said “As a user,
I want to receive an email when a book I own gets updated” and just cranked it
out.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The moral of the story: if you are going to send an email in your application,
make sure you think about the context. Trivial details like when the user is
going to receive the email can make all the difference.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Becoming T-Shaped</title>
   <link href="http://mdswanson.com/blog/2013/07/30/on-t-shaped-people.html"/>
   <published>2013-07-30T00:00:00+05:30</published>
   <updated>2013-07-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/30/on-t-shaped-people</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/T-shaped_skills&quot;&gt;T-shaped people&lt;/a&gt; are all the rage right now in knowledge-work pop-culture.&lt;/p&gt;

&lt;p&gt;For those not in the know (what a terrible &lt;em&gt;faux pas&lt;/em&gt; on your part!), a person
with T-shaped skills is someone who has deep expertise in one area but also
breadth of generalized experience. Apparently, if you plot skills across those
axes then it looks like a T…or something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/t-shaped-heavy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyways, people are raving about this concept and they are mostly justified. If
you can find a T-shaped person, then they can collaborate across disciplines
and provide more overall value to a project than someone who is just a
.NET developer or just a designer.&lt;/p&gt;

&lt;p&gt;Slightly different variations of this type of person have been
in vogue lately: someone with &lt;a href=&quot;http://www.paulgraham.com/founders.html&quot;&gt;Founder Skills&lt;/a&gt;, a &lt;a href=&quot;http://www.hybridconf.net/&quot;&gt;Hybrid&lt;/a&gt;, a
&lt;a href=&quot;http://www.etsy.com/full-stack-product-hacker&quot;&gt;Full Stack Product Hacker&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;I came across an old — in internet time — &lt;a href=&quot;http://markdotto.com/2011/04/15/fatten-up-those-ts/&quot;&gt;article from Mark Otto&lt;/a&gt;
(pre-Bootstrap fame!) about investing in gaining T-shaped skills as a fresh-out
designer.&lt;/p&gt;

&lt;p&gt;I’ll throw modesty aside for a second and say that I am a T-shaped developer.&lt;/p&gt;

&lt;p&gt;I go deep into web development, but I’ve acquired some skills in design, UX,
copy writing, testing, product ownership, and even a little marketing. I also
know enough dev-ops type stuff to (crappily) setup a VPS, use Heroku/AWS, fiddle
with DNS, configure backups and use a build server.&lt;/p&gt;

&lt;p&gt;I could pretend to say I had the wisdom and foresight to take a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Practice_(learning_method)#Deliberate_practice&quot;&gt;deliberate approach&lt;/a&gt; like Mark advised, but that’s not how it actually
happened for me.&lt;/p&gt;

&lt;p&gt;It was because I am impatient and can’t let go.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When I first finished school, I did not have a “T-shaped mindset”. I would think
about an app I wanted to build and then I’d get to the point where I was like,
“Okay, cool! But now I need to find someone else to code the database and
then I need a designer to make it pretty”.&lt;/p&gt;

&lt;p&gt;Collaboration is great, but when you are an introverted developer without a
network of peers…well, you end up with a lot of projects that never even get
started because a team to help you doesn’t just magically appear.&lt;/p&gt;

&lt;p&gt;Instead of pushing past my comfort zone, I would stay turtled within my own
little world of capability. I could contribute to projects at work, but I
couldn’t ship something on my own.&lt;/p&gt;

&lt;p&gt;It is almost comical when I look back. I would say things like, “I need Dave to
finish this feature because it needs JavaScript changes”. I would start
actively avoiding tasks that seemed hard to me; I would always
&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#retreat_into_competence&quot;&gt;Retreat Into Competence&lt;/a&gt; and refill my confidence meter by doing easy
things that felt familiar.&lt;/p&gt;

&lt;p&gt;And let me tell you, that is a very tempting path to take. After four long
days of WHY THE F*** WON’T ORACLE WORK, cranking out yet another web form is
almost therapeutic. If I can just hop between cherry-picked tasks for long
enough then someone else will take care of the hard stuff. Anxiety levels drop
back to normal.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Things changed when I started working on stuff I really cared about. Not to say
that I didn’t care about other projects I was working on, but it is different
when it’s your baby (or even if you are just part of a project from the
very beginning).&lt;/p&gt;

&lt;p&gt;When you work on something that is yours, when you have skin in the game, you
suddenly become a perfectionist. Could I delegate some development work to
another person? Sure, I &lt;em&gt;could&lt;/em&gt;. But it is easier to just do it myself, that
way it will be “right” and how I wanted it. I’ve been That Guy so much; it’s
something I’m really trying to work on.&lt;/p&gt;

&lt;p&gt;And when I did delegate some non-programming stuff, it didn’t go much better.&lt;/p&gt;

&lt;p&gt;I got tired on waiting on people. It wasn’t even that others were taking too
long or anything like that. I am a momentum-based person. When I get into
something, I have one speed: &lt;em&gt;GO GO GO&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I was impatient. I didn’t want to wait until next week when a designer
had time to help me. So I’d say screw it and do it myself. It would suck but
at least I was moving. Who wants to have three meetings to discuss what the
marketing page should say? I’ll just write it myself and be done with it.&lt;/p&gt;

&lt;p&gt;Because I was so damn stubborn and couldn’t bear to trust anyone to do an
adequate job, I forced myself to become T-shaped. Because there was no one else!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Of course, this was probably taking it too far. I’m still struggling to find the
right balance of delegating and effectively leveraging others and going full
&lt;strong&gt;HULK SMASH DO EVERYTHING&lt;/strong&gt; mode.&lt;/p&gt;

&lt;p&gt;The breadth part of T-shaped is often glossed over; it doesn’t mean you can do
everything, but that you have enough knowledge to know what you don’t know. You
can still contribute, but you know when to step back and defer to someone who
has the deep expertise.&lt;/p&gt;

&lt;p&gt;I guess my advice to someone looking to become T-shaped would be…well, try
Mark’s approach, it probably works better.&lt;/p&gt;

&lt;p&gt;But since the difference between saying you are going to be deliberate and
actually doing it is more than most people (myself included) can overcome, I’d
say find something you really care about and then don’t let anything slow you
down.&lt;/p&gt;

&lt;p&gt;You’ll either get more T-shaped or fail with style. Either way it will be a fun
ride.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Step-by-Step UX Improvement: Screenshot Upload</title>
   <link href="http://mdswanson.com/blog/2013/07/24/step-by-step-ux-improvement-screenshot-upload.html"/>
   <published>2013-07-24T00:00:00+05:30</published>
   <updated>2013-07-24T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/24/step-by-step-ux-improvement-screenshot-upload</id>
   <content type="html">&lt;p&gt;My last post &lt;a href=&quot;http://mdswanson.com/blog/2013/07/18/step-by-step-ux-improvement.html&quot;&gt;detailing the step-by-step process&lt;/a&gt; I use to 
make UX improvements was well-received so here is another 
walk-through for a series of small changes to my current work project.&lt;/p&gt;

&lt;p&gt;Background: The app tracks company projects (who worked on them,
what technologies were used, etc). A new feature was added
recently to allow for project screenshots to be uploaded and
displayed, but it could use some UI/UX love.&lt;/p&gt;

&lt;p&gt;Today, I am going to be working on the upload page for screenshots.
Screenshots have three components: the actual image, whether it is 
public or private, and an optional caption.&lt;/p&gt;

&lt;h2 id=&quot;starting-point&quot;&gt;Starting Point&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-upload-ux-0.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/chops-upload-ux-0-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is pretty rough around the edges — but I will say it is
completely functional and works great! It’s just kinda ugly.&lt;/p&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New screenshot&lt;/code&gt; header is unnecessary; the user just
clicked the link to add a new screenshot and this is also shown
in the breadcrumbs&lt;/li&gt;
  &lt;li&gt;The checkbox from &lt;code class=&quot;highlighter-rouge&quot;&gt;Private?&lt;/code&gt; is on a new line (this is very
common in Rails apps because of how the form builder works)&lt;/li&gt;
  &lt;li&gt;The input order is weird; I have to write a caption
and pick the visibility before I pick the image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tweaks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag, expand breadcrumb to “Add new screenshot”&lt;/li&gt;
  &lt;li&gt;Make the &lt;code class=&quot;highlighter-rouge&quot;&gt;Private?&lt;/code&gt; checkbox inline&lt;/li&gt;
  &lt;li&gt;Swap the order of inputs (picking image first)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-upload-ux-1.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/chops-upload-ux-1-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I particularly like the ordering after this change. The most 
important part of a screenshot is the image and it is right at the
top. The visibility is more important than the caption (which is
optional) so it comes next.&lt;/p&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The drag-and-drop landing area is way too big&lt;/li&gt;
  &lt;li&gt;Having the file inputs stacked vertically is confusing — do
I drop and then browse? Why are their two inputs for one field?&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Drag and drop an image here&lt;/code&gt; isn’t great copy and doesn’t follow 
other conventions I’ve seen (text &lt;em&gt;inside&lt;/em&gt; the landing area)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tweaks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Shrink landing area drastically&lt;/li&gt;
  &lt;li&gt;Move drag-and-drop text inside area&lt;/li&gt;
  &lt;li&gt;Change file inputs to be side by side with clear indication that 
you can drop &lt;strong&gt;or&lt;/strong&gt; browser, not both&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-upload-ux-2.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/chops-upload-ux-2-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The form fits above the fold! Victory!&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Add this data&lt;/code&gt; is redundant. It is obvious that form fields need
to be filled in.&lt;/li&gt;
  &lt;li&gt;Button does not match the styles in the rest of the app 
(smaller, grey background)&lt;/li&gt;
  &lt;li&gt;Caption is supposed to be a short description, why is the field
multiline?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tweaks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove redundant text&lt;/li&gt;
  &lt;li&gt;Apply correct &lt;code class=&quot;highlighter-rouge&quot;&gt;btn-primary&lt;/code&gt; class to the button, tweak copy&lt;/li&gt;
  &lt;li&gt;Change caption to text &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, tweak copy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-upload-ux-3.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/chops-upload-ux-3-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scenario-beginner-mindset&quot;&gt;Scenario: Beginner Mindset&lt;/h2&gt;
&lt;p&gt;Think about the user time a new user lands on this page.&lt;/p&gt;

&lt;p&gt;Something that jumps out to me is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Private?&lt;/code&gt; checkbox. 
Everyone on the project knows what &lt;code class=&quot;highlighter-rouge&quot;&gt;Private?&lt;/code&gt; means but a new user
probably won’t. This needs some explanatory &lt;a href=&quot;http://bokardo.com/archives/writing-microcopy/&quot;&gt;microcopy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The private flag determines whether or not an image is “safe” to
show to the general public. Sometimes we do client work that we
can’t talk about (NDA, export controlled, etc) so we don’t want
to accidentally use that data in marketing materials.&lt;/p&gt;

&lt;p&gt;I also think about the target user. Most of the time, the person
adding screenshots is a project manager or developer. But 
sometimes it could be an intern or a newer developer that 
doesn’t know what is or is not “sensitive client information”, 
so we should accommodate them as well.&lt;/p&gt;

&lt;p&gt;Here’s what I came up with:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-upload-ux-4.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/static/chops-upload-ux-4-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Succinct microcopy that asks the real question we want to know and
an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;Not sure&lt;/code&gt; option (defaults to making the image 
private).&lt;/p&gt;

&lt;p&gt;I also swapped the &lt;code class=&quot;highlighter-rouge&quot;&gt;Back&lt;/code&gt; link (another silly Rails default) to a 
muted cancel link next to the create button. This is more of a 
personal preference, but I think it feels more natural.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And there you have it, a bit more polish to the screenshot upload
page. I think the interesting lessons here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be deliberate with microcopy to better engage users&lt;/li&gt;
  &lt;li&gt;Think of the importance of fields when ordering a list of inputs&lt;/li&gt;
  &lt;li&gt;Try using your app with a beginner’s mindset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this was helpful, let me know on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt; if you’d like
me to keep doing more writeups in this format.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>More Tales in Bad Restaurant UX</title>
   <link href="http://mdswanson.com/blog/2013/07/22/more-tales-in-bad-restaurant-ux.html"/>
   <published>2013-07-22T00:00:00+05:30</published>
   <updated>2013-07-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/22/more-tales-in-bad-restaurant-ux</id>
   <content type="html">&lt;p&gt;I’ve been trying to hold back my rants on restaurant UX after
I went a &lt;a href=&quot;http://mdswanson.com/blog/2012/09/25/new-coke-ux.html&quot;&gt;little crazy on the new Freestyle Coke machines&lt;/a&gt; (I still
hate them with a burning passion), but my beloved McAllister’s Deli
has really made a big blunder.&lt;/p&gt;

&lt;p&gt;I go to &lt;a href=&quot;http://www.mcalistersdeli.com&quot;&gt;McAllister’s Deli&lt;/a&gt; every Monday for &lt;a href=&quot;http://indystartuplab.org&quot;&gt;Indy Startup Lab&lt;/a&gt;,
rain or shine. Recently, they switched all of their menus to digital, 
displaying the items on ten large vertical monitors.&lt;/p&gt;

&lt;p&gt;Visually, they are pretty neat; lots of big pictures of the food and
an attractive color scheme.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/mcallisters-menu.png&quot; alt=&quot;McAllister's Deli - Terrible UX Menu Board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But they are absolutely terrible to use!&lt;/p&gt;

&lt;p&gt;One of the most important pieces of information for a menu to display
is the ingredients or toppings on an item.&lt;/p&gt;

&lt;p&gt;I know what a Club Sandwich &lt;em&gt;usually&lt;/em&gt; has on it, but is there bacon?
Is there mayonnaise? Is there mustard? What kind of bread? What’s the
difference between the King Club and the McAllister’s Club?!?&lt;/p&gt;

&lt;p&gt;This information is relegated to the very bottom of each column
on the new menu boards. And worse, it only displays the details
for whichever item
is “active”. The screens cycle through the list of sandwiches 
&lt;a href=&quot;http://shouldiuseacarousel.com/&quot;&gt;like a carousel&lt;/a&gt;, only revealing what the heck is on the Spud 
Óle if you happen to glance over at the right time.&lt;/p&gt;

&lt;p&gt;The menu items cycle at a 10 second interval so I get to wait nearly
2 minutes to see what comes on my sandwich if I miss it the first time
around. Okay, I could ask at the counter but what is the point of 
listing it all?&lt;/p&gt;

&lt;p&gt;The whole menu board is designed like it’s a application or
something. It would work great with a mouse &lt;code class=&quot;highlighter-rouge&quot;&gt;:hover&lt;/code&gt; or if I could
tap the menu item to select it — but this isn’t an app! It’s a
32” monitor mounted to the ceiling!&lt;/p&gt;

&lt;p&gt;The font size scales based on how many items are in each category
so you have the desserts at 24px and the sandwiches at a squint-worthy
13px right next to each other. You literally cannot read the list of 
sides (a choice that every single customer has to make!) until you 
are at the register. Ugh.&lt;/p&gt;

&lt;p&gt;Look, I get it McAllister’s CEO — you are trying to modernize
and make it easier to swap in new menu items. But I can’t imagine how
this passed through any kind of user testing. At the end of the day,
every minute spent explaining what is on a sandwich slows down the 
process for everyone. Go to McAllister’s during the lunch rush and you
will find a line wrapped around the restaurant so speed does matter.&lt;/p&gt;

&lt;p&gt;My recommendation: the old menu boards worked great, why don’t you
just digitize them instead of rolling out this frustrating carousel of
sadness?&lt;/p&gt;

&lt;p&gt;[Addendum, 08/05/2013]: Overheard some McAllister’s
employees talking about the downsides of the new system.
They agreed that the boards were very pretty, but that they
had been receiving four times as many questions about items
when ordering. Also, if the computer system powering the
menu has problems, it takes 30 minutes for them to reboot.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Half-Baked Thoughts on Ruby Web Architecture</title>
   <link href="http://mdswanson.com/blog/2013/07/21/half-baked-thoughts-on-ruby-web-architecture.html"/>
   <published>2013-07-21T00:00:00+05:30</published>
   <updated>2013-07-21T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/21/half-baked-thoughts-on-ruby-web-architecture</id>
   <content type="html">&lt;p&gt;Some half-baked ideas I’ve been playing around with on my Ruby projects recently.&lt;/p&gt;

&lt;h1 id=&quot;informal-dci&quot;&gt;Informal DCI&lt;/h1&gt;

&lt;p&gt;I got really into DCI a few months ago. I picked up &lt;a href=&quot;http://www.clean-ruby.com/&quot;&gt;Clean Ruby&lt;/a&gt; and acquired a copy of 
&lt;a href=&quot;http://www.leansoftwarearchitecture.com/&quot;&gt;Lean Architecture&lt;/a&gt; (didn’t make it past page 10), but I need to explore most ideas in actual
code instead of books.&lt;/p&gt;

&lt;p&gt;The idea of DCI — as I have cystallized it — is to extract behavior into groups
of roles or actions and then inject this new behavior into objects.&lt;/p&gt;

&lt;p&gt;The canonical example, instead of this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attr_accessible&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bunch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validators&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;approve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:approved&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApprovalMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_approval_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;approve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Do something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Approver&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;approve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:approved&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApprovalMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_approval_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Approver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;approve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is now easier to test the &lt;code class=&quot;highlighter-rouge&quot;&gt;Approver&lt;/code&gt; behavior in isolation, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; becomes less of a junk
drawer, it sort of makes more sense from a real-world sense since a user will be acting as 
an approver in some contexts (and maybe acting as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Moderator&lt;/code&gt; or something in another context).&lt;/p&gt;

&lt;p&gt;I’ve seen some people &lt;a href=&quot;http://mikepackdev.com/blog_posts/24-the-right-way-to-code-dci-in-ruby&quot;&gt;arguing for a convention&lt;/a&gt; were all of the behavior roles have a method
called &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;. This seems really silly to me and I can’t think of a good reason for it (and
the reason against it is that it hurts readability). I’ve also read arguments that using &lt;code class=&quot;highlighter-rouge&quot;&gt;extend&lt;/code&gt;
really screws up the “method cache” and is &lt;a href=&quot;http://tonyarcieri.com/dci-in-ruby-is-completely-broken&quot;&gt;apparently bad&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So for a while I was in this weird state: I liked the idea of DCI but none of the implementations
felt right. And if it didn’t feel right, I knew I wasn’t going to stick with it.&lt;/p&gt;

&lt;p&gt;I tried to take some of the ideas about roles and behavior extraction in a slightly different way.
I looked at some of the Command/Query stuff that seems to be more popular in .NET-land and tried
building an app using Commands (or Use Cases, there is so much overloaded terminology it is
maddening).&lt;/p&gt;

&lt;p&gt;This style felt right to me. I was writing a bunch of small, super focused classes to do some work.
My controllers were pretty simple and I stopped testing them for the most part.&lt;/p&gt;

&lt;p&gt;Some examples from my &lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;RSS reader&lt;/a&gt; (small Sinatra app):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkAsRead&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StoryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@story_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;story_id&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mark_as_read&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@story_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;is_read: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/stories/mark_all_as_read&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MarkAllAsRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:story_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mark_as_read&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/news&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImportFromOpml&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ONE_DAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opml_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;feeds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpmlParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse_feeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opml_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;feeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                  &lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                  &lt;span class=&quot;ss&quot;&gt;last_fetched: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ONE_DAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/feeds/import&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ImportFromOpml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;opml_file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tempfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/setup/tutorial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I combined these command/use-case things with Repositories and wrote most of the
test as isolated unit tests — super fast to run because I mock out the database…well,
and I’m not using Rails so they are pretty fast already.&lt;/p&gt;

&lt;h1 id=&quot;persistence-layer-separation&quot;&gt;Persistence Layer Separation&lt;/h1&gt;

&lt;p&gt;Repositories seem like a natural fit given the recent change of heart about Fat Models from
the Rails community. Again, my experience with this pattern comes from .NET, but the basic idea
is use a class to get a group of domain objects out of a database. I think about a Repository
as a group of Query objects with a common theme (usually the underlying model).&lt;/p&gt;

&lt;p&gt;The code looks like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoryRepository&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;is_read: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;published desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;per_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instead of using a &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; or putting more methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;Story&lt;/code&gt;, we just do the querying behind
a clean &lt;code class=&quot;highlighter-rouge&quot;&gt;StoryRepository#read&lt;/code&gt; interface. This is definitely not common in the Rails apps I’ve
seen. I really like using this pattern: my controller isn’t cluttered with sort order or pagination
stuff, my model doesn’t need to know every possible way a caller wants to query it, I can
stub out that nasty method chain in a test easily.&lt;/p&gt;

&lt;p&gt;This feels kind of strange for &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; based applications — since the domain objects
and the data mapping are the same thing, &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base&lt;/code&gt; subclasses. In my experience
with other tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;NHibernate&lt;/code&gt; you have dumber domain objects and explicit mapping objects
that link up database columns to properties.&lt;/p&gt;

&lt;p&gt;This separation comes with trade-offs: the Rails Way is quicker to code up (with just one class)
but you end up with hard coupling to the database whenever you create domain objects (not good
for tests). Maybe the &lt;a href=&quot;https://github.com/rom-rb&quot;&gt;Ruby Object Mapper&lt;/a&gt; project will bring more popularity to splitting out
domain models and mapping objects.&lt;/p&gt;

&lt;p&gt;I haven’t really found a good solution for this yet. My latest exploration was just stubbing the
Repository methods to return &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenStruct&lt;/code&gt;-like objects built in test factories.&lt;/p&gt;

&lt;h1 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/h1&gt;

&lt;p&gt;DI is so easy in Ruby and really helps with testing. I don’t think I would ever go without it
anymore. I also like how glaringly obvious your dependencies become when you use injection.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeedDiscovery&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Feedbag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Feedzirra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I could lie and say that this pattern is handy if I ever need to swap out gems, but who am I 
kidding? That never actually happens. Since Ruby allows for default arguments there is really 
no downside to this style of coding — the calling interface is the same but I can test much 
easier. Win, win.&lt;/p&gt;

&lt;h1 id=&quot;controller-callbacks&quot;&gt;Controller Callbacks&lt;/h1&gt;

&lt;p&gt;The biggest problem I had with my use-case/command style was that handling more than the happy
path flow in the controller got clunky. I see two possible solutions to look into: returning
result objects or some kind of callbacks on the controller.&lt;/p&gt;

&lt;p&gt;Result objects seem like the more tame path. Define some convention for status, probably a hash
with keys like &lt;code class=&quot;highlighter-rouge&quot;&gt;:status&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:errors&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;:model&lt;/code&gt; and then handle that in the controller.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddFeedSubscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Subscribed!&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I don’t think this is a bad approach and probably what I would do with a team larger than 2.&lt;/p&gt;

&lt;p&gt;The other approach, which I first saw in Hexagonal Rails, is to pass the controller as an 
argument and call methods on it.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddFeedSubscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscription_succeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Subscribed!&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscription_failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AddFeedSubscription&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscription_succeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This seems kind of inside-out, but something feels right about it to me. If you are going to have
more than a if/else branch in the controller action, then the callbacks seem like they might be a
win.&lt;/p&gt;

&lt;p&gt;And controller testing can mostly go out the window. Throw in a double for callback and keep the
actual callbacks simple and mostly framework plumbing and I think you have a recipe for good design.&lt;/p&gt;

&lt;p&gt;This idea seems to be the one advocated by the &lt;a href=&quot;http://dci-in-ruby.info/technical_overview.html&quot;&gt;DCI in Ruby sample application&lt;/a&gt;, which
is the closest resource I’ve found that mirrors my own preferences and findings.&lt;/p&gt;

&lt;h1 id=&quot;whats-still-stewing&quot;&gt;What’s still stewing?&lt;/h1&gt;

&lt;p&gt;Decorators/Presenters/View Models - I think if you are going all-in on view models then you should
use something logicless, but that means Liquid right now for your templating. I can’t imagine
building a whole app using Liquid and not wanting to pull my hair out.&lt;/p&gt;

&lt;p&gt;Client-side JS - Can this co-exist with a typically server side app? Or are you in for a world of
hurt if you don’t put clients-ide MVC as the first class citizen and just build a JSON API backend?
My limited experience trying to use Backbone with Sinatra was painful, but workable.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Email as the Interface</title>
   <link href="http://mdswanson.com/blog/2013/07/21/email-as-the-interface.html"/>
   <published>2013-07-21T00:00:00+05:30</published>
   <updated>2013-07-21T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/21/email-as-the-interface</id>
   <content type="html">&lt;p&gt;I think using Email as the Interface is a really interesting concept for building new
products. I know it sounds old-school, but hear me out.&lt;/p&gt;

&lt;p&gt;Think about some of the advantages for building an email-first application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Widespread corporate adoption&lt;/strong&gt;: every company has email (at least every company that
would buy a software product) and receiving email doesn’t require any special software
to be install.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: as &lt;a href=&quot;http://ryanhoover.me/post/43986871442/email-first-startups&quot;&gt;Ryan Hoover points out&lt;/a&gt;, email is asynchronous. This facilitates a
concierge model that lets you &lt;a href=&quot;http://paulgraham.com/ds.html&quot;&gt;do things that don’t scale&lt;/a&gt;. Imagine a monthly email
recommending books I should read written by an actual bibliophile and not some automated
recommendation system; it might take someone an hour per user, but you’ve got all month
to finish them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Push system&lt;/strong&gt;: in a standard web app, you are often relying on users to come to your site,
login and do some task. With email, you can create a “push system” and keep a user engaged
in your application. &lt;a href=&quot;https://training.kalzumeus.com/lifecycle-emails&quot;&gt;Life-cycle emails&lt;/a&gt; are all the rage, why not adapt them into your actual
product workflows?&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;One less application&lt;/strong&gt;: lots of business folks spend most of their days in Gmail or Outlook
already, so an email interface has less cognitive overhead. You can get email on your phone,
tablet, or laptop; no need to build native apps right off the bat.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Less features&lt;/strong&gt;: you might not think is a benefit but email forces you to be very deliberate
about design user interactions and simplifying processes. You can’t embed a drag-and-drop AJAX
calendar in an email, but you could email someone three date options as links and let them
pick one.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/morale-email.png&quot; alt=&quot;Morale daily email&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The future is interesting&lt;/strong&gt;: Gmail recently came out with something called &lt;a href=&quot;https://developers.google.com/gmail/schemas/&quot;&gt;Schemas&lt;/a&gt;, a
special markup you can add to emails to create buttons and other actions (add to calendar,
write a review, etc) directly in the user’s inbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/static/gmail-add-to-queue.png&quot; alt=&quot;Gmail Add to Queue button&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Easier to delight&lt;/strong&gt;: for whatever reason, getting a weekly email with movie recommendations
seems more fun than logging into Netflix; when I saw &lt;a href=&quot;http://www.minimalytics.com/&quot;&gt;Minimalytics&lt;/a&gt; I got super excited about
getting a weekly metrics email, even though the same information is available in the apps
directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Less competition&lt;/strong&gt;: there are tons of CRM apps, but email based applications like &lt;a href=&quot;http://www.streak.com/&quot;&gt;Streak&lt;/a&gt; have
a built-in differentiator.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scaling is crazy cheap&lt;/strong&gt;: sending emails is ridiculously cheap right now. &lt;a href=&quot;http://mandrill.com/pricing/&quot;&gt;Mandrill&lt;/a&gt; is sending
thousands of emails for &lt;a href=&quot;/morale/&quot;&gt;MoraleApp&lt;/a&gt; a month and we are still under the 12k/month free plan
and Mandrill is doing all the hard work of maintaining a positive reputation to avoid landing in spam.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interesting technical challenges&lt;/strong&gt;: go tell a computer scientist you need an NLP
system to parse expenses out of a free-form inbound email and watch their face light up. Or how 
about a headless Javascript engine to generate &lt;a href=&quot;http://blog.parsely.com/post/34241210620/whatever-it-takes&quot;&gt;beautiful summary emails&lt;/a&gt; on the fly?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Email may seem old and crusty, but that’s fine with me — Email as the Interface is a great
fit for prototyping and building out a laser-focused product that can easily integrate into
people’s everyday usage.&lt;/p&gt;

&lt;p&gt;So while a committee argues about the OAuth3 spec, I’ll be building something cool that’s coming 
to your inbox soon.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Getting Traction for your Open Source Project</title>
   <link href="http://mdswanson.com/blog/2013/07/19/getting-traction-for-your-open-source-project.html"/>
   <published>2013-07-19T00:00:00+05:30</published>
   <updated>2013-07-19T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/19/getting-traction-for-your-open-source-project</id>
   <content type="html">&lt;p&gt;I released an open source RSS reader — &lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;Stringer&lt;/a&gt; — a few 
months ago and it has enjoyed a fair amount of popularity. It is a bit
tough to measure usage (GitHub doesn’t track number of clones, self-
hosted with no mechanism to “phone home”) but it is approaching 2000
stars on GitHub and has at least &lt;a href=&quot;http://www.marco.org/2013/07/10/post-google-reader-subscriber-stats&quot;&gt;1300 installs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is my first project on GitHub to really blow up; I had mild
success (~50 star range) for a landing page app I built a while ago,
but Stringer has far exceeded that.&lt;/p&gt;

&lt;p&gt;This post recounts my observations about getting traction for Stringer
— results may vary but I think this is pretty sound and very 
actionable advice.&lt;/p&gt;

&lt;p&gt;There is definitely luck involved but I want to talk about a great
concept from Jason Roberts: &lt;a href=&quot;http://www.codusoperandi.com/posts/increasing-your-luck-surface-area&quot;&gt;luck surface area&lt;/a&gt;. The amount of
luck you have is proportional with the number of people you have
communicated your something to.&lt;/p&gt;

&lt;p&gt;Here are some deliberate steps I took to increase my luck surface area
for Stringer:&lt;/p&gt;

&lt;h1 id=&quot;timing&quot;&gt;Timing&lt;/h1&gt;

&lt;p&gt;The Google Reader shutdown had been announced. Like most people I was
a little bummed out, but it was far enough in the future that I didn’t 
give finding an alternative much thought.&lt;/p&gt;

&lt;p&gt;By March, I was starting to get bothered by the “Google Reader is 
shutting down” popups and decided to look for other options.&lt;/p&gt;

&lt;p&gt;When I released Stringer it was near the beginning of the “hey I wrote
an RSS reader” wave that was picking up steam. There was a bit of first
mover advantage here, if I could build something compelling to a user
they wouldn’t have to write their own or go with one of the other
options.&lt;/p&gt;

&lt;p&gt;The timing was also important for “freshness” — Stringer was not
the only self-hosted RSS reader out there. &lt;a href=&quot;http://www.feedafever.com/&quot;&gt;Fever&lt;/a&gt; and &lt;a href=&quot;http://tt-rss.org/redmine/projects/tt-rss/wiki&quot;&gt;Tiny-Tiny RSS&lt;/a&gt; were
both popular, but they both looked dated and unmaintained. In 
comparison, Stringer was new and in active development.&lt;/p&gt;

&lt;h1 id=&quot;screenshots-screenshots-screenshots&quot;&gt;Screenshots, screenshots, screenshots…&lt;/h1&gt;

&lt;p&gt;I’m not going to lie: design is huge for this kind of project. Design
is huge for every open source project, it just takes different forms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kennethreitz/requests&quot;&gt;Requests&lt;/a&gt; doesn’t need pretty screenshots, but it needs to convey the
well-designed API with clear examples at the top of the README.&lt;/p&gt;

&lt;p&gt;An app &lt;strong&gt;must&lt;/strong&gt; have screenshots — or some kind of demo mode.&lt;/p&gt;

&lt;p&gt;Go look at a bunch of “Show HN” posts and you will almost always see a 
comment along the lines of “I’m not going to register just to see what
your app looks like, please add a screenshot”.&lt;/p&gt;

&lt;p&gt;And they are right! Are you really going to clone my git repo, install
a bunch of gems and setup a database to find out what the thing looks
like? Of course not. I wouldn’t and I can’t imagine who would.&lt;/p&gt;

&lt;p&gt;Stringer has three big screenshots, all specifically picked to show a
different part of the app. An instruction page that shows you use the
thing, an Inception-like shot of someone reading a post about Stringer
while using Stringer, and a final shot showing the feed management 
page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.github.com/swanson/stringer/raw/master/screenshots/instructions.png&quot; alt=&quot;Stringer Screenshot&quot; style=&quot;max-width:600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compare the &lt;a href=&quot;https://github.com/swanson/stringer/blob/master/README.md&quot;&gt;README&lt;/a&gt; of Stringer to some competitors: &lt;a href=&quot;https://github.com/Athou/commafeed/blob/master/README.md&quot;&gt;CommaFeed&lt;/a&gt; 
&lt;a href=&quot;https://github.com/SSilence/selfoss&quot;&gt;selfoss&lt;/a&gt; &lt;a href=&quot;https://github.com/samuelclay/NewsBlur&quot;&gt;NewsBlur&lt;/a&gt;. You can tell if Stringer is going to be the right choice for you right away.&lt;/p&gt;

&lt;h1 id=&quot;marketing---its-all-about-the-snowball&quot;&gt;Marketing - it’s all about the Snowball&lt;/h1&gt;

&lt;p&gt;I don’t have a large Twitter following. At the time of this writing I
have 375 followers. When I first tweeted about Stringer I had closer
to 275.&lt;/p&gt;

&lt;p&gt;I had local connections from the Indy.RB meetup group so I got a few
retweets from that, but by and large I didn’t make a huge ripple.&lt;/p&gt;

&lt;p&gt;I sent a tweet with the &lt;code class=&quot;highlighter-rouge&quot;&gt;#replacereader&lt;/code&gt; hashtag, something that I came
across when looking for alternatives. Again, nothing big here.&lt;/p&gt;

&lt;p&gt;And lastly, I sent a &lt;a href=&quot;https://twitter.com/_swanson/status/330344830364434432&quot;&gt;tweet&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;@TheChangelog&lt;/code&gt; — the 
only blog about open source that I really knew of.&lt;/p&gt;

&lt;p&gt;I posted a &lt;a href=&quot;https://news.ycombinator.com/item?id=5650606&quot;&gt;ShowHN&lt;/a&gt; (19 pts - got autoflagged because I direct 
linked to it on Twitter, don’t do that) and posted it to /r/programming
and /r/ruby (+188 and +76 respectively).&lt;/p&gt;

&lt;p&gt;And then it was time for the Snowball Effect to kick in.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@TheChangelog&lt;/code&gt; (6k followers) &lt;a href=&quot;http://thechangelog.com/stringer-a-self-hosted-anti-social-rss-reader/&quot;&gt;tweeted it&lt;/a&gt; and put it on their blog 
(I was so pumped!). The reddit and HN Twitter bots started sending it 
out, there are a few accounts with a couple thousand followers that
just tweet the top stories.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@ruby_news&lt;/code&gt; (14k) picked it up from /r/ruby and it was later in Peter
Cooper’s Ruby Weekly newsletter (10k+ readers, %55 open rate).&lt;/p&gt;

&lt;p&gt;From there other blogs and people on Twitter start picking it up
and pretty soon you are at 1000 stars. Now you are a trending repo on
GitHub and are showing up at the top of GitHub searches for “rss
reader”!&lt;/p&gt;

&lt;p&gt;I made sure to respond to any questions on Twitter and to post a link
to Stringer in a few comment threads on HN about RSS readers (but not
every one, don’t come off as spammy).&lt;/p&gt;

&lt;p&gt;Stringer got picked up by &lt;a href=&quot;http://onethingwell.org/post/49859167693/swanson&quot;&gt;OneThingWell&lt;/a&gt; and started getting some 
attention from the designer space. I started getting tweets from
users that had it up and running and were telling their friends.&lt;/p&gt;

&lt;p&gt;Luck plays a huge part, but just telling people about what 
you made really improves your luck.&lt;/p&gt;

&lt;h1 id=&quot;personalityvision&quot;&gt;Personality/Vision&lt;/h1&gt;

&lt;p&gt;Early on, I gave the project a distinct product vision. Stringer is an
anti-social RSS reader. I took an opinionated stance on the direction
I wanted to take and made it very clear from the get-go. Maybe you will
lose some potential users that feel alienated, but for a smaller group
your project will really resonate and they will help you promote it.&lt;/p&gt;

&lt;p&gt;It is the same line of thinking that has become popular in product
development. Build something that a small group loves instead of a
bland one-size-fits-all app with 37 features.&lt;/p&gt;

&lt;p&gt;Having a strong tagline also gives people good tweet-fodder ;-)&lt;/p&gt;

&lt;p&gt;I felt really awful having to reject pull requests that didn’t fit the
vision of the project, but at the end of the day Stringer is better for
it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Was it lucky that &lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;Stringer&lt;/a&gt; got so popular? Absolutely.&lt;/p&gt;

&lt;p&gt;But I increased my luck surface area substantially with good timing,
plenty of screenshots, telling people, and giving it some
personality.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Step-by-Step UX Improvement: Project Screenshots</title>
   <link href="http://mdswanson.com/blog/2013/07/18/step-by-step-ux-improvement.html"/>
   <published>2013-07-18T00:00:00+05:30</published>
   <updated>2013-07-18T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/18/step-by-step-ux-improvement</id>
   <content type="html">&lt;p&gt;I’ve been playing the role of UX fairy on my current project at work
this week — I go around the app, sprinkling little bits of
small improvements.&lt;/p&gt;

&lt;p&gt;I thought it might be useful to document some my decisions and reasoning.&lt;/p&gt;

&lt;p&gt;Background: The app tracks company projects (who worked on them, what
technologies were used, etc). A new feature was added recently to
allow for project screenshots to be uploaded and displayed, but it 
could use some UI/UX love.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-0.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 0&quot; src=&quot;http://localhost:4000/static/chops-ux-step-0-thumb.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;scenario-a-project-with-no-screenshots&quot;&gt;Scenario: A project with no screenshots&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-1.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 1&quot; src=&quot;http://localhost:4000/static/chops-ux-step-1.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The stock image for &lt;a href=&quot;http://placehold.it/&quot;&gt;placehold.it&lt;/a&gt; that was left from 
development&lt;/li&gt;
  &lt;li&gt;View All link takes user to an empty page that says “No screenshots
for this project”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove hot-linked placeholder with basic styled text; I can’t photoshop
my way out of an Adobe-brand paperbag so I have to stick to text instead of
making a better placeholder image&lt;/li&gt;
  &lt;li&gt;Add conditional to not render View All if there are no screenshots to
prevent the user from performing an “empty action”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-2.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 2&quot; src=&quot;http://localhost:4000/static/chops-ux-step-2.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scenario-a-project-with-one-screenshot&quot;&gt;Scenario: A project with one screenshot&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-3.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 3&quot; src=&quot;http://localhost:4000/static/chops-ux-step-3.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Carousel arrows are shown but don’t do anything since there is only one
image&lt;/li&gt;
  &lt;li&gt;Inconsistent casing on user actions (each word capitalized vs first word
only)&lt;/li&gt;
  &lt;li&gt;Use of black &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; pipe instead of gray &lt;code class=&quot;highlighter-rouge&quot;&gt;·&lt;/code&gt; dot does not match rest of the
app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Javascript to hide carousel controls if there is only one screenshot&lt;/li&gt;
  &lt;li&gt;Change user action text to be consistent (we use lowercase
throughout the app) and more terse&lt;/li&gt;
  &lt;li&gt;Swap in dot separator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-2a.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 4&quot; src=&quot;http://localhost:4000/static/chops-ux-step-2a.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scenario-a-project-with-multiple-screenshots&quot;&gt;Scenario: A project with multiple screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-3.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 5&quot; src=&quot;http://localhost:4000/static/chops-ux-step-3a.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Everything looks pretty good!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-tweaks&quot;&gt;Final tweaks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:4000/static/chops-ux-step-4.png&quot;&gt;
&lt;img alt=&quot;Chops UX Step 6&quot; src=&quot;http://localhost:4000/static/chops-ux-step-4.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I added a screenshot icon to the placeholder using &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;FontAwesome&lt;/a&gt; for a 
little bit of visual flair&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared the before and after, had a teammate give it a quick once over,
and pushed the changes to master. While doing this, I noticed that there
isn’t a way to remove a screenshot, so I added a work item to implement this
feature.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Overall, I am pretty happy with the changes — it feels like a good
balance between time and improvement. All in all, it took about 30 minutes 
(less than the time it took to write this post). It’s nothing ground-breaking
but making small improvements constantly helps keep the UX tight and gives
other developers good examples to reference.&lt;/p&gt;

&lt;p&gt;Hopefully this was helpful! I picked up most of this stuff from working
with others that had a good sense for design and playing around with it
on my own, but there are certainly some common patterns that are generally
applicable.&lt;/p&gt;

&lt;p&gt;If you liked this format, let me know on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt; and I’ll write up a few
more.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Myers-Briggs for Programming Styles</title>
   <link href="http://mdswanson.com/blog/2013/07/17/myers-briggs-for-programming-styles.html"/>
   <published>2013-07-17T00:00:00+05:30</published>
   <updated>2013-07-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/17/myers-briggs-for-programming-styles</id>
   <content type="html">&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Myers-Briggs_Type_Indicator&quot;&gt;Myers-Briggs Type Indicator&lt;/a&gt; assessment is a well-known test that is 
said to measure someone’s personality. You answer a series of questions and based 
on your results, you get a “type” — a four letter code like &lt;code class=&quot;highlighter-rouge&quot;&gt;ESTJ&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;INFP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is that people fall somewhere along a range on four pairs of
preferences (“dichotomies” is the fancy term). By answering a bunch of questions, the
test determines which end best fits your personality.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Extraversion (E) --- (I) Introversion
     Sensing (S) --- (N) Intuition
    Thinking (T) --- (F) Feeling
     Judging (J) --- (P) Perception
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m not really into the Myers-Briggs or anything, but some people are!&lt;/p&gt;

&lt;p&gt;I’ve definitely heard things like “Oh, I won’t get along with Joe because he is 
an &lt;code class=&quot;highlighter-rouge&quot;&gt;INTP&lt;/code&gt; and I’m &lt;code class=&quot;highlighter-rouge&quot;&gt;ENFP&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;It got me thinking: could you do a similar test tailored to programming 
styles?&lt;/p&gt;

&lt;p&gt;Everyone has their own personality when developing, their own nuances and conventions 
that they follow. And sometimes they aren’t compatible across teams.&lt;/p&gt;

&lt;p&gt;If someone favors functionality programming and loves using it everywhere, that could
create friction amongst a group of OO diehards. If I value testing more than you, we 
might argue about a perceived lack of test coverage, neither one of us willing to back
down.&lt;/p&gt;

&lt;p&gt;Obviously, I am not a psychologist but I would be interested in taking such a test.&lt;/p&gt;

&lt;p&gt;The test questions could feature a bunch of code snippets and you pick which options
you prefer. Maybe the Myers-Briggs for Programming Styles dichotomies would be 
something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Convention/Magic (M) --- (V) Configuration/Verbosity
        Functional (F) --- (O) Object Oriented
       Readability (R) --- (P) Performance
Quality/Robustness (Q) --- (S) Speed/Productivity
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I think some of these traits change depending on context and specific projects, but
I can say that generally speaking I am a &lt;code class=&quot;highlighter-rouge&quot;&gt;VORS&lt;/code&gt; on this made-up scale. Maybe this
would be useful to know if you were going to work with me or we were always getting
into technical arguments. If nothing else, it would be fun to measure!&lt;/p&gt;

&lt;p&gt;What do you think? Has something like this been done before?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Motivation Hacker</title>
   <link href="http://mdswanson.com/writeup/2013/07/12/the-motivation-hacker.html"/>
   <published>2013-07-12T00:00:00+05:30</published>
   <updated>2013-07-12T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/07/12/the-motivation-hacker</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
According to research science, motivation can be modeled by an equation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Motivation  =   Expectancy x Value    
               ---------------------    
               Impulsiveness x Delay    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By tweaking the parameters (“hacking” in the parlance of today’s self-help books) 
using different techniques, we can increase motivation and achieve goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
It was an interesting read and I picked up a few new techniques that seemed
novel.&lt;/p&gt;

&lt;p&gt;One of the main concepts in the book is “success spirals”. By increasing
your confidence that you will achieve a goal, you raise your Expectancy and
improve motivation. By building up small victories, you make success the norm;
the goals can be very small — things like exercising for one second a day.&lt;/p&gt;

&lt;p&gt;The other technique I liked was “precommitment”. This one reduces Impulsiveness
by limiting your future options so you can’t weasel out when the time comes. This
includes things like scheduling events way in advance, prepaying and setting an
unreversible “punishment” if you fail to achieve something by a certain date.&lt;/p&gt;

&lt;p&gt;Even if you aren’t into motivation hacking, the book was entertaining as the
author detailed his quest to achieve 18 goals (while writing this book).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I’m a sucker for this kind of motivation and self-improvement book that has a
splash of psychology thrown in, but I thought this was a very refreshing and
practical look at motivation. If you have set goals in the past and not achieved
them, I think you can use the Motivation Equation to explain (or at least 
rationalize!) why you went off the rails.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Confident Ruby</title>
   <link href="http://mdswanson.com/writeup/2013/07/12/confident-ruby.html"/>
   <published>2013-07-12T00:00:00+05:30</published>
   <updated>2013-07-12T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/07/12/confident-ruby</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Confident codes tells a story without getting bogged down in edge-cases or
excessive defensive programming habits.&lt;/p&gt;

&lt;p&gt;By improving timid code and other distractions, we can write better code that
others (or our future selves) will be able to jump right into.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Some of the techniques seemed a bit esoteric to me — especially the stuff
on conversion protocols — but overall there was good, practical advice
that I can incorporate into my code.&lt;/p&gt;

&lt;p&gt;The sections that I found most beneficial were on policy objects and making
better use of blocks and yielding (something I am pretty bad at).&lt;/p&gt;

&lt;p&gt;The book follows a pattern template; not the greatest for flow but easier to search
through as a reference. I wish I could go back in time and pass a few copies of
this around before my most recent Ruby project — there was a real lack of
confident code and the notorious &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; affliction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
It is a good source of learning material for an intermediate Ruby programmer; some
of the more generic patterns (Null Object, Policy Object, Parameter Object) are
applicable outside of Ruby, but there is quite a bit of Ruby-specific stuff.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>So Good They Can't Ignore You</title>
   <link href="http://mdswanson.com/writeup/2013/07/08/so-good-they-cant-ignore-you.html"/>
   <published>2013-07-08T00:00:00+05:30</published>
   <updated>2013-07-08T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/07/08/so-good-they-cant-ignore-you</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
“Follow your passion” is actually not good advice if you are seeking happiness
with your job. Passion is rare, dangerous, and oftentimes only comes with mastery.&lt;/p&gt;

&lt;p&gt;A better approach is to focus on improving your skills, gaining more control, and
finding a mission.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
This is my favorite book of the year by far.&lt;/p&gt;

&lt;p&gt;Newport takes a very academic approach by making a hypothesis and then providing
evidence to support his views. He argues that “passion mindset” — in which
you focus on what value your job is offering to you — leads to unhappiness
and constantly hoping for a magically new job just around the corner that will fix
everything.&lt;/p&gt;

&lt;p&gt;Instead, Newport argues we should adopt a “craftsman mindset” and focus on the
value you can offer to the world through your job. By increasing your skill level
in areas that are “rare and valuable” you gain career capital that you can leverage
to create work that you love.&lt;/p&gt;

&lt;p&gt;By not focusing on getting a great job, but instead looking at the &lt;em&gt;traits&lt;/em&gt; of 
great jobs, we can think about them in terms of basic supply and demand. To get
a great job, you must have something of great value to offer. And deliberate 
practice and a focus on being “so good they can’t ignore you” is a highly effective
strategy for acquiring valuable skills. You can then use those skills to increase
aspects of a job that are scientifically-proven to make you happier, like control, 
autonomy, and expertise.&lt;/p&gt;

&lt;p&gt;The book also makes a strong argument against the “courage culture” of today’s 
resources for landing a dream job. If you have not built up the skills to succeed
in a new field, passion and the courage to quit your job are not going to magically
make you successful or fulfilled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
If you’ve ever daydreamed about how much better your life would be if you were
only working at that cool company, you should seriously read this book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microinteractions</title>
   <link href="http://mdswanson.com/writeup/2013/07/08/microinteractions.html"/>
   <published>2013-07-08T00:00:00+05:30</published>
   <updated>2013-07-08T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/07/08/microinteractions</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Microinteractions are the small moments of action we take in a product — 
the details that together make up a feature. The design of these interactions can
make a product more memorable, more enjoyable and easier to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Really good — I think this book fills a missing gap for a skill set that is 
becoming increasingly important. This kind of delightful UX is going to be a key
differentiator for products and this book is a must-read.&lt;/p&gt;

&lt;p&gt;The book wastes no time diving into the structure of a &lt;a href=&quot;http://microinteractions.com/&quot;&gt;microinteraction&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trigger - either user or system initiated, something has to kick off the interaction&lt;/li&gt;
  &lt;li&gt;Rules - the constraints for an interaction (what can or can’t be done, what order, how to prevent errors)&lt;/li&gt;
  &lt;li&gt;Feedback - help the users understand the Rules of the microinteraction, determine the best channel for communication (visual, audio, haptic)&lt;/li&gt;
  &lt;li&gt;Loops / Modes - use long loops to remember past interactions or improve on them over time; limit modes to infrequent actions as much as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these steps are broken down and explained with plenty of examples for real
applications. There is also a really great list of questions to help fix dull
microinteractions that I wish I had for several of my past projects at work.&lt;/p&gt;

&lt;p&gt;This is a great reference that I can point to when trying to describe how
to build a delightful user experience. It is a concept that is hard to explain
and having a common language and framework will be very helpful going forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Any developer or designer that wants to work on user-facing products should read
this book ASAP and then go try to implement the concepts in their own work.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Crush It</title>
   <link href="http://mdswanson.com/writeup/2013/07/07/crush-it.html"/>
   <published>2013-07-07T00:00:00+05:30</published>
   <updated>2013-07-07T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/07/07/crush-it</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Success comes from out-working your competition. If you are really passionate
about something, you can make money at it — but it will be a long and
unglamorous road.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Very mixed opinions on this one. It was very motivational and I appreciated
concrete steps for building a brand and audience (although some of it seemed
a little spammy).&lt;/p&gt;

&lt;p&gt;But at the same time, I didn’t really learn any new skills or gain perspective.&lt;/p&gt;

&lt;p&gt;I was also convinced by the next book I read — &lt;a href=&quot;http://mdswanson.com/writeup/2013/07/08/so-good-they-cant-ignore-you.html&quot;&gt;So Good They Can’t Ignore You&lt;/a&gt;
— that following your passionate is not a good idea and doesn’t even lead to
happiness in your work life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
If you are dead-set on trying out the “lifestyle design” path that is popular
these days, I think this book is helpful and provides a place to start. Just be
sure to be a bit skeptical as you go.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The First 20 Hours</title>
   <link href="http://mdswanson.com/writeup/2013/07/05/the-first-20-hours.html"/>
   <published>2013-07-05T00:00:00+05:30</published>
   <updated>2013-07-05T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/07/05/the-first-20-hours</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
You aren’t going to become an expert at most things in only 20 hours, but that’s
okay. There is a minimum level of competency that you can achieve that turns a
hobby into something enjoyable.&lt;/p&gt;

&lt;p&gt;This book includes a list of tips for rapid skill acquisition and a collection
of diary-style chapters about how the author used the tips to learn things like
web development, playing go, and yoga.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
It was a fun read. The framework is laid out in the first few chapters; steps
include choosing a project you enjoy, acquiring necessary tools, and defining a 
clear target level of performance.&lt;/p&gt;

&lt;p&gt;The book goes a bit astray when it switches to examples. The concept of using the
author’s own experience picking up new skills is interesting — but I was left
wanting more insight. When Kaufman mentioned researching the best materials 
for each skill, I wanted to know more about his process for finding the 
books: what did he search for, how did he find helpful experts, etc.&lt;/p&gt;

&lt;p&gt;The examples focused too much on just recounting what the author did; this was
frustrating since the majority of the book was devoted to these recaps.&lt;/p&gt;

&lt;p&gt;Overall, I think the first two sections about tips for rapid skill acquisition
and improving your learning ability are worthwhile. I would recommend reading
those and then maybe one of the examples that most interests you (and skipping
the rest).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
If you are looking to become competent in a new skill, I think the book is worth
a ready; just don’t hope for a magic solution to that will help you master anything
without putting in long hours.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Delightful UX: Medium's Time to Read</title>
   <link href="http://mdswanson.com/blog/2013/07/04/delightful-ux-mediums-time-to-read.html"/>
   <published>2013-07-04T00:00:00+05:30</published>
   <updated>2013-07-04T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/07/04/delightful-ux-mediums-time-to-read</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://medium.com&quot;&gt;Medium&lt;/a&gt; recently implemented a simple feature that I think is 
really great.&lt;/p&gt;

&lt;p&gt;At the top of every blog post, there is a blurb telling you how long the
article will take to read — this post is a “3 min read” or a “12 min read”.&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;a href=&quot;https://medium.com/maybe-its-fiction/f7bbc3aa2419&quot;&gt;
    &lt;img alt=&quot;Medium's Time to Read&quot; src=&quot;/static/medium-time-to-read.png&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;As soon as I noticed this, I smiled.&lt;/p&gt;

&lt;p&gt;The implementation is probably trivially easy, something like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minutes_to_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;word_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AVG_WORDS_PER_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;round&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But what it shows is that Medium has a deep understanding of how people consume
blog posts.&lt;/p&gt;

&lt;p&gt;Do you ever glance at the scroll bar to see if a post is a huge essay or a quick 
hitter you can read while your code is compiling? Because I do all the time. And 
I’ve never seen this “Time to Read” feature on any other blog platform.&lt;/p&gt;

&lt;p&gt;Additionally, it keeps readers on Medium for longer — even if you are
only mildly interested in an article, if you know it’s only going to take 2
minutes to finish, you’ll stick it out. Since Medium’s whole vision seems to 
be centered around high quality content, preventing a sub-10 second bounce seems 
worthwhile.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Newer models of the Kindle have a similar feature: using your past page turning
speed to predict when you will finish your next chapter (or even the whole book).&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Kindle's Time Left in Chapter/Book&quot; src=&quot;/static/kindle-time-to-read.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Kindle users reap similar benefits — I can decide to pause reading for the 
night or press on a few more minutes to reach a natural stopping point at the 
chapter break.&lt;/p&gt;

&lt;p&gt;And Amazon benefits from me seeing that I have only 20 minutes left in this
book, but eight days of vacation left — time to go order a new book.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It’s a small thing, but &lt;strong&gt;the sum of small UX delights leads to a great product&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Have you seen any other small bits of awesome UX lately? Hit me up 
on &lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt;, I’d love to hear about it.&lt;/p&gt;

&lt;p&gt;By the way, this post should have taken you 2 minutes to read.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll 201: Beyond Hello World</title>
   <link href="http://mdswanson.com/blog/2013/06/03/jekyll-201.html"/>
   <published>2013-06-03T00:00:00+05:30</published>
   <updated>2013-06-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/06/03/jekyll-201</id>
   <content type="html">&lt;p&gt;There is &lt;a href=&quot;http://benhowdle.im/2013/06/02/jekyll-in-15-minutes/&quot;&gt;plenty of material&lt;/a&gt; &lt;a href=&quot;http://destroytoday.com/blog/hello-world-im-jekyll/&quot;&gt;online showing you&lt;/a&gt; how to 
&lt;a href=&quot;http://danielmcgraw.com/2011/04/14/The-Ultimate-Guide-To-Getting-Started-With-Jekyll-Part-1/&quot;&gt;setup a Jekyll blog&lt;/a&gt;, &lt;a href=&quot;http://ianreah.com/2012/12/27/An-introduction-to-Jekyll.html&quot;&gt;write your first post&lt;/a&gt; and 
&lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&quot;&gt;add a custom domain&lt;/a&gt;. But rarely do these tutorials go past
the &lt;a href=&quot;https://github.com/burkemw3/Heroku-Jekyll-Hello-World&quot;&gt;“Hello World” stage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So it’s time for Jekyll 201!&lt;/p&gt;

&lt;p&gt;I’ve been using Jekyll for blogs, meetup groups, prototyping, and microsites for
nearly 3 years so I wanted to share some more advanced techniques that aren’t
covered in the docs.&lt;/p&gt;

&lt;h2 id=&quot;partials&quot;&gt;Partials&lt;/h2&gt;
&lt;p&gt;The basics of partials (&lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; in Jekyll parlance) are covered in the 
docs: &lt;a href=&quot;http://jekyllrb.com/docs/templates/#includes&quot;&gt;http://jekyllrb.com/docs/templates/#includes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are coming from a traditional web development background, you might want
to know how to pass in data to a partial. Maybe you have some book 
recommendations in your sidebar, like so:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;book-recommendations&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recommendation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/img/pragmatic-programmer.png&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://pragprog.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Pragmatic Programmer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;My favorite book about programming pragmatically&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recommendation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/img/getting-real.png&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://gettingreal.37signals.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Getting Real&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;A book about Getting Real and stuff...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can make a partial (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/recommendation.html&lt;/code&gt;) so you aren’t 
copy-pasting HTML code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recommendation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ img_url }}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ summary }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then use it like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;book-recommendations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/img/pragmatic-programmer.png&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://pragprog.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pragmatic Programmer&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My favorite book about programming pragmatically&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% include &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recommendation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}

  {% assign img_url = &quot;/img/getting-real.png&quot; %}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://gettingreal.37signals.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Getting Real&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% assign &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A book about Getting Real and stuff...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% include &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recommendation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can re-use the HTML template but this is still not so great. Liquid doesn’t 
have the ability to pass in a hash of local objects (like in Rails), instead we 
have to rely on essentially global variables.&lt;/p&gt;

&lt;h2 id=&quot;abusing-_configyml&quot;&gt;Abusing &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A better way to handle the above case of book recommendations is to store the
underlying data in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. This file is typically used to store configuration
options for Jekyll, but any extra YAML data you put in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; will be 
accessible in templates via the &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; would look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# General Jekyll Config
auto: true
pygments: true
exclude: [&quot;.gitignore&quot;, &quot;readme.md&quot;, &quot;Gemfile&quot;, &quot;Gemfile.lock&quot;]

# Book recommendations
recommendations:
  - img_url: /img/pragmatic-programmer.png
    url: http://pragprog.com
    name: Pragmatic Programmer
    summary: |
      My favorite book about programming pragmatically

  - img_url: /img/getting-real.png
    url: http://gettingreal.37signals.com
    name: Getting Real
    summary: |
      A book about Getting Real and stuff...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Caveats: changes to this file are not picked up when running Jekyll locally with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;--auto&lt;/code&gt; flag, so you need to regenerate the site manually for changes to
take effect (several hours of my life I will never get back).&lt;/p&gt;

&lt;p&gt;Make sure all of your data is valid YAML (here is a good &lt;a href=&quot;http://yamllint.com/&quot;&gt;linter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then in your template, you can loop over all the book recommendations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;book-recommendations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recommendation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recommendations&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
    {% include recommendation.html %}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And update the partial to use properties on &lt;code class=&quot;highlighter-rouge&quot;&gt;recommendation&lt;/code&gt;…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recommendation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ recommendation.img_url }}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ recommendation.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ recommendation.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ recommendation.summary }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much better! And now, when you want to add a new book, just add it to the list
in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and it will get rendered when you regenerate the site.&lt;/p&gt;

&lt;p&gt;I’ve used this technique several times with success, here are a few examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://indystartuplab.org&quot;&gt;Indy Startup Lab&lt;/a&gt;: listing the members and projects, &lt;a href=&quot;https://github.com/IndyStartupLab/indystartuplab.org&quot;&gt;repo here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://letsworkhappier.com&quot;&gt;Let’s Work Happier&lt;/a&gt;: microsite with app directory, &lt;a href=&quot;https://github.com/sep/letsworkhappier.com&quot;&gt;repo here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-extra-fields-to-posts&quot;&gt;Adding extra fields to posts&lt;/h2&gt;
&lt;p&gt;Pages have some default attributes that you can set in the &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front-matter&lt;/a&gt;;
these include the basics like permalink, title, categories, and tags.&lt;/p&gt;

&lt;p&gt;But you are not limited to just these fields. You can add any arbitrary data to
the Front-matter (it is just a block of YAML after all) and they will be exposed
on the &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Let’s say you write reviews on your blog sometimes and use Amazon Affiliates. Per
the affiliate guidelines, you need a disclaimer on your post stating that you
are participating in the program or the FCC will get mad.&lt;/p&gt;

&lt;p&gt;You could copy and paste it to the bottom of each Markdown post — but a better
way would be to set a custom attribute in the Front Matter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: &quot;My Favorite Gadgets Reviewed&quot;
disclaimer: true
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By adding &lt;code class=&quot;highlighter-rouge&quot;&gt;disclaimer&lt;/code&gt; to the Front-matter, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;page.disclaimer&lt;/code&gt; in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; layout to display our affiliate text at the bottom of the post when
necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;  {% if page.disclaimer %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disclaimer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        Disclaimer: Matt Swanson is a participant in the Amazon Services LLC 
        Associates Program, an affiliate advertising program designed to provide 
        a means for sites to earn advertising fees by advertising and linking 
        to amazon.com
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endif %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This technique is pretty powerful, here a few other ideas you can use it for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lostdecadegames.com/blog-author-attribution-using-jekyll/&quot;&gt;Author attribution&lt;/a&gt;: useful for multiple author blogs/sites&lt;/li&gt;
  &lt;li&gt;Enable/disable Disqus/LiveFyre comments on a per-post basis&lt;/li&gt;
  &lt;li&gt;Add summary, subtitles, per-post header images&lt;/li&gt;
  &lt;li&gt;Display a banner for your new startup at the bottom of posts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ghetto-asset-pipeline&quot;&gt;Ghetto Asset Pipeline&lt;/h2&gt;
&lt;p&gt;A little trick I picked up from the &lt;a href=&quot;http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/&quot;&gt;DevelopmentSeed blog&lt;/a&gt; — you can use
&lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; to concatenate your CSS files.&lt;/p&gt;

&lt;p&gt;Move your CSS files into the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder (I like to put them in a &lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;
sub-folder). Then make an &lt;code class=&quot;highlighter-rouge&quot;&gt;all.css&lt;/code&gt; file with an empty Front Matter, here is the
one from the blog you are currently reading.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
---
{% include css/font-awesome.css %}
{% include css/base.css %}
{% include css/skeleton.css %}
{% include css/screen.css %}
{% include css/layout.css %}
{% include css/syntax.css %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Voilà! Six asset requests down to one!&lt;/p&gt;

&lt;h2 id=&quot;custom-plugins&quot;&gt;Custom Plugins&lt;/h2&gt;
&lt;p&gt;The new Jekyll docs have a great section on &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;writing plugins&lt;/a&gt; with several
examples so I won’t dive into it here.&lt;/p&gt;

&lt;p&gt;Be warned — you cannot use custom plugins with GitHub pages. I am of the opinion
that GitHub pages is a huge benefit to using Jekyll, so be careful about relying
on plugins.&lt;/p&gt;

&lt;p&gt;Often times you can reproduce the functionality with Javascript or a Modular
Component (see below). Personally, whenever I reach for a custom plugin I step
back and evaluate whether I really need the functionality at all — usually the
answer is no.&lt;/p&gt;

&lt;h2 id=&quot;building-modular-components&quot;&gt;Building Modular Components&lt;/h2&gt;
&lt;p&gt;Static sites, by design, are very limited. In a world where you can build an
entire business on a WordPress blog, Jekyll seems very simplistic.&lt;/p&gt;

&lt;p&gt;For the most part, I think this is good — I believe in putting the emphasis back
on content. But there are times when you miss some of the conveniences of heavier
content platforms.&lt;/p&gt;

&lt;p&gt;You can add some of this functionality back by using Modular Components. The 
basic concept is to write smaller services that your blog can interact with. By
offloading the backend work to other apps you can get around some of the limits
of a static site.&lt;/p&gt;

&lt;p&gt;The most discussed example is using a 3rd party comment system — so I will skip
that. Two other use cases that I think are more interesting are an email form
and a web-based post editor.&lt;/p&gt;

&lt;p&gt;For the email form, I created a simple &lt;a href=&quot;https://github.com/indy-software-artisans/jekyll-mailer&quot;&gt;Ruby app&lt;/a&gt; that accepts
cross-domain POSTs and sends emails to the officer list for a local meetup. The
Jekyll site just serves up the form with the action pointing to the mailer
app. Not perfect, but certainly better than setting up a whole CMS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developmentseed.org/blog/2012/june/25/prose-a-content-editor-for-github/&quot;&gt;Prose&lt;/a&gt; is an app that allows you to edit and create posts on GitHub
pages with a web interface by connecting to the GitHub API. I personally still
stick with the command line and SublimeText for writing my posts, but those of
you that miss having a WYSIWYG web editor for your content should check out
Prose.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Are there more Jekyll topics you want to see covered? Hit me up on 
&lt;a href=&quot;https://twitter.com/_swanson&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Intern &amp; New Hire Summer Reading List</title>
   <link href="http://mdswanson.com/blog/2013/05/31/summer-reading-list.html"/>
   <published>2013-05-31T00:00:00+05:30</published>
   <updated>2013-05-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/05/31/summer-reading-list</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/020161622X/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;&lt;img src=&quot;/static/pragmatic-programmer.jpg&quot; alt=&quot;The Pragmatic Programmer&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/020161622X/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt;&lt;br /&gt;
Andrew Hunt, David Thomas&lt;/p&gt;

&lt;p&gt;The Pragmatic Programmer is widely considered as one of the most important books for developers. 
Even though it was written over 10 years ago, it holds up extremely well over time because it 
focuses less of specific technologies and more on solid methodologies and fundamental skills.&lt;/p&gt;

&lt;p&gt;For a new developer, this book is a whirlwind tour that — in a manageable 250 pages — covers 
everything from getting the most out of your development tools to software design principles to career 
development and how to work in a team environment.&lt;/p&gt;

&lt;p&gt;Sections to pay close attention to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Communicate!&lt;/strong&gt;: a crash course in technical communications&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tracer Bullets&lt;/strong&gt;: write a barebones, end-to-end skeleton&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decoupling and the Law of Demeter&lt;/strong&gt;: smaller modules with minimal dependencies are good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Programming by Coincidence&lt;/strong&gt;: learn to program deliberately&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternative: &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0132350882/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;Clean Code&lt;/a&gt; (more focused on the mechanics of writing good code)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0596518382/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;&lt;img src=&quot;/static/apprenticeship-patterns.png&quot; alt=&quot;Apprenticeship Patterns&quot; /&gt;&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0596518382/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;Apprenticeship Patterns: Guidance for Aspiring Software Craftsman&lt;/a&gt;&lt;br /&gt;
Dave Hoover, Adewale Oshineye&lt;/p&gt;

&lt;p&gt;Following the Pattern Language format, this book focuses on the journey from beginner developer
to journeyman to master and introduces the concept of Software Craftsmanship. I was a little worried
that the authors were stalking me because so many of the “Context” sections captured exactly with how 
I felt during my first six months as a professional developer.&lt;/p&gt;

&lt;p&gt;This book is less popular than others, but it has been the most impactful book I’ve found for starting 
a career in software. There is so much fantastic advice in this book that it deserves to be more
known.&lt;/p&gt;

&lt;p&gt;Sections to pay close attention to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The Long Road&lt;/strong&gt;: keep your focus on the long term, value growth over salary&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find Mentors&lt;/strong&gt;: seek out and learn from those that are ahead of you&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create Feedback Loops&lt;/strong&gt;: how to get useful feedback&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Confront your Ignorance&lt;/strong&gt;: what to do when you identify a skill gap that you need for daily work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternative: &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/1934356344/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;The Passionate Programmer&lt;/a&gt; (more story/interview based)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0321721330/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;&lt;img src=&quot;/static/poodr.png&quot; alt=&quot;Practical Object-Oriented Design in Ruby&quot; /&gt;&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0321721330/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;Practical Object-Oriented Design in Ruby: An Agile Primer&lt;/a&gt;&lt;br /&gt;
Sandi Metz&lt;/p&gt;

&lt;p&gt;Don’t let the &lt;code class=&quot;highlighter-rouge&quot;&gt;in Ruby&lt;/code&gt; part of the title scare you off if you are in a .NET shop — there is plenty
of general purpose advice for designing software that is a joy to work with and easy to modify. Metz 
has a very friendly writing style and this book explains concepts with an ease that is lacking in other
books on the subject of design (I’m looking at you Gang of Four…).&lt;/p&gt;

&lt;p&gt;This book is a great introduction to some more advanced design concepts — dependency injection,
Tell Don’t Ask, role behavior, object composition — that doesn’t feel overwhelming. A new developer
won’t pick up and master every concept the first time, but it is good to get exposure as early as possible.&lt;/p&gt;

&lt;p&gt;Sections to pay close attention to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Deciding What Belongs in a Class&lt;/strong&gt;: introduction to SRP, code that is easy to change&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Writing Loosely Coupled Code&lt;/strong&gt;: managing dependencies and choosing dependency direction&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Creating Flexible Interfaces&lt;/strong&gt;: thinking about Messages&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Designing Cost-Effective Tests&lt;/strong&gt;: a gentle introduction to testing and TDD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternative: &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0321503627/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;Growing Object Oriented Software, Guided by Tests&lt;/a&gt; (more advanced with heavy emphasis on TDD)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The 30 Second Standup</title>
   <link href="http://mdswanson.com/blog/2013/05/29/the-30-second-standup.html"/>
   <published>2013-05-29T00:00:00+05:30</published>
   <updated>2013-05-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/05/29/the-30-second-standup</id>
   <content type="html">&lt;p&gt;The Three Pillars of Standup Meetings:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What did you do yesterday?&lt;/li&gt;
  &lt;li&gt;What are you doing today?&lt;/li&gt;
  &lt;li&gt;What is blocking your progress?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Everyone stands in a circle and takes their turn answering the questions. The whole meeting should 
last only a few minutes and gets everyone of the same page.&lt;/p&gt;

&lt;p&gt;But when you consider all the extra crap that gets talked about at a standup — the
&lt;em&gt;“Oh, did you remember to do X when you did Y?”&lt;/em&gt;, the &lt;em&gt;“I told you we should have done A, but the client
made us do B”&lt;/em&gt;, the &lt;em&gt;“By the way, can we add a new item type in Jira for tracking requirement changes?”&lt;/em&gt;,
the &lt;em&gt;“Let me tell you about every line of awesome code I wrote yesterday”&lt;/em&gt; — you are now approaching 
the 15 minute mark and the cost is breaching four-figures.&lt;/p&gt;

&lt;p&gt;So why do we follow this format? Is it the best way to communicate this information?&lt;/p&gt;

&lt;p&gt;To the best of my knowledge, we follow the Three Pillars because it was written down somewhere
and that’s how we learned it. It is a concise and prescriptive way to describe a best practice
and a near certain improvement over existing alternatives.&lt;/p&gt;

&lt;p&gt;But just because the official rules (gotta love all those rigid rules, eh? So agile!) state that 
you must go around the circle and answer all three questions doesn’t mean you should.&lt;/p&gt;

&lt;p&gt;Here’s a blueprint for a format I find more effective: &lt;strong&gt;The 30 Second Standup&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The 30 Second Standup reduces the Three Pillars to:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Okay, anyone blocked?”&lt;/em&gt; (crickets…) &lt;em&gt;“Alright, good standup!”&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But how will I know what everyone did yesterday?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try looking at the &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; or Jira. This encourages good commit messages and allows you to filter
out parts of the system that you are less focused on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Okay, how will I know what people will be working on next?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check the &lt;a href=&quot;http://www.sep.com/lk2009/chris-shinkle-embracing-kanban-how-kanban-has-impacted-sep/&quot;&gt;Kanban board&lt;/a&gt; or the &lt;a href=&quot;http://www.agileproductdesign.com/blog/the_new_backlog.html&quot;&gt;Story Map&lt;/a&gt;. Once the team learns to “read the board”, it will 
be clear what to work on next and you can check back anytime you want.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pillar 3 — &lt;em&gt;“what is blocking you?”&lt;/em&gt; — is only one that I’ve found to have justifiable 
value. You might think that a &lt;code class=&quot;highlighter-rouge&quot;&gt;BLOCKER!&lt;/code&gt; sticky note on the Kanban board will suffice, but most teams
need a designated “safe haven” for asking for help and getting an immediate follow-up action.&lt;/p&gt;

&lt;p&gt;This safe haven is especially important when you have a team of varying skill levels or that is
unfamiliar with each other. It is easy for a new developer to quietly struggle because they don’t
want to interrupt someone else or look stupid by asking for help.&lt;/p&gt;

&lt;p&gt;And sometimes, you don’t even know who to go to with your problem, so pitching it to the group is 
the fastest way to find out the next step.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So should every team switch to the 30 Second Standup? Absolutely not.&lt;/p&gt;

&lt;p&gt;Every team should continuously &lt;strong&gt;challenge dogmatic practices and reflect on their value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Don’t be afraid to tweak processes that aren’t working for your team. Don’t blindly follow the rules if
you can’t justify them to an outsider.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>You (yes you!) can make delightful products</title>
   <link href="http://mdswanson.com/blog/2013/05/08/delightful-software.html"/>
   <published>2013-05-08T00:00:00+05:30</published>
   <updated>2013-05-08T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/05/08/delightful-software</id>
   <content type="html">&lt;p&gt;You’ve probably heard about &lt;a href=&quot;http://37signals.com/svn/posts/3270-surprising-your-customers&quot;&gt;delighting your customers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A pleasant little surprise can convert someone into a &lt;a href=&quot;http://headrush.typepad.com/creating_passionate_users/&quot;&gt;die-hard fanatic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This idea has been popping up in my life a lot recently.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I ordered this &lt;a href=&quot;http://missionbelt.com/&quot;&gt;belt&lt;/a&gt; (after seeing it on Shark Tank – guilty pleasure) and 
when I opened the package there was a hand-written note. It probably took someone 20 seconds 
to do but it made me smile and I showed two other people.&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Mission Belt note&quot; src=&quot;http://localhost:4000/static/mission-belt-note.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I just finished up some contract work for a local &lt;a href=&quot;http://greyhousecoffee.com/&quot;&gt;coffee shop&lt;/a&gt;. Here’s what I got in the
mail after the project was completed:&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Greyhouse Box&quot; src=&quot;http://localhost:4000/static/greyhouse-box.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Are you frickin’ kidding me? A hand-calligraphified box? Filled with awesome treats?&lt;/p&gt;

&lt;p&gt;Think I’ll have to hem and haw about doing more work for them in the future? Nope.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I am a firm believer in the idea (some are &lt;a href=&quot;http://hbr.org/2010/07/stop-trying-to-delight-your-customers&quot;&gt;not&lt;/a&gt;) — but it always seemed like something
that was out-of-reach. Sure, Disney or Zappos or 37signals can delight! It’s in
their DNA and culture! I can’t think of a way to delight my users…&lt;/p&gt;

&lt;p&gt;You know what? It’s not that hard.&lt;/p&gt;

&lt;p&gt;Delighting users requires a bit of nuance (don’t get too cheesy…) — but you can do it!
You don’t have to be some UX prodigy or take a calligraphy class.&lt;/p&gt;

&lt;p&gt;I started making a deliberate effort to delight and it has been really fun. Not
only do I put a smile on the face of users, but I actually feel happier working on
the projects. One stupid little joke changes my whole attitude and motivation towards
progressing on the app.&lt;/p&gt;

&lt;p&gt;Here’s three examples from projects of mine. None of them took more than 30 minutes to
implement.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I asked five co-workers to write down 10 phrases that meant “good job”. I picked the
best ones and added a random “kudos” message to our &lt;a href=&quot;/morale/&quot;&gt;employee happiness app&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Random kudos message&quot; title=&quot;Nothing's ever gonna keep you down!&quot; src=&quot;http://localhost:4000/static/morale-delight.png&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In my &lt;a href=&quot;https://github.com/swanson/queue-runner&quot;&gt;TV episode tracker&lt;/a&gt;, when you run out of items to watch - you 
receive this playful jab. A little humor is always welcome.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;TV Zero&amp;trade;&quot; src=&quot;http://localhost:4000/static/queuerunner-delight.png&quot; /&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;When I started building my &lt;a href=&quot;https://github.com/swanson/stringer&quot;&gt;anti-social RSS reader&lt;/a&gt;, one of the first things I added
was this self-aware message in the footer — reminding myself to stop using the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Hey! Slacker!&quot; src=&quot;http://localhost:4000/static/stringer-delight.png&quot; /&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Your Homework:&lt;/strong&gt; Add one delightful thing to your work. No, seriously, do it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Expanding and Contracting</title>
   <link href="http://mdswanson.com/blog/2013/05/02/expanding-contracting.html"/>
   <published>2013-05-02T00:00:00+05:30</published>
   <updated>2013-05-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/05/02/expanding-contracting</id>
   <content type="html">&lt;p&gt;I’ve been thinking about the concept of expansion and contraction lately.&lt;/p&gt;

&lt;h3 id=&quot;at-a-developer-level&quot;&gt;At a Developer Level&lt;/h3&gt;
&lt;p&gt;Developers (okay, at least me…) seem to follow an &lt;strong&gt;Expansion/Contraction Cycle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We pick up a new idea and explore, expanding our abilities.&lt;/p&gt;

&lt;p&gt;If I have toyed around with &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember.js&lt;/a&gt;, I may be &lt;em&gt;capable&lt;/em&gt; of doing a client-side MVC app — but am I really 
&lt;em&gt;suitable&lt;/em&gt;? Am I the right person for the job? Is Ember.js even the right tool for the project?&lt;/p&gt;

&lt;p&gt;Hopefully, this expansion is accompanied by a phase of contraction — culling down the less successful concepts.&lt;/p&gt;

&lt;p&gt;It is great to learn new stuff, but make sure you periodically survey what you’ve found and determine which
parts are really valuable.&lt;/p&gt;

&lt;h3 id=&quot;at-a-company-level&quot;&gt;At a Company Level&lt;/h3&gt;
&lt;p&gt;There has been some discussion at work recently about standardizing some development processes. Not
any big top-down bureaucracy stuff, but rather making a more deliberate effort to default projects to
use techniques and practices that we’ve found to be beneficial.&lt;/p&gt;

&lt;p&gt;I was again reminded of the cycle. A team tries out a new way to track project progress or a different way
of doing code reviews — they expand their capabilities. Each project does some exploration to find alternative
ways to do things.&lt;/p&gt;

&lt;p&gt;One team tries two week sprints, another tries a new work management tool. We can now generate real-time
burndown charts based on git commits — but is that the best way to communicate project status to the client?&lt;/p&gt;

&lt;p&gt;There is strain on the teams from increasing capability without keeping an eye towards suitability. People
thrash around trying to figure out the Right Way to enter a bug into the system. We become dogmatic about
processes that no longer provide value.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Both phases of the Expansion/Contraction Cycle are necessary.&lt;/p&gt;

&lt;p&gt;Without expansion, you will hover around a &lt;a href=&quot;http://en.wikipedia.org/wiki/Maxima_and_minima&quot;&gt;local maxima&lt;/a&gt; — expending large amounts of time and effort 
for minimal gain. Without contraction, you drift around in a sea of endless options and have only surface-level
knowledge of anything.&lt;/p&gt;

&lt;p&gt;Near the phase transitions, tension occurs.&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Expansion / Contraction Cycle&quot; src=&quot;http://localhost:4000/static/cycle.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Ever feel like you are just jumping between tools and concepts and can hardly keep up? Maybe you aren’t
cut out for this programming thing after all? You are near the end of expansion phase — it is probably time to 
take stock and dive into the most promising items.&lt;/p&gt;

&lt;p&gt;Do you feel stagnant? Bored? In your own little bubble? You are at the end of a contraction phase — go try out
that new framework or grab that book you’ve been meaning to read.&lt;/p&gt;

&lt;p&gt;It is okay to feel these emotions as you ride along the cycles.&lt;/p&gt;

&lt;p&gt;By being aware of this cycle, you can accelerate the transitions to keep from being stuck in either phase for too long.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Not Quit</title>
   <link href="http://mdswanson.com/blog/2013/04/17/how-to-not-quit.html"/>
   <published>2013-04-17T00:00:00+05:30</published>
   <updated>2013-04-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/04/17/how-to-not-quit</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;1) Make friends with others who make software, and share your in-progress work with each other frequently.&lt;/p&gt;

  &lt;p&gt;2) Learn to think of [1] – rather than the front page of HN/TechCrunch – as the destination of your work.&lt;/p&gt;

  &lt;p&gt;Look at it this way: if all goes well, they will eventually come to &lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shamelessly lifted from &lt;a href=&quot;http://www.amazon.com/Art-Fear-Observations-Rewards-Artmaking/dp/0961454733&quot;&gt;Art &amp;amp; Fear: Observations On the Perils (and Rewards) of Artmaking&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Changing Plans</title>
   <link href="http://mdswanson.com/blog/2013/04/10/changing-plans.html"/>
   <published>2013-04-10T00:00:00+05:30</published>
   <updated>2013-04-10T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/04/10/changing-plans</id>
   <content type="html">&lt;p&gt;There is some friction between agile methodologies and the desire for
upfront formal requirements that has really been bugging me lately.&lt;/p&gt;

&lt;p&gt;I often find myself wanting to have my cake and eat it too: I want clear and
final requirements, but I don’t want to be forced to design an entire system
upfront and drown in UML diagrams.&lt;/p&gt;

&lt;p&gt;Part of this stance is due to the fear of change; the desire to not code
yourself into a corner later on in the project. No one wants to tell
their boss (or worse, their client) that they’ve picked a design that doesn’t
accommodate the new changes that need to be made.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You will never know less [about your software] than you do now. &lt;cite style=&quot;float: right; display: block;&quot;&gt;&lt;a href=&quot;http://sandimetz.com/&quot;&gt;Sandi Metz&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a scary thought!&lt;/p&gt;

&lt;p&gt;There will never be a time on this project when you will know less about how
changes will impact the rest of the system than &lt;strong&gt;right now&lt;/strong&gt;. Only with time 
and experience with the project will you begin to fully understand the 
consequences of your earlier design choices.&lt;/p&gt;

&lt;p&gt;So should we just never code anything and twiddle our thumbs? Of course not.&lt;/p&gt;

&lt;p&gt;But what can we do? What are some reasonable steps we can take to build a 
flexible system (but not end up with a pile of XML configuration files)?&lt;/p&gt;

&lt;h3 id=&quot;recognize-and-manage-dependencies&quot;&gt;Recognize and manage dependencies&lt;/h3&gt;

&lt;p&gt;Dependency Injection (DI) gets a bad wrap and that is mainly because of some 
hairy DI &lt;em&gt;frameworks&lt;/em&gt; that do a bunch of auto-wiring and other black magic. The 
principle of Dependency Injection is actually pretty simple: pass in objects 
you depend on as arguments.&lt;/p&gt;

&lt;p&gt;Change from this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Appraisal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComicBook&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comicBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Appraisal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comicBookId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comicBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComicBookFinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comicBookId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputePrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentageModifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComicBookGrader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comicBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comicBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentageModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Appraisal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICollectible&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IGrader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectableGrader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Appraisal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICollectable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IGrader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectableGrader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectableGrader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectableGrader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputePrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentageModifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectableGrader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentageModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Did I have to define a Registry in an XML file? Is there some DI Container
framework I have to setup? Nope, just a constructor argument.&lt;/p&gt;

&lt;p&gt;Maybe we never need to appraise other types of collectibles with this app. But 
it was a trivial change and it will save us later down the road when the client 
now wants to expand to include Action Figures.&lt;/p&gt;

&lt;p&gt;And as a nice little bonus, the second version is way easier to test.&lt;/p&gt;

&lt;h3 id=&quot;build-re-usable-modules&quot;&gt;Build re-usable modules&lt;/h3&gt;

&lt;p&gt;Single Responsibility Principle (SRP) is another hotly-debated pattern in 
software design. I think this is because it is really damn confusing.&lt;/p&gt;

&lt;p&gt;If you are asked, “What is the Single Responsibility of this class?” and you
respond with “Well, it manages all of the business logic. That is the one thing
it does!”, you will probably get yelled at.&lt;/p&gt;

&lt;p&gt;If you trace the &lt;a href=&quot;http://en.wikipedia.org/wiki/Responsibility-driven_design&quot;&gt;origin story of SRP&lt;/a&gt;, however, you will find the intention 
is a class that “has responsibilities that fulfill its purpose”. Nothing about one
discrete job, but rather that the class as a whole is cohesive.&lt;/p&gt;

&lt;p&gt;Well great! Except what the heck is a “cohesive class”?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.poodr.info/&quot;&gt;Sandi Metz&lt;/a&gt; has an interesting technique that has been helpful to me: 
to help identify if a class is cohesive or not, imagine it as someone you are
interrogating. For each public method, ask the object in the form of a question:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuarterlySalesReport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FiscalQuarter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SalesQuarter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sales&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllSales&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MostProfitableProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;“Mr. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuarterlySalesReport&lt;/code&gt;, what sale quarter are you for?”&lt;/p&gt;

&lt;p&gt;“Mr. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuarterlySalesReport&lt;/code&gt;, what are all of your sales?”&lt;/p&gt;

&lt;p&gt;“Mr. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuarterlySalesReport&lt;/code&gt;, what was the most profitable product?”&lt;/p&gt;

&lt;p&gt;The first two questions seem reasonable.&lt;/p&gt;

&lt;p&gt;The third seems a bit out of place. There are many other objects that you might 
want to ask this same question to — a &lt;code class=&quot;highlighter-rouge&quot;&gt;YearlySalesReport&lt;/code&gt;, a 
&lt;code class=&quot;highlighter-rouge&quot;&gt;StoreSalesReport&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductCatalogue&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Instead, we could ask the &lt;code class=&quot;highlighter-rouge&quot;&gt;QuarterlySalesReport&lt;/code&gt; for the list of sales and pass
that to a &lt;code class=&quot;highlighter-rouge&quot;&gt;ProfitCalculator&lt;/code&gt;. When the company expands overseas and we have
to consider international tariffs and customs fees when calculation our profit,
we will be thankful we only need to make changes in one place.&lt;/p&gt;

&lt;p&gt;If you find yourself asking questions don’t seem reasonable, this is a
sign that your class is not cohesive and is holding on to too much behavior. Try
extracting that logic in a smaller, re-usable piece.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Requirement changes will happen. We cannot anticipate how a project’s plan may
change, but we can take modest steps to make our systems more flexible and
better equipped to handle it.&lt;/p&gt;

&lt;p&gt;Do not fear change, but rather embrace it and accept that it is a part of the 
process.&lt;/p&gt;

&lt;p&gt;Software that doesn’t change is software that isn’t used. And I, for one, would
much rather work on projects that are actually used than a perfectly specified 
piece of adandonware.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Are Your Lights On?</title>
   <link href="http://mdswanson.com/writeup/2013/04/05/are-your-lights-on.html"/>
   <published>2013-04-05T00:00:00+05:30</published>
   <updated>2013-04-05T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2013/04/05/are-your-lights-on</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Engineers love problem solving. We love coming up with solutions. We are
fascinated by juicy problems, ones that stretch our intellect as we formulate
a fix.&lt;/p&gt;

&lt;p&gt;However, if we rush in with solutions before we correctly define the problem
(and who the client  we are trying to satisfy), we will end up solving the wrong
problem. By stopping and thinking  before diving into implementation, we can
avoid this costly mistake.&lt;/p&gt;

&lt;p&gt;Most of time, we are tasked with solving the problems of &lt;em&gt;others&lt;/em&gt;, not
ourselves. Making a mental  shift from “Problem Solver” to “Solver of Problems”
allows us to focus on finding who is impacted by a problem and identifying the
real story behind the problem. There is rarely one problem that can be solved,
but rather multiple parties that must come to a mutually acceptable resolution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book uses stories to help answer the following questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the problem? Whose problem is it? Where does this problem come from?&lt;/li&gt;
  &lt;li&gt;Do we really want to solve this problem?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot of really eye-opening lessons. One in particular was very
topical for my current project:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t mistake a solution method for a problem definition — especially if
it’s your own solution method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are some interesting ideas that I think will make their way into my
“problem vocabulary”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Phantom problem&lt;/strong&gt; - a problem is a difference between how something is
desired vs how it is perceived; a phantom problem is often attributed to
perception, you can change the perception to solve the problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Misfit&lt;/strong&gt; - a solution that superficially solves the problem, but is not 
usable for those that have to live with it; try to identify these before 
implementing a solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the most influential section to me was on forcing yourself to consider that
sometimes &lt;em&gt;you&lt;/em&gt; are the source of  the problem. If you can shift the source to
yourself, you have complete control over resolving it — it won’t solve the
problem for everyone, but you can go about your life without letting it affect
you anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I found this book on David Heinemeier Hansson’s list of &lt;a href=&quot;http://37signals.com/svn/posts/3375-the-five-programming-books-that-meant-most-to-me&quot;&gt;five most influence
programming books&lt;/a&gt; and I am really glad I read it. It is a short book
— I finished it in two sittings — and I would recommend it to anyone
dealing with arguments about solutions or confusion about problems.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>More Complicated Than It Needs To Be</title>
   <link href="http://mdswanson.com/blog/2013/04/02/more-complicated-than-it-needs-to-be.html"/>
   <published>2013-04-02T00:00:00+05:30</published>
   <updated>2013-04-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/04/02/more-complicated-than-it-needs-to-be</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Once you’ve hit the point where a simpler pattern isn’t working for you anymore and you have to start using the more complicated one, [there’s a natural tendency] to then always reach for the complicated one in other situations where the simple one would be just fine. &lt;cite style=&quot;float: right;&quot;&gt;&lt;a href=&quot;http://rubyrogues.com/097-rr-book-club-patterns-of-enterprise-architecture-with-martin-fowler/&quot;&gt;Martin Fowler&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Boss needs an app to capture employee suggestions — we can’t use a cardboard box with 
a cut-out slot, we are a software company!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuggestionsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:boss_only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;except: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@suggestions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;suggestions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestions&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@suggestions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Respository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Resque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CacheSuggestionJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cache_not_warm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@suggestions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SuggestionDecorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decorate_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@suggestions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FormBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:idea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SuggestionSubmitter&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;suggest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Resque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NotifyBossJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intern?&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Resque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AddToDailyEmailDigestJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:thank_you&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:invalid_suggestion_attempt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                 &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error_messages&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sometimes simple is better.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuggestionBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:form&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/suggest&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;suggestion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:idea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The Boss ♥'s Dropbox&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~/Dropbox/suggestion_box.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suggestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Thanks!&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Too Much Information</title>
   <link href="http://mdswanson.com/blog/2013/03/26/too-much-information.html"/>
   <published>2013-03-26T00:00:00+05:30</published>
   <updated>2013-03-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/03/26/too-much-information</id>
   <content type="html">&lt;p&gt;&lt;em&gt;“So how long will this task take?”&lt;/em&gt; An innocent question from the client at a 
status meeting.&lt;/p&gt;

&lt;p&gt;Your ears perk up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Well, we need to figure out whether to use serialization or use a
join table. We are leaning towards another table, but there is that new feature
&lt;code class=&quot;highlighter-rouge&quot;&gt;hstore&lt;/code&gt; PostgreSQL extension that might be better.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But first, I need to refactor some of the code in the ReportService. There is an
N+1 query going on and that class is getting really hairy. I think we should
be pulling out some logic into a new class.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Once I have that taken care of, we need to figure out the best way to pull
out the reports. It might be nice to use a sliding window range, but I don’t
know if that will be necessary — there aren’t that many records so we could just
pull them all at once.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The client’s eyes glaze over. You can’t understand why they keep asking when it will be
done.&lt;/p&gt;

&lt;p&gt;Too much information and at the wrong level.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Communication between parties at different technical levels is a tricky subject.
A project manager must communicate with a non-technical client. A developer must
communicate with a less-technical project manager.&lt;/p&gt;

&lt;p&gt;Unfortunately, knowing the appropriate level is an acquired skill.&lt;/p&gt;

&lt;p&gt;You can try putting yourself in the other person’s shoes — think about their 
background and knowledge. It may help to refer to past communications to get a baseline
on how in depth to go.&lt;/p&gt;

&lt;p&gt;I tend to err on the side of too little information and adjust as needed. You can always
offer to go further if the client wants more information. I find this preferable to getting
too technical and losing the focus of the discussion.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“So how long will this task take?”&lt;/em&gt;, the client asks at a status meeting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Should be about 2 days, I need to do a bit of cleanup but I don’t anticipate any 
problems.”&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cross-Pollinate</title>
   <link href="http://mdswanson.com/blog/2013/03/19/cross-pollination.html"/>
   <published>2013-03-19T00:00:00+05:30</published>
   <updated>2013-03-19T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/03/19/cross-pollination</id>
   <content type="html">&lt;p&gt;I learned an RSpec naming convention while pairing with a &lt;a href=&quot;https://twitter.com/vbeharav&quot;&gt;developer&lt;/a&gt; at 
&lt;a href=&quot;http://globalday.coderetreat.org/&quot;&gt;Global Day of Code Retreat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I learned about using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle open&lt;/code&gt; to explore Ruby gems while pairing with a &lt;a href=&quot;https://twitter.com/kyleashipley&quot;&gt;friend&lt;/a&gt; at 
a sandwich shop.&lt;/p&gt;

&lt;p&gt;I learned about debugging with &lt;code class=&quot;highlighter-rouge&quot;&gt;pry&lt;/code&gt; while pairing with a &lt;a href=&quot;https://twitter.com/joelmeador&quot;&gt;guy&lt;/a&gt; at an 
&lt;a href=&quot;http://indyrb.org/&quot;&gt;Indy.rb Hack Night&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And I’ve shared each of these bits of knowledge with co-workers in code reviews and pairing
sessions.&lt;/p&gt;

&lt;p&gt;These nuggets of information are all available in other sources — books, blog 
posts, mailing lists — but they are &lt;em&gt;unknown-unknowns&lt;/em&gt;. I didn’t even realize there 
was a better way that I should be seeking out.&lt;/p&gt;

&lt;p&gt;But when pairing, I can see you use a cool trick. You teach me how to do it. I teach it to a 
co-worker. She teaches it to her team. Everyone improves and grows.&lt;/p&gt;

&lt;p&gt;Pair programming &lt;strong&gt;cross-pollinates&lt;/strong&gt; knowledge.&lt;/p&gt;

&lt;p&gt;If you can’t think of the last time you picked up a new trick, seek out someone new and 
pair for an hour. I’d love for you to share what you learn with me someday.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;disclaimer&quot;&gt;
  &lt;p&gt;Psst, if you're in the Indianapolis area, come pair with me &lt;a href=&quot;http://indystartuplab.org&quot;&gt;any Monday night&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Evaluating Technical Arguments</title>
   <link href="http://mdswanson.com/blog/2013/01/28/evaluating-technical-arguments.html"/>
   <published>2013-01-28T00:00:00+05:30</published>
   <updated>2013-01-28T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/01/28/evaluating-technical-arguments</id>
   <content type="html">&lt;p&gt;Every day Hacker News, Reddit, and Twitter ebb and flow with dozens of new articles about
technical topics. Frequently, a few posts turn into a full on debate.&lt;/p&gt;

&lt;p&gt;One influential blogger says, unconditionally, to do something. We agree! This must be the one 
true way!&lt;/p&gt;

&lt;p&gt;But then another author comes in with a takedown. Never do that, they say, EVER! We agree! That 
other way must be wrong!&lt;/p&gt;

&lt;p&gt;Repeat ad nauseam.&lt;/p&gt;

&lt;p&gt;In this sea of opinions, our views can be swayed back and forth as we try to latch onto one
of the competing arguments. Judging these technical arguments is challenging, especially 
during the &lt;em&gt;formative years&lt;/em&gt; (years 0 to 3) of being a professional developer.&lt;/p&gt;

&lt;p&gt;Whether in person, or online, different parties — all of which seem smarter and more 
experienced than us — are shouting conflicting ideas about topics that we are still
trying to understand and master ourselves.&lt;/p&gt;

&lt;p&gt;How can we effectively evaluate these technical arguments?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;do-i-even-have-this-problem&quot;&gt;Do I even have this problem?&lt;/h2&gt;
&lt;p&gt;How do you best design an API? Should you build a &lt;a href=&quot;http://blog.stateless.co/post/38378679843/hypermedia-apis-on-rails-why-dhh-should-give-a-fk&quot;&gt;hypermedia API&lt;/a&gt;? Or &lt;a href=&quot;http://37signals.com/svn/posts/3373-getting-hyper-about-hypermedia-apis&quot;&gt;not&lt;/a&gt;? 
Is &lt;a href=&quot;http://timelessrepo.com/haters-gonna-hateoas&quot;&gt;REST or HATEOAS&lt;/a&gt; the way to go? Should it speak &lt;a href=&quot;http://scripting.com/2006/12/20.html#godBlessTheReinventers&quot;&gt;XML&lt;/a&gt;? &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;JSON&lt;/a&gt;? 
&lt;a href=&quot;https://github.com/kevinswiber/siren&quot;&gt;Siren&lt;/a&gt;? &lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;HAL&lt;/a&gt;? &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/overview&quot;&gt;Protocol buffers&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;You know, what? I’ve never built an API for mass consumption and I don’t see myself building one 
in the immediate future. It doesn’t matter what I pick.&lt;/p&gt;

&lt;p&gt;But the heavy hitters are all blogging about it! There’s mystery, excitement, drama!!&lt;/p&gt;

&lt;p&gt;There is something to be said about being informed and knowing your options, but it is really
difficult to honestly evaluate options when you haven’t experienced the problems firsthand.&lt;/p&gt;

&lt;p&gt;Instead, prefer &lt;strong&gt;lazy evaluation&lt;/strong&gt;. Figure out what flavor of OAuth is best for your project when
you actually have a project that needs it. You will never know less about the problems you will 
run into than right now, so delay any decisions as long as possible.&lt;/p&gt;

&lt;h2 id=&quot;wheres-the-code&quot;&gt;Where’s the code?&lt;/h2&gt;
&lt;p&gt;Writing, especially persuasive writing, is a messy thing. We are unable to separate emotion 
from logic in the heat of an argument.&lt;/p&gt;

&lt;p&gt;When we debate something on an abstract level, any idea can seem good, but what happens when the 
code hits the editor?&lt;/p&gt;

&lt;p&gt;Does the author provide real-world examples? Benchmarks that show the purported improvements?
Retrospective thoughts after using a technique several times?&lt;/p&gt;

&lt;p&gt;Take the &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/12/19/dci-concerns-and-readable-code/&quot;&gt;recent&lt;/a&gt; &lt;a href=&quot;http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns&quot;&gt;Rails&lt;/a&gt; &lt;a href=&quot;http://saturnflyer.com/blog/jim/2012/12/18/chubby-models-are-still-fat-with-concerns-dci-focuses-on-how-things-work-together/&quot;&gt;OOP&lt;/a&gt; &lt;a href=&quot;http://andrzejonsoftware.blogspot.com/2012/01/dci-and-rails-lessons-learnt.html&quot;&gt;debates&lt;/a&gt;, for example. It is one thing to write
paragraph after paragraph about how DCI makes more sense than MVC. But where is the code? Most 
of the posts barely scrape the surface of showing what working in a large production system using 
DCI is like.&lt;/p&gt;

&lt;p&gt;And it goes both ways. Arguments that DCI is overkill or just a fad are weakened without code
showing a better way to achieve the same results or sharing cases where a team tried DCI and
ultimately switched back to MVC.&lt;/p&gt;

&lt;p&gt;A new pattern can make sense in the abstract, but not be fully fleshed out when it comes to a
concrete implementation. Do a &lt;strong&gt;side-by-side comparison&lt;/strong&gt; of what actual code looks like using 
competing techniques. You should be able to instinctively tell which option you prefer.&lt;/p&gt;

&lt;p&gt;A technical argument without code almost seems like an economist postulating about why the GDP
went down without using any supporting data. It seems absurd in other fields, why not ours?&lt;/p&gt;

&lt;h2 id=&quot;where-is-the-author-coming-from&quot;&gt;Where is the author coming from?&lt;/h2&gt;
&lt;p&gt;Does the author work at a 5 person startup or a 50 person consulting shop or a 500 person 
corporation? Where do you work?&lt;/p&gt;

&lt;p&gt;Do you work with a small team of expert developers? A mix of new hires, journeymen, and
craftsman? Or are you a solo consultant? What kind of team does the author work on?&lt;/p&gt;

&lt;p&gt;Are your project constraints driven by business concerns (profit trumps all)? Engineering
concerns (it has to scale)? External requirements (we must pass FDA audits)?&lt;/p&gt;

&lt;p&gt;Is your project greenfield or brownfield? Can you rewrite v2 or do you have to build on the 
existing platform? Do you have high developer turn-over? What is the ratio of bug fixing 
to feature development?&lt;/p&gt;

&lt;p&gt;Every project is different and each team has their own preferences. There is unlikely to be a 
solution that simultaneously fits the needs of a two person startup building a photo sharing app,
a consulting team writing code for an insulin pump, and a grizzled senior developer leading a 
team of new hires inside Microsoft.&lt;/p&gt;

&lt;p&gt;This does not mean you should disregard any opinions from people in different situations than your
own. But you should be aware of how the author’s perspective &lt;strong&gt;aligns with your own&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Determining the perspective of the author is very difficult — especially if you aren’t 
already familiar with the major players in a certain scene. People don’t exactly come out and put
a disclaimer at the top of the post explaining their background and views.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It is okay to come to the conclusion that an argument is not right or wrong in the absolute sense,
but right or wrong for you and the context of your work.&lt;/p&gt;

&lt;p&gt;Thinking through both sides of a heated argument and placing yourself into the perspective of the
author will help expand your understanding of the issue. This enables you to be better equipped 
to pick the best option for &lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Being able to reach this conclusion and knowing when it is okay to go against the conventional 
wisdom is a sign that you are growing as a developer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Worst. Bug. Ever.</title>
   <link href="http://mdswanson.com/blog/2013/01/20/worst-bug-ever.html"/>
   <published>2013-01-20T00:00:00+05:30</published>
   <updated>2013-01-20T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/01/20/worst-bug-ever</id>
   <content type="html">&lt;p&gt;Some bugs are the worst because they &lt;a href=&quot;http://money.cnn.com/2012/08/09/technology/knight-expensive-computer-bug/index.html&quot;&gt;cost money&lt;/a&gt;. Some because they &lt;a href=&quot;http://en.wikipedia.org/wiki/Therac-25&quot;&gt;cost lives&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Others would cite bugs buried deep in a &lt;a href=&quot;https://groups.google.com/forum/#!topic/rubyonrails-security/61bkgvnSGTQ/discussion&quot;&gt;framework&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Therac-25&quot;&gt;hardware&lt;/a&gt; as “the worst”.&lt;/p&gt;

&lt;p&gt;For me, the worst kind of bugs are those where the solution, in hindsight, seemed
so obvious. You end up more frustrated with the bug after knowing the fix.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I encountered my worst bug during a summer internship after my sophomore year of
school. I was helping a research team at Purdue write simulation tools for
nanophotonics — I say this not to sound like I was some kind of genius, but
to highlight that I was in over my head in a very unfamiliar domain.&lt;/p&gt;

&lt;p&gt;A group of research scientists and grad students would work out the math needed
to simulate the performance of different nano-scale lenses and I was responsible for
wrapping the computations in a web interface and plotting the results.&lt;/p&gt;

&lt;p&gt;The team had an existing set of MATLAB scripts that they used internally, but these
scripts were hard to modify and distribute. But, on the bright side, I could hook into 
the MATLAB scripts and leverage their existing work.&lt;/p&gt;

&lt;p&gt;When I finally got everything wired up and started comparing the results of a few test 
cases, they didn’t match. I did my best to debug the MATLAB script, but the math 
was outside of my comprehension (optics theorems, higher order integrals, and 
complex numbers). And when I ran the simulation with the same inputs in the stand-alone script, 
I would get the correct results. &lt;em&gt;Hmm.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The web interface was built on a proprietary framework — it could leverage an entire 
grid computing cluster as the backend, but wasn’t exactly something that StackOverflow could 
help with.&lt;/p&gt;

&lt;p&gt;After about of week of stepping through the code line by line (even verifying some of the
calculations by hand), I finally isolated the section of code where the results diverged.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for i=1:length(LensLayers)
  d[i] = compute_diffraction_at_wavelength(LensLayers[i], WAVELENGTH)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It seemed pretty innocuous; loop over an array, perform a calculation on each element, store
the result in another array.&lt;/p&gt;

&lt;p&gt;Do you see the bug?&lt;/p&gt;

&lt;p&gt;Remember when I said there were some PhD-level computations being done? Most of them dealt with
complex numbers, which are natively support in MATLAB like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = 2 + 3*i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Figure it out yet?&lt;/p&gt;

&lt;p&gt;I was using &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; as my loop index, but as a side-effect the imaginary constant &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; in MATLAB 
was getting overwritten! So &lt;code class=&quot;highlighter-rouge&quot;&gt;2 + 3*i&lt;/code&gt; was evaluating to &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; for the first iteration, &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; for 
the second, etc. &lt;em&gt;Sigh.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Changing the loop variable name immediately fixed the problem and the results became 
correct (an alternate solution is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;3i&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;3*i&lt;/code&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To this day, I’ve never run across another bug with such a &lt;strong&gt;frustratingly obvious solution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It may have taken three weeks to solve, but at least I got a good “Worst. Bug. Ever.” story out of it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Confident Refactoring</title>
   <link href="http://mdswanson.com/talk/2013/01/20/confident-refactoring.html"/>
   <published>2013-01-20T00:00:00+05:30</published>
   <updated>2013-01-20T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talk/2013/01/20/confident-refactoring</id>
   <content type="html">&lt;p&gt;The slides from my refactoring talk — presented as an &lt;a href=&quot;http://www.sep.com&quot;&gt;SEP&lt;/a&gt; brownbag last fall and 
at a &lt;a href=&quot;http://www.chacha.com/&quot;&gt;ChaCha&lt;/a&gt; lunch-and-learn in January 2013.&lt;/p&gt;

&lt;script src=&quot;http://speakerdeck.com/embed/ee77881045940130bd1922000a9182a6.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>My Year in Review: 2012</title>
   <link href="http://mdswanson.com/blog/2013/01/01/year-in-review-2012.html"/>
   <published>2013-01-01T00:00:00+05:30</published>
   <updated>2013-01-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2013/01/01/year-in-review-2012</id>
   <content type="html">&lt;p&gt;Last year, I wrote a laundry list of my accomplishments in 2011. This time, I want to
share some themes in my life for 2012 instead.&lt;/p&gt;

&lt;h2 id=&quot;a-year-of-tracking&quot;&gt;A Year of Tracking&lt;/h2&gt;
&lt;p&gt;I’ve been drawn to the &lt;a href=&quot;http://quantifiedself.com/&quot;&gt;Quantified Self&lt;/a&gt; movement since I first read the blog a year and a half ago. I 
tried to get on the tracking bandwagon a few times, but I always fizzled after a couple days — I need
effortless data capture or I just stop doing it.&lt;/p&gt;

&lt;p&gt;I bought a &lt;a href=&quot;http://www.fitbit.com/&quot;&gt;Fitbit&lt;/a&gt; and a &lt;a href=&quot;http://www.withings.com/&quot;&gt;Withings scale&lt;/a&gt; for Christmas in 2011 and took another stab at tracking 
my fitness.&lt;/p&gt;

&lt;p&gt;This time, I was able to stick with it and I got some pretty awesome results (lifetime == 2012).&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Becoming less of a fatass&quot; src=&quot;/static/fitbit-stats.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I tried a few different Pomodoro tracking apps (including my own &lt;a href=&quot;https://gist.github.com/3753245&quot;&gt;experimental goal-based system&lt;/a&gt;) but I
found that, frankly, I don’t really like doing Pomodoros. I understand the purported benefits, but I 
had a hard time stopping when the timer went out. I guess I’m just a momentum-based creature.&lt;/p&gt;

&lt;p&gt;I made a concerted effort to read more — by reading on my Kindle before bed — and I read 21 
non-fiction or technical books this year, up from 8 in 2011 and 7 in 2010. I keep a queue on books that I 
want to read as an Amazon Wishlist and write a review when I finish the book as a means of tracking. My favorite
book this year was &lt;a href=&quot;http://mdswanson.com/writeup/2012/10/14/better.html&quot;&gt;Better: A Surgeon’s Notes on Performance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Paired with reading, was my own writing. I’d like to try &lt;a href=&quot;http://750words.com/&quot;&gt;750words&lt;/a&gt; at some point, but for now, I just
try to blog every week or so. Thanks to the ease of using Google Analytics (effortless capture!) I’ve
actually been tracking my blog since my first post in the fall of 2010.&lt;/p&gt;

&lt;p&gt;I wrote 14 posts this year, down from 22 in 2011 — but my blog received double the traffic. Quality over 
quantity, I guess? A quote from last year’s writeup: “Not bad for a random developer in Indiana!”&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Problogger status ;-)&quot; src=&quot;/static/blog-stats.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I’m really happy with how a few of my posts turned out. I got an early Christmas present when one of my
posts appeared in the print magazine &lt;a href=&quot;http://hackermonthly.com/issue-30.html&quot;&gt;Hacker Monthly&lt;/a&gt; in November.&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Hacker Monthly November&quot; src=&quot;/static/dead-tree.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It wasn’t all gravy, here are my failed self-tracking efforts this year:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;www.myzeo.com&quot;&gt;Zeo&lt;/a&gt; for sleep tracking - headband was uncomfortable and I had the older model that needed manual syncing 
with an SD card&lt;/li&gt;
  &lt;li&gt;Daily technical journal - felt like too much of a hassle to stop in the middle of working, didn’t last past the first week&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rescuetime.com/&quot;&gt;RescueTime&lt;/a&gt; for productive - satisfies effortless capture, but didn’t drive me to be more productive; I still run it but don’t really do anything with the data&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.loseit.com/&quot;&gt;LoseIt&lt;/a&gt; for calorie tracking - kept at this for about a month before stopping, entry was annoying and felt like I was guessing most of the time (is this a 100 or 120 calorie apple?!?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tracking was on my mind constantly through the year. I couldn’t even escape it on my SEP projects. The first
quarter of the year was spent finishing an Android project for diabetics to track their blood glucose levels
and other health metrics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/morale-app-2012.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I continued building my team mood tracking web app (above) — &lt;a href=&quot;/morale/&quot;&gt;Morale&lt;/a&gt;. I’ve managed to not only 
convince most of SEP, but several other companies in the beta, to click a “Good”, “Meh”, or “Bad” face to 
indicate their mood every day. My weekend hack has grown into a full product and has over 250 users in our 
current beta. I spent many late nights adding new graphs and visualizations to the app this year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/queuerunner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And since I can’t seem to build anything that doesn’t involve tracking these days, I shipped another 
&lt;a href=&quot;https://github.com/swanson/queue-runner&quot;&gt;side-project&lt;/a&gt; in September for keeping track of what TV episodes I’ve watched and which ones are still 
in my “queue”. I wasn’t happy with any of the existing alternatives, so I designed and built (with TDD) my own.
The project, &lt;a href=&quot;http://www.queuerunner.com/&quot;&gt;QueueRunner&lt;/a&gt;, has turned out to be a great playground for trying out new techniques (I’ve 
played around with &lt;code class=&quot;highlighter-rouge&quot;&gt;Draper&lt;/code&gt; “view models”, running &lt;code class=&quot;highlighter-rouge&quot;&gt;DelayedJob&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;unicorn&lt;/code&gt; worker, isolated testing) and 
working on my design chops.&lt;/p&gt;

&lt;h2 id=&quot;getting-involved&quot;&gt;Getting Involved&lt;/h2&gt;

&lt;p&gt;If you saw me at a Meetup or Indianapolis dev event this year, you would probably be surprised if I told you I 
was paralyzingly afraid of going to these events just a few years ago. I’ve been on the IndyPy meetup group 
since I graduated college and, while I would read the meeting notes and posted slides, I never could get myself 
to go to an actual meeting (regrettably, I still haven’t).&lt;/p&gt;

&lt;p&gt;I am pretty slow to open up to people and I get anxious in new environments so it was a big personal 
achievement that I was able to start attending the Indy ALT.NET and Indy.rb groups in 2011. In 2012, I pushed 
myself out of my comfort zone even further and stepped up my involvement.&lt;/p&gt;

&lt;p&gt;I helped with the Indy ALT.NET group’s re-branding and transition to &lt;a href=&quot;http://indysa.org/&quot;&gt;Indy Software Artisans&lt;/a&gt;; I gave the 
first talk of the year (on Redis) and did several lightning talks throughout the year. Behind the scenes, I 
started attending the admin meetings and helped plan the talk schedule and reach out to speakers.&lt;/p&gt;

&lt;p&gt;When I went to &lt;a href=&quot;http://indyrb.org/&quot;&gt;Indy.rb&lt;/a&gt;, I tried to talk to and meet the people I knew (through Twitter) in person. 
Fortunately, &lt;a href=&quot;https://twitter.com/mileszs&quot;&gt;Miles&lt;/a&gt; is a very friendly organizer and there were structured “hack nights” that helped make 
it easier to not just sit in the corner quietly watching a presentation.&lt;/p&gt;

&lt;p&gt;I really enjoyed attending &lt;a href=&quot;http://www.rebuildconf.com/&quot;&gt;re:build&lt;/a&gt; and the &lt;a href=&quot;http://indyhackers.org/&quot;&gt;Indy Hacker Holiday Social&lt;/a&gt; — two events where I 
decided to  sit at home and read HN instead of attending last year. Making new developer friends (that aren’t 
co-workers) has been great and something I am grateful that I did in 2012.&lt;/p&gt;

&lt;p&gt;But my favorite group that I got involved with this year was one that didn’t exist in 2011.&lt;/p&gt;

&lt;p&gt;Since March,
I’ve been hacking on projects every Monday night with a great group of guys and gals at &lt;a href=&quot;http://indystartuplab.org/&quot;&gt;Indy Startup Lab&lt;/a&gt;.
Thank you &lt;a href=&quot;https://twitter.com/kyleashipley&quot;&gt;Kyle&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/panozzaj&quot;&gt;Anthony&lt;/a&gt; for helping organize this meetup; it is something I look forward 
to every week. We all push and support each other to get better, ship more, and eat &lt;a href=&quot;http://www.in.mcalistersdeli.com/menu/giant-spuds&quot;&gt;large potatoes&lt;/a&gt;. We 
love seeing new faces at the group, so if you are ever in Indy on a Monday night — please stop by!&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts-on-2012&quot;&gt;Closing Thoughts on 2012&lt;/h2&gt;

&lt;p&gt;Change is hard.&lt;/p&gt;

&lt;p&gt;You will fail before you succeed, but the payoff is worth it.&lt;/p&gt;

&lt;p&gt;For me, this was a year of fresh starts and modest changes (thanks Merlin!) and I was very happy with the 
results. Here’s to more of the same in 2013.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Habit Ramp Up</title>
   <link href="http://mdswanson.com/blog/2012/12/17/habit-ramp-up.html"/>
   <published>2012-12-17T00:00:00+05:30</published>
   <updated>2012-12-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/12/17/habit-ramp-up</id>
   <content type="html">&lt;p&gt;A new habit starts with a spark, an initial burst of excitement and hope.&lt;/p&gt;

&lt;p&gt;Internally, you may visualize yourself in a state where you are already doing your new habit. This good
feeling (and dopamine spike) are enough to get you pumped up and ready to make a change.&lt;/p&gt;

&lt;p&gt;You are really excited by the prospect of building your own iOS app and getting it into the App Store. To 
reach this goal, you want to start a new habit of spending an hour each night learning iOS development and
building sample apps.&lt;/p&gt;

&lt;p&gt;The New Year rolls around and it’s time to kick off your new plan!&lt;/p&gt;

&lt;p&gt;You boot up the Mac Mini you got for Christmas and are ready to get started on your journey into the world of iOS development.&lt;/p&gt;

&lt;p&gt;Except there’s a problem. You don’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; installed and it’s a 3GB download (estimated time 
remaining: 4 hours).&lt;/p&gt;

&lt;p&gt;While you wait on that, you decide you should probably find an introductory book. You spend the remaining
15 minutes of Hour One reading Amazon reviews and picking out a book.&lt;/p&gt;

&lt;p&gt;The next two days you make very little progress as you wait for your book to be delivered and the Stanford
video lectures to download (as you waffle over whether to use the Spring or Fall semester version).&lt;/p&gt;

&lt;p&gt;Some friends invite you over the next night and — since you are still just getting your development
environment setup — you take them up on their offer. You can always start tomorrow.&lt;/p&gt;

&lt;p&gt;You suddenly look up and it’s January 8. You still haven’t written a line of code or cracked open your
book. You’ve got 12 GB of unwatched video lectures sitting in a playlist.&lt;/p&gt;

&lt;p&gt;Frustrated and disheartened, you abandon your new habit just a week after starting.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Most people try to harness this initial enthusiasm and use it during the first few days of trying to
build a habit. But, in my experience, it is much more effective to use that initial spike to clear 
the obstacles in your way instead.&lt;/p&gt;

&lt;p&gt;It is certainly not as glamorous as diving straight into a new habit, but taking time to set 
yourself up for success can mean the difference between a habit sticking or not.&lt;/p&gt;

&lt;p&gt;When I set a “start date” for a new habit, I actually start 3 or 4 days early. This gives me time to work 
out any kinks in my plan&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and get into a rhythm.&lt;/p&gt;

&lt;p&gt;I call this the &lt;strong&gt;Habit Ramp Up period&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By ramping up a habit before you “officially” start, you increase your chances of sticking with it.&lt;/p&gt;

&lt;p&gt;It may sound obvious or simple, but I can attest firsthand that it really helps. Doing the dull busy 
work upfront — when your enthusiasm is highest — will remove the friction for completing 
your new habit the first few times.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;http://5by5.tv/b2w/47&quot;&gt;Merlin Mann&lt;/a&gt; puts it, the idea is to make the right thing the easy thing.&lt;/p&gt;

&lt;p&gt;If you want to start a new workout routine, make sure that — before the first day you plan to start
— you are already signed up for a gym membership. Figure out your first week’s routine. Program the
route into your phone’s GPS. Pack your workout clothes and put them in your car. Set a reminder for when
you need to leave work.&lt;/p&gt;

&lt;p&gt;Plan out what you are going to eat dinner and what time you expect to arrive home. Make sure your car has
gas. Hell, make sure the gym is even open (you never know with holiday hours)!&lt;/p&gt;

&lt;p&gt;I think the New Year is a good external motivator to start a new habit, but the key to success is 
to spend the last week of December warming up. Consider trying out this technique if you are planning
any resolutions for the coming year, and let me know how it works for you.&lt;/p&gt;

&lt;p&gt;into full-blown analysis paralysis. This is one of the reasons why I start my ramp up just a few days 
in advance. There is still a hard deadline to start and the fixed time block helps keep me from spending
too much time &lt;a href=&quot;http://mdswanson.com/blog/2012/08/27/move-your-feet.html&quot;&gt;trying to find the perfect shoes&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;There is one issue that I’ve found with this approach. It is easy to shift from clearing obstacles&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Personal Time Capsule</title>
   <link href="http://mdswanson.com/blog/2012/12/10/personal-time-capsule.html"/>
   <published>2012-12-10T00:00:00+05:30</published>
   <updated>2012-12-10T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/12/10/personal-time-capsule</id>
   <content type="html">&lt;p&gt;In the spring of 2008 — nearly 5 years ago — I wrote my first piece of useful software; it
was an IRC client for a semester project in school.&lt;/p&gt;

&lt;p&gt;The program is, quite frankly, awful.&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Python IRC Client Screenshot&quot; src=&quot;/static/pyirc.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It’s 1100 lines of Python code in a single file. It is poorly formated and doesn’t even follow
its own (non-standard) naming conventions. There is a big chunk of pasted code that serves as a
reminder of how little I grokked OOP at the time. There are global variables all over the place and 
a bunch of comments about Windows threading errors.&lt;/p&gt;

&lt;p&gt;There’s even some — &lt;em&gt;cringe&lt;/em&gt; — ASCII art in the source.&lt;/p&gt;

&lt;p&gt;And yet, I keep this code on &lt;a href=&quot;https://github.com/swanson/py-irc-client/blob/master/client.py&quot;&gt;GitHub&lt;/a&gt; to this day. In an era when your open source code can
replace a traditional resume, I choose to keep this artifact of my past accessible to anyone that
wants to see.&lt;/p&gt;

&lt;p&gt;I don’t think people really look at it much. I’ve got over 50 repositories and it’s near the bottom of the 
list.&lt;/p&gt;

&lt;p&gt;But I know it’s there. For me, the project serves as a &lt;strong&gt;Personal Time Capsule&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;About once a year, I read through the code — along with a few other projects of varying age.&lt;/p&gt;

&lt;p&gt;I find more mistakes. I think about how I could apply new patterns I’ve learned. I wonder how I stayed
sane with no tests and managed to find most of the bugs.&lt;/p&gt;

&lt;p&gt;But I also remember the good things. The IRC project made me fall in love with software. I remember how
awesome it felt when I connected to Freenode with my little mudball of Python. I had made something out 
of nothing.&lt;/p&gt;

&lt;p&gt;It’s a very personal and reflective activity and I would encourage you to try it — whether it’s
finding some old code, reading your very first blog post, or revisiting a design from years ago.&lt;/p&gt;

&lt;p&gt;There is always more to learn and an infinite number of ways to improve, but don’t forget to stop and
evaluate how far you’ve come.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Motion is not Progress</title>
   <link href="http://mdswanson.com/blog/2012/11/18/motion-is-not-progress.html"/>
   <published>2012-11-18T00:00:00+05:30</published>
   <updated>2012-11-18T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/11/18/motion-is-not-progress</id>
   <content type="html">&lt;p&gt;I’ve put about 40 hours of my free time into writing a technical book.&lt;/p&gt;

&lt;p&gt;There’s one caveat though — I haven’t actually written any of it.&lt;/p&gt;

&lt;p&gt;There were several evenings of researching and evaluating existing material. I had
to figure out a marketing strategy, obviously. I needed a blog to write posts to establish credibility
and drive traffic to the sales website. The blog needed to be styled just right. I thought up
and registered the perfect domain.&lt;/p&gt;

&lt;p&gt;I worked on the cover design — an important part of making a sale, I figured. Of course,
I had to think up a clever title that wasn’t already being used by the major publishers. I added
a new tag for design related tasks to my Trello board.&lt;/p&gt;

&lt;p&gt;I researched where and how to sell the book. There was an option that handles all the billing,
but I couldn’t control the landing page. How would I run A/B tests and conversion optimization? I
read testimonial blog posts from other ebook authors about all the major platforms.&lt;/p&gt;

&lt;p&gt;It was slow going, but at least I was making progress!&lt;/p&gt;

&lt;p&gt;Except I wasn’t.&lt;/p&gt;

&lt;p&gt;I was just &lt;strong&gt;fiddling&lt;/strong&gt;, doing busywork that was tangential to my goal under the guise of progress.&lt;/p&gt;

&lt;p&gt;Progress requires motion, but not all motion drives progress.&lt;/p&gt;

&lt;p&gt;It is easy and appealing to mistake motion for progress. No one wants to feel like the work
they’ve done is useless. And in the moment, fiddling certainly feels like progress.&lt;/p&gt;

&lt;p&gt;Fiddling seems based in Daniel Kahneman’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Attribute_substitution&quot;&gt;attribute substitution&lt;/a&gt;. Instead of performing a difficult
task, we will substitute an easier one. The easier task might be to just thinking about the hard task, yet
we still get the same mental sense of achievement (and spike of dopamine) as if we had finished something!&lt;/p&gt;

&lt;p&gt;I struggle with this on a lot of my projects. I tell myself to just &lt;a href=&quot;http://mdswanson.com/blog/2012/08/27/move-your-feet.html&quot;&gt;move my feet&lt;/a&gt; and to create 
instead of consume, but if I am not mindful and deliberate on what tasks I work on, they can end up not 
furthering my progress.&lt;/p&gt;

&lt;p&gt;If you find yourself fiddling on one of a project, step back and re-evaluate. Maybe your
brain is signaling that you aren’t motivated enough to tackle the hard parts. Put the project on hold and
come back when you do feel motivated.&lt;/p&gt;

&lt;p&gt;There is nothing worse than burning yourself out, only to have nothing to show for your 
efforts.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Optimistic Programmer</title>
   <link href="http://mdswanson.com/blog/2012/11/06/the-optimistic-programmer.html"/>
   <published>2012-11-06T00:00:00+05:30</published>
   <updated>2012-11-06T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/11/06/the-optimistic-programmer</id>
   <content type="html">&lt;p&gt;Imagine two developers — Alice and Bob — both fresh out of school and ready to
take the software world by storm.&lt;/p&gt;

&lt;p&gt;Alice and Bob find themselves working on a large, legacy project. A project full of chances
to learn, but not without difficulty.&lt;/p&gt;

&lt;p&gt;A few weeks in, Bob comes into the office on a Monday morning and his PM is waiting at his
desk. Bob started off strong, but has been struggling lately and introduced a pretty bad 
bug that has been causing production issues all weekend.&lt;/p&gt;

&lt;p&gt;Bob gets a stern, but fair, talk from his manager. After his manager heads off to a meeting,
Bob immediately feels a pit in his stomach.&lt;/p&gt;

&lt;p&gt;“Damn,” he says to himself, “I’m just not getting this. What is wrong with me? I spent four
years in school studying and I can’t even make it through my first month without messing
everything up. I really suck.”&lt;/p&gt;

&lt;p&gt;Bob never recovers from this setback and he doesn’t make it to his one year anniversary. He
bounces around from gig to gig and eventually leaves software all together, saying he just
wasn’t cut out for the job.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before Bob’s manager went to that meeting, he swung by Alice’s desk. She wasn’t faring much
better.&lt;/p&gt;

&lt;p&gt;The feature Alice was working on was late — way late. She had become less and less 
vocal during team stand-up meetings.&lt;/p&gt;

&lt;p&gt;Alice’s manager asks her what’s causing all the issues on her current feature. She 
mentions that she ran into several unexpected issues and had been dealing with her IDE
crashing frequently.&lt;/p&gt;

&lt;p&gt;After he leaves, Alice takes a moment to reflect on her situation.&lt;/p&gt;

&lt;p&gt;“This feature is way overdue, I need to get control”, she says to herself, “My IDE is 
really to blame, I’ve wasted 3 days trying to work around these crashes. Everyone said I
did a great job on the last feature, so this one must just be cursed.”&lt;/p&gt;

&lt;p&gt;Alice buckles down and gets her feature finished. Completing the difficult task energizes 
her and she completes her next three assignments under budget and with no major defects.&lt;/p&gt;

&lt;p&gt;By her one year anniversary, Alice is well on her way to a promotion and is a rising star
in the company.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The difference? Alice was an optimist and Bob was a pessimist.&lt;/p&gt;

&lt;p&gt;When faced with adversity, Bob internal &lt;a href=&quot;http://en.wikipedia.org/wiki/Explanatory_style&quot;&gt;explanatory style&lt;/a&gt; told him that his 
troubles were permanent, pervasive in all aspects of his life, and he was the one to blame.&lt;/p&gt;

&lt;p&gt;Contrast that with Alice, who believed that what happened was just an unlucky setback in
this one area of her life. She didn’t let it effect her outside of work, but once she
succeeded it brightened her mood.&lt;/p&gt;

&lt;p&gt;So what’s the point?&lt;/p&gt;

&lt;p&gt;This analysis comes from Martin Seligman’s &lt;a href=&quot;http://mdswanson.com/writeup/2012/09/20/learned-optimism.html&quot;&gt;Learned Optimism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Seligman developed a simple questionnaire that can “diagnose” a persons level of optimism, 
which he used to help companies hire employees that were highly optimistic (but deficient 
in other traditional benchmarks) and avoid hiring employees that looked good on paper but
would collapse when facing adversity.&lt;/p&gt;

&lt;p&gt;Perhaps the software industry should draw upon this work and incorporate it into our
hiring policies.&lt;/p&gt;

&lt;p&gt;What good is a programmer than works miracles in the interview but shuts down once they 
hit their first wall on the job?&lt;/p&gt;

&lt;p&gt;Are we missing out of quality developers that struggle on coding tests, but will persist
and work at it until they figure it out?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Code Reviews: Good idea, bad idea?</title>
   <link href="http://mdswanson.com/blog/2012/11/04/code-reviews-good-idea-bad-idea.html"/>
   <published>2012-11-04T00:00:00+05:30</published>
   <updated>2012-11-04T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/11/04/code-reviews-good-idea-bad-idea</id>
   <content type="html">&lt;p&gt;Code reviews seem to be a relatively docile topic in software development.&lt;/p&gt;

&lt;p&gt;The leading opinion is that code reviews are a good idea. Some organizations even go as far 
as to mandate peer code reviews as part of their capital-P Process.&lt;/p&gt;

&lt;p&gt;Reviews are a tool that catches bugs and mistakes. They share domain knowledge and
help to maintain quality standards. Code reviews provide an opportunity for mentoring, 
teaching, and strengthening a team.&lt;/p&gt;

&lt;p&gt;Or at least they are supposed to…&lt;/p&gt;

&lt;p&gt;When the gloves come off and the pressures of a real project set in, code reviews
can take a turn for the worse.&lt;/p&gt;

&lt;p&gt;Reviews are a tool that cause resentment and division. They give false confidence about
the correctness of code and let people preach about their own personal coding standards.
Code reviews are a chore that cause productivity-killing context switches for the team.&lt;/p&gt;

&lt;p&gt;For any given team, the effectiveness of code reviews is somewhere in the middle — 
between an amicable silver bullet and a toxic team killer.&lt;/p&gt;

&lt;p&gt;After some thought and discussion with a few co-workers, I think the key factors to
successful code reviews are &lt;strong&gt;trust&lt;/strong&gt; and &lt;strong&gt;training&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Team members have to trust that the feedback from a code review is not a 
personal attack or a judgment of their abilities. Reviewers need to trust that the 
recipient will not resent them if they offer suggestions for improvement.&lt;/p&gt;

&lt;p&gt;The team needs to view code reviews as a chance for constant and constructive feedback, 
not as a vehicle for grading your teammates or making passive-aggressive comments.&lt;/p&gt;

&lt;p&gt;And trust isn’t something that inherently exists when a team is formed.&lt;/p&gt;

&lt;p&gt;But training on how to properly conduct a code review can help make sure the process is
helping the team build trust.&lt;/p&gt;

&lt;p&gt;For every project team I’ve been on, the process of learning how to do a code review was
to have some of your code reviewed. Now you are ready to do code reviews for someone else!
This approach leaves plenty of room for (mis)interpretation of how code reviews should be 
handled.&lt;/p&gt;

&lt;p&gt;Teaching new developers how to give appropriate feedback and what things to look for will 
help them provide value to more experience developers. Guiding team leaders on when to
back up from a review and identify teachable moments will strengthen the team’s trust and
respect from one another.&lt;/p&gt;

&lt;p&gt;So are code reviews a good idea or not?&lt;/p&gt;

&lt;p&gt;It depends on your team’s willingness to put in the work to make them a positive tool. As
with any development tool, just using it is not enough — you must be sure you are
using it in the &lt;strong&gt;right way&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Complications</title>
   <link href="http://mdswanson.com/writeup/2012/10/29/complications.html"/>
   <published>2012-10-29T00:00:00+05:30</published>
   <updated>2012-10-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/10/29/complications</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Being a doctor involves dealing with imperfect information while learning on the job. 
Mistakes, even ones causing the death of a patient, are unavoidable. Though patients
would prefer for doctors to operate with machine-like precision, doctors are only human
and can only do the best they can with the information they have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
As with Gawande’s other book, &lt;a href=&quot;http://mdswanson.com/writeup/2012/10/14/better.html&quot;&gt;Better&lt;/a&gt;, I was able to draw some interesting 
parallels between the medical and software worlds.&lt;/p&gt;

&lt;p&gt;Gawande describes the process of new residents having to learn in the field how to do
a certain type of procedure (a central line). Doctors can’t possibly learn every 
procedure in a book or practicing in an artificial setting — the learning has to 
happen on real patients. But if the patients were asked, they would unsurprisingly prefer
an experienced doctor over a new resident.&lt;/p&gt;

&lt;p&gt;A similar situation can happen when putting together a software team. If the client has
their say, a four person team will be made up of all senior developers. But in reality, 
you have to mix-in the junior developers in order to build up their ability. 
General-purpose development teams are often thrown into the deep-end and have to learn 
as the project goes along.&lt;/p&gt;

&lt;p&gt;Surgeons participate in a Mortality and Morbidity panel; the purpose is not to assign
blame but to assess and evaluate the decision making process to improve in the future.&lt;/p&gt;

&lt;p&gt;An interesting point raised in the book was how with all the new technology
like MRIs and CT scans, the number of autopsies has dropped over the years. The test
results give doctors a sense of confidence (sometimes a false sense) about their 
diagnosis; they don’t believe that an autopsy will uncover anything they didn’t know
already.&lt;/p&gt;

&lt;p&gt;To me, this was reminiscent of project retrospectives. I’ve been on projects that could 
have benefited from a “software autopsy” report. It is easy enough to declare that the
project failed because the client kept changing requirements, for example, but is that 
the real cause? But clients are notorious for changing requirements and yet not every 
project fails; a deeper dig to discover the root cause would probably be beneficial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I really enjoyed both of Atul Gawande’s “A Surgeon’s Notes” books. I’ve recently
started reading more titles from other industries and I find it refreshing to get a new
perspective on similar problems.&lt;/p&gt;

&lt;p&gt;So if that sounds useful to you, check out this book.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>I Don't Have Time</title>
   <link href="http://mdswanson.com/blog/2012/10/28/i-dont-have-time.html"/>
   <published>2012-10-28T00:00:00+05:30</published>
   <updated>2012-10-28T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/10/28/i-dont-have-time</id>
   <content type="html">&lt;p&gt;Is there something you’d like to create? A project you want to build? A goal you want to
achieve?&lt;/p&gt;

&lt;p&gt;With the likes of &lt;a href=&quot;http://www.gladwell.com/outliers/outliers_excerpt1.html&quot;&gt;Malcolm Gladwell&lt;/a&gt; and &lt;a href=&quot;http://norvig.com/21-days.html&quot;&gt;Peter Norvig&lt;/a&gt; telling us that it takes
thousands of hours and many years to master something, your dreams and ambitions can 
easily stall as reality sinks in.&lt;/p&gt;

&lt;p&gt;How do you get the inertia to start when the finish line seems so far away?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’d like to write a book, but I don’t have time to do all that work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But do you have an hour to outline a table of contents? Could you write 500
words today? How about emailing five bloggers that might be interested in reviewing your
book this week?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nathanbarry.com/&quot;&gt;Nathan Barry&lt;/a&gt;, a normal guy from Idaho with a wife and kid, found the time to write 
his book in &lt;a href=&quot;http://nathanbarry.com/commitment-changed-career/&quot;&gt;thousand word chunks&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’d really like to start drawing, but I’m no good and don’t have time to learn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you have time to draw one sketch today? And again tomorrow? Could you steal enough
time to read a chapter in a &lt;a href=&quot;http://www.drawright.com/&quot;&gt;book&lt;/a&gt; every week? To visit an art museum once a month?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jonathanhardesty.com/&quot;&gt;Jonathan Hardesty&lt;/a&gt;, an aspiring artist who started at “rock bottom”, did 
one sketch or painting &lt;a href=&quot;http://conceptart.org/forums/showthread.php?870&quot;&gt;every day&lt;/a&gt;. It took him years of work, but he went
from untrained to professional artist.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I love documentaries and want to make my own someday, but I don’t think I’ll ever find the time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can you send an email to a subject you want to interview today? Could you edit just one 
interview this week? Do you have a free weekend to film B-roll next month?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://timcawley.blogspot.com/&quot;&gt;Tim Cawley&lt;/a&gt;, with a day job in advertising, squeezed in work on nights, early 
mornings, and holiday breaks for two years to complete &lt;a href=&quot;http://fromnothingsomething.com/&quot;&gt;his documentary&lt;/a&gt;. It’s now
showing at film festivals across the country.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Gradual progress is crazy powerful.&lt;/p&gt;

&lt;p&gt;When you frame something as a giant, amorphous task (get healthy, become a designer, 
start a business) — it can seem impossible to fit into your busy schedule.&lt;/p&gt;

&lt;p&gt;Break it down into smaller pieces that you do have time for.&lt;/p&gt;

&lt;p&gt;With time and determination, the &lt;strong&gt;impossible&lt;/strong&gt; will become the &lt;strong&gt;inevitable&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How Children Succeed</title>
   <link href="http://mdswanson.com/writeup/2012/10/26/how-children-succeed.html"/>
   <published>2012-10-26T00:00:00+05:30</published>
   <updated>2012-10-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/10/26/how-children-succeed</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Traditional wisdom tells us that intelligence is a leading indicator in predicting
success in life — children that score highly on preschool admissions tests are
setup on a path that will eventually lead to a college degree, high paying job, and a
successful life.&lt;/p&gt;

&lt;p&gt;Paul Tough argues that success has more to do with “life skills” that children develop,
basically how much &lt;strong&gt;grit&lt;/strong&gt; you have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Merlin Mann ranted, raved, and spent two episodes of &lt;a href=&quot;http://5by5.tv/b2w/87&quot;&gt;Back to Work&lt;/a&gt; covering the
idea of grit (and referenced this book in particular). It is an attractive notion for
most people: we aren’t locked into a path based on our inherent intelligence, but rather
those that work hard will ultimately succeed.&lt;/p&gt;

&lt;p&gt;There is certainly more to it than just “working hard”, as the book describes. The whole
concept of grit is really more of a combination of several characteristics: 
self-control, optimism, perseverance, resilience, stick-to-itiveness, and more.&lt;/p&gt;

&lt;p&gt;Martin Seligman (same guy from &lt;a href=&quot;http://mdswanson.com/writeup/2012/09/20/learned-optimism.html&quot;&gt;Learned Optimism&lt;/a&gt;) even came up with 24 different
measurements for these character strengths.&lt;/p&gt;

&lt;p&gt;I enjoyed the coverage of alternative charter school programs and 
how schools serving low-income students can hack the system and provide the same tools
for success as expensive private schools. By emphasizing the importance of character,
these schools were, in some cases, able to start closing the gap between the privileged
and the not-so-privileged.&lt;/p&gt;

&lt;p&gt;I also found the story of the inner city high school chess team to be really fascinating.
By using techniques inspired from psychotherapy, the chess team coach helped students
learn from their mistakes and better handle their losses. By building up this quality
in her team, they were able to dominate schools that would be favored by more traditional
metrics (IQ, income level, quality of education).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
While the book is primarily focused on education, I think the idea that IQ isn’t the 
end-all, be-all predictor of success is an interesting one to explore in any field.&lt;/p&gt;

&lt;p&gt;Software certainly has many cases of individuals without strong academic backgrounds 
succeeding through raw grit, determination, and courage.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Five Dysfunctions of a Team</title>
   <link href="http://mdswanson.com/writeup/2012/10/23/the-five-dysfunctions-of-a-team.html"/>
   <published>2012-10-23T00:00:00+05:30</published>
   <updated>2012-10-23T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/10/23/the-five-dysfunctions-of-a-team</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
There are five dysfunctions that plague workplace teams. A good team leader will identify
how the dysfunctions are manifesting in their team and take action to overcome them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book uses an interesting format — a fictional company has hired a new CEO and 
we see meetings and interactions from her perspective as she tries to improve her 
executive team. The concept was new to me and helped to make the dysfunctions more 
concrete and the interactions more authentic.&lt;/p&gt;

&lt;p&gt;I found the second dysfunction — fear of conflict — to be the most 
eye-opening. When a team lacks trust (the first dysfunction), people don’t feel like they
can provide open criticism and have objective debates. Instead, you end up with stupid
office politics and you start holding grudges against your team members.&lt;/p&gt;

&lt;p&gt;All the dysfunctions chain together nicely; the book uses a pyramid structure, which is 
appropriate. A team that fears conflict will never get buy-in from everyone because 
without an opportunity to voice their opinions, the team’s vision will never be
aligned. Without a collective direction, the team will fail to commit (the third
dysfunction) and waste time waffling and revisiting decisions over and over again.&lt;/p&gt;

&lt;p&gt;One of my takeaways was to spend less time worrying about personal career advancement and
to try focusing on helping a team succeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
It’s a quick read and good for those working on teams that you don’t feel tight-knit; 
while the fictional company does make software, a development background is not required
to read this one.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Better: A Surgeon's Notes On Performance</title>
   <link href="http://mdswanson.com/writeup/2012/10/14/better.html"/>
   <published>2012-10-14T00:00:00+05:30</published>
   <updated>2012-10-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/10/14/better</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
How can you improve when the cost of failure is so high? Medicine is filled with high
risk decisions where the consequences of making the wrong choice can result in the loss
of human life.&lt;/p&gt;

&lt;p&gt;While the stakes in developing software are rarely as dire, we can apply
lessons from medicine to improve our own processes and abilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
At first glance, it is easy to dismiss this book and say that software is nothing like
medicine. But both professions have to deal with complexity, imperfect information, 
communicating with “clients”, and the challenges of working with teams.&lt;/p&gt;

&lt;p&gt;As I read the book, it was surprising how many parallel connections I could make to
software.&lt;/p&gt;

&lt;p&gt;Battlefield surgeons perform “patch job” operations and then transfer wounded
soldiers back to hospitals to receive more care. The surgeons used data to identify 
patterns of injuries and optimized their care. In software, we have hot-fixes and
track application errors to predict bug reports.&lt;/p&gt;

&lt;p&gt;Obstetricians came up with a metric (the &lt;a href=&quot;http://en.wikipedia.org/wiki/Apgar_score&quot;&gt;Apgar Score&lt;/a&gt;) that provided immediate
feedback about the condition of a newborn child and allowed for objective comparison.
Remind anyone else of the recent industry trends of validated learning and metric driven
development?&lt;/p&gt;

&lt;p&gt;My favorite part of the book was the concept of “positive deviance”.&lt;/p&gt;

&lt;p&gt;Gawande describes how some performers are able to consistently ride the upper tails of 
the bell curve by identifying and maximizing small changes that result in positive 
outcomes.&lt;/p&gt;

&lt;p&gt;Being 99.5% effective vs 99.95% effective doesn’t seem to make a difference in a day 
— but tally that 0.45% difference up over a year the result is 83% vs 16%. 
A very powerful example of gradual improvement if you ask me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
There are good lessons for every developer in this book. Before you reach for the next
software book about improvement, performance, or team dynamics give this 
cross-disciplinary book a shot; I think you’ll be glad you did.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A Short History of Nearly Everything</title>
   <link href="http://mdswanson.com/writeup/2012/10/02/a-short-history-of-nearly-everything.html"/>
   <published>2012-10-02T00:00:00+05:30</published>
   <updated>2012-10-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/10/02/a-short-history-of-nearly-everything</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Have you ever wondered how exactly scientists can measure the weight of the Earth?&lt;/p&gt;

&lt;p&gt;Have you ever wondered how the Periodical Table of Elements came to be?&lt;/p&gt;

&lt;p&gt;Did you know that the paleontologists that discovered the most well-known dinosaurs were 
bitter rivals and constantly smeared each other’s names in scientific publications?&lt;/p&gt;

&lt;p&gt;Those are the kind of questions this book tries to answer in a whirlwind summary of
the origins of astronomy, chemistry, geology, particle physics, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
This was a fun read. It was less like a textbook and more like a transcript from an
NPR radio show.&lt;/p&gt;

&lt;p&gt;There were plenty of fascinating characters throughout history, including
a minister/amateur astronomer who holds the record for most discovered supernovae and a
team of French scientists that spent years trying to measure the length of one degree of
the Earth’s circumference (they encountered hostile natives, jungle illness, deaths of 
several team members).&lt;/p&gt;

&lt;p&gt;The book discusses the origin of life and the likely ends of human life (my money is on
a meteor strike). It covers topics from the small (sub-atomic particles) to the very
large (black holes, galaxies). You’ll learn how the millions of specifies of organisms
evolved and how humans have somewhat unintentionally caused the extinction of most of
them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I found the book to be an enjoyable blend of learning and humor and would recommend it to
anyone that has ever sat through a high school science class and wondered why it was so
damn boring.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New Coke User Experience</title>
   <link href="http://mdswanson.com/blog/2012/09/25/new-coke-ux.html"/>
   <published>2012-09-25T00:00:00+05:30</published>
   <updated>2012-09-25T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/09/25/new-coke-ux</id>
   <content type="html">&lt;p&gt;If you’ve been to any fast food restaurant lately, you may have noticed the fancy, new
&lt;a href=&quot;http://coca-colafreestyle.com/&quot;&gt;Freestyle Coke machines&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;pic&quot;&gt;
  &lt;img alt=&quot;Coke Freestyle Machine&quot; src=&quot;/static/freestyle.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It’s got a touchscreen. It’s got 187 flavor combinations. It’s the Way of the Future™.&lt;/p&gt;

&lt;p&gt;Unfortunately, these machines provide an awful user experience.&lt;/p&gt;

&lt;p&gt;Let me walk you through my first few encounters with a Freestyle.&lt;/p&gt;

&lt;p&gt;The first step is to get ice for my soda. Right off the bat, I run into issues. 
Unlike the traditional soda fountains, the Freestyle has only a single “prong” instead of
the four to eight prong design. The only instructions for getting ice after engraved in 
the clear plastic prong — which is not super easy to read because it is not at eye-level 
and there are shadows due to the recessed nature of the dispensing area.&lt;/p&gt;

&lt;p&gt;Next comes the selection of the flavor. I notice that the touchscreen is laggy. I don’t 
know if this is a hardware (the machines use a &lt;a href=&quot;http://www.zytronic.co.uk/news/media/zytronic-partners-with-the-coca-cola-company-on-new-beverage-dispensing-platform&quot;&gt;projected capacitance screen&lt;/a&gt;) 
or software issue, but when people are used to super responsive tablets and phones, 
even minor slowness sticks out.&lt;/p&gt;

&lt;p&gt;Upon selecting the base syrup, you can pick any flavor add-ons. I opted to pass and go 
with regular old Diet Coke. You might expect to just press on the big circular buttons
on the touch screen to start dispensing your sugary goodness, but alas, it is not that
simple. To dispense your soda, you have to press a red button below the touch
screen.&lt;/p&gt;

&lt;p&gt;So to recap: to get ice, press a prong. To pick a drink, use the touch screen. To 
dispense the drink, press a physical button.&lt;/p&gt;

&lt;p&gt;But hey, I’ve got an engineering degree. I can figure it out.&lt;/p&gt;

&lt;p&gt;If those were the only issues, I could probably get over it. But those are only the user 
interface grievances I have.&lt;/p&gt;

&lt;p&gt;Here’s more interaction issues that bug me about the Freestyle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s hard to operate with a tray of food in one hand. I have to put the cup into the 
recessed area (after clearing off stray ice cubes) and hope that it doesn’t tip over and is
positioned correctly under the nozzle&lt;/li&gt;
  &lt;li&gt;There is a delay between pressing the dispense soda button and the stream actually 
starting and stopping. This makes it very difficult to top off your drink after the fizz
settles.&lt;/li&gt;
  &lt;li&gt;I got a little squirt of someone’s Raspberry Sprite in my drink. I don’t know if the
tubing is “flushed out” between drink selections, but there was a visible bit of pink 
liquid dispensed into my drink.&lt;/li&gt;
  &lt;li&gt;Only one patron can operate it at a time. No more of the “step to the left and let the 
guy behind you get ice”. And it takes people way longer to get their drink as they play
around with all the new flavors (I’ve seen groups of teenagers spend five minutes mixing
different flavors until an employee asked them to make a decision).&lt;/li&gt;
  &lt;li&gt;Watch a younger kid try to use it. They can’t reach the screen, they make a big mess.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe I have an irrational hatred for the Freestyle. But whenever I see one, I can’t help
thinking this is my generation’s &lt;a href=&quot;http://en.wikipedia.org/wiki/New_Coke&quot;&gt;New Coke&lt;/a&gt;. Same great taste, now with a 
touchscreen slapped on it!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Learned Optimism</title>
   <link href="http://mdswanson.com/writeup/2012/09/20/learned-optimism.html"/>
   <published>2012-09-20T00:00:00+05:30</published>
   <updated>2012-09-20T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/09/20/learned-optimism</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Optimism has proven benefits over pessimism is nearly every aspect of life, from 
personal happiness to success in business. People can learn to become helpless
and pessimistic, but luckily they can also learn to be become an optimist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book has a fairly extensive backstory that follows the researcher’s journey to 
understand &lt;a href=&quot;http://en.wikipedia.org/wiki/Learned_helplessness&quot;&gt;learned helplessness&lt;/a&gt; and optimism. It was interesting to see how 
Seligman took his findings from animals and applied them to humans. I am always 
intrigued by how psychologists can design an experiment to objectively capture how
people feel.&lt;/p&gt;

&lt;p&gt;The book includes a test to determine your “optimism level”. As expected, my results were
pessimistic.&lt;/p&gt;

&lt;p&gt;But it was very revealing to see which categories I was worse in. For 
instance, I scored poorly for the “Permanence Bad” section; this means that my internal 
explanatory style (how you rationalize things in your mind) tends to make bad things 
seem permanent (“I suck at X, I always have and always will”). But I scored highly in 
“Pervasiveness Good”, meaning that when something good happened, I allowed that feeling 
to improve other areas of my life.&lt;/p&gt;

&lt;p&gt;The secret sauce to becoming more optimistic is training yourself to think about 
good events as long-lasting and far-reaching and bad events as temporary, isolated, and
beyond your control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
If you’re into pop psychology books (like I am), then it’s worth a read. There is some
fascinating stuff about using optimism tests when hiring insurance salesmen that might
also work for hiring developers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Move your feet</title>
   <link href="http://mdswanson.com/blog/2012/08/27/move-your-feet.html"/>
   <published>2012-08-27T00:00:00+05:30</published>
   <updated>2012-08-27T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/08/27/move-your-feet</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Four books. 28 hours of screencasts. Two online courses.  &lt;br /&gt;
&lt;strong&gt;Result:&lt;/strong&gt; Zero specs in my Rails project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Old pair of shoes. Treadmill. One mile in 20 minutes, 23 seconds.  &lt;br /&gt;
&lt;strong&gt;Result:&lt;/strong&gt; 866 miles traveled by foot this year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Why did I fail &lt;em&gt;so hard&lt;/em&gt; at one activity and succeed at the other? With a bit of hindsight, I am starting to figure out the answer.&lt;/p&gt;

&lt;p&gt;The first activity (doing TDD in a Rails project of mine) suffered
from extreme analysis paralysis. After working as a professional developer for
two years, it is so hard for me to just dive in and start sucking at
something. I want to learn the best practices so I don’t “waste” time doing it
incorrectly.&lt;/p&gt;

&lt;p&gt;But in this case, best practices are a &lt;strong&gt;poison&lt;/strong&gt;; a hindrance that prevents me from 
even writing the first spec in my project until I have a perfect vision and
roadmap for achieving some mystical TDD nirvana.&lt;/p&gt;

&lt;p&gt;In contrast, I was able to ignore this mental roadblock in the second activity.
Like many before me, I started the New Year wanting to get into better shape.
But instead of finding a book or reading posts on &lt;a href=&quot;http://reddit.com/r/running&quot;&gt;/r/running&lt;/a&gt; for 2 months, 
I did something different.&lt;/p&gt;

&lt;p&gt;I found an old pair of shoes, got on the treadmill and just started running. And man, 
did I really suck at running.&lt;/p&gt;

&lt;p&gt;But I didn’t care. I could see my improvement every week — the time to run a
mile went down, the speed and distance went up (slowly!).&lt;/p&gt;

&lt;p&gt;In the software domain, I struggled to convince myself that it was okay to regress in
an area as I learned and improved. Instead of starting from the beginning, I tried to 
skip straight to mastery. With running, my activities were directly related to 
practicing and improving. Instead of reading guides or spending hours on Amazon trying 
to find the perfect shoes, I was actually running.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I finally went to get some proper running shoes. Once I got to the store, I reverted back to full 
“Engineer Mode” — trying to determine which brand of shoe was optimal, how many 
pairs of wicking socks I would need, etc — when the trainer looked over and made a 
comment that really resonated with me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wanna know the secret to improving your running? &lt;strong&gt;Move your feet.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>The Personal MBA</title>
   <link href="http://mdswanson.com/writeup/2012/07/25/the-personal-mba.html"/>
   <published>2012-07-25T00:00:00+05:30</published>
   <updated>2012-07-25T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/07/25/the-personal-mba</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This book collects a bunch of business, pop psychology, and productivity books, 
extracts the good parts and then groups them into categories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I really liked this book. When someone asked about the book while I was reading it, I 
described it as a software “patterns” book for business.&lt;/p&gt;

&lt;p&gt;The book consists of over 200 bite-sized articles about various business and 
entrepreneurial topics. There is a wide range of things covered, from basic accounting 
to the psychology of habits to systems theory. The style of writing is very approachable 
and it was easy to digest the book a few sections at a time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I would recommend anyone interested in learning more about business or entrepreneurship
to start by reading this book. Afterwards, you can pick a topic to dive deeper into 
based on the author’s other recommendations.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Technical Blogging</title>
   <link href="http://mdswanson.com/writeup/2012/07/25/technical-blogging.html"/>
   <published>2012-07-25T00:00:00+05:30</published>
   <updated>2012-07-25T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/07/25/technical-blogging</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This book provides a step-by-step guide for planning and writing a successful technical
blog. Additionally, the author describes how to get the most benefit from your blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I think someone new to blogging would get a lot out of this book. That being said, I did
not find it to be that useful for me.&lt;/p&gt;

&lt;p&gt;The book starts by helping you plan out what your blog is going to be. By answering a
series of questions (will your blog be niche or general? will you write essays or
tutorials?), you can narrow down your focus and figure out a plan for maintaining and
growing your blog.&lt;/p&gt;

&lt;p&gt;Near the end of the book was where I started finding practical advice that I could use.
The book covers a wide range of monetization strategies (ads, sponsorships, affiliate
links), but more importantly, also talked about some of the other benefits you get from
blogging (building an audience, becoming an expert in the field).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Overall, I think the book would be very useful for someone interested in blogging that
didn’t know where to begin. For people that already have a blog, you can probably skim a
few of the later sections and skip the rest.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Objects on Rails</title>
   <link href="http://mdswanson.com/writeup/2012/07/11/objects-on-rails.html"/>
   <published>2012-07-11T00:00:00+05:30</published>
   <updated>2012-07-11T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/07/11/objects-on-rails</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This book takes the form of an “engineer’s notebook” and examines a handful of 
alternative OO-patterns to make your Rails applications more flexible and maintainable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Though at times I felt in over my head, I really enjoyed the book. It was at the perfect
intermediate level that I have been seeking lately. While I didn’t fully grok everything,
I can always return to the text when I do encounter some of the more subtle problems.&lt;/p&gt;

&lt;p&gt;The patterns discussed - particularly the &lt;code class=&quot;highlighter-rouge&quot;&gt;Exhibit&lt;/code&gt; pattern - were new to me and the 
author did a good job of showing the “before and after” versions to illustrate &lt;em&gt;why&lt;/em&gt; you
might want to use them.&lt;/p&gt;

&lt;p&gt;The sections on isolated, fast unit testing were helpful, though I’m still a bit 
uncertain about when to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;stub&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenStruct&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.new&lt;/code&gt;. This is kind of a 
trap topic for me, as I find I am sending too much time trying to figure out the 
optimal way of doing TDD in Rails - instead of just getting my hands dirty first and 
optimizing later.&lt;/p&gt;

&lt;p&gt;It was nice to see how topics I was familiar with from other contexts (dependency 
injection, aggregate root) fit into a Rails app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Anyone with interest in the on-going “how to do OO in Rails” debate; 
basic-to-intermediate Rails knowledge required to get the most out of this book&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Everyday Rails Testing with RSpec</title>
   <link href="http://mdswanson.com/writeup/2012/07/10/everyday-rails-testing-with-rspec.html"/>
   <published>2012-07-10T00:00:00+05:30</published>
   <updated>2012-07-10T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/07/10/everyday-rails-testing-with-rspec</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Everyday Rails Testing with RSpec focuses on getting started with RSpec testing in Rails.
Instead of assuming the reader has started by TDDing an app, the book takes the approach
of adding tests to an existing project so you are setup to do TDD going forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I found the book to be a refreshing take on testing in Rails. My current Rails project
is in the state described by the book: functional, but without tests. The author takes
a very pragmatic approach to testing, opting to forgo using some popular options, such
as Cucumber, in favor of a simpler workflow.&lt;/p&gt;

&lt;p&gt;The book covers model and controller specs, factories, integration testing, and then a
few other odds and ends.&lt;/p&gt;

&lt;p&gt;Unfortunately, the sample app does not stray far from basic CRUD scaffolding - which
was disappointing. I had also hoped that this book would be more of an intermediate level
book, but found it to spend a bit too much on the basics of RSpec and DRY’ing up the 
tests.&lt;/p&gt;

&lt;p&gt;Overall, the book was useful and helped me get back on track with testing my Rails 
project - but I would have liked to see some of the concepts applied to a more advanced 
app. Given the title is “Everyday Rails”, I don’t think the samples were representative 
of a real Rails app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Developers looking to get started with testing Rails applications using RSpec. You will
probably want some background knowledge on using Rails before picking up this book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>There's Always a Duck</title>
   <link href="http://mdswanson.com/writeup/2012/07/08/theres-always-a-duck.html"/>
   <published>2012-07-08T00:00:00+05:30</published>
   <updated>2012-07-08T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/07/08/theres-always-a-duck</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The book is a collection of essays written the point-of-view of a test/QA engineer on 
agile teams about soft skills and personal interactions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
It was alright. The book offers a different perspective from typical “software team”
books I have read because of the author’s background as a tester. As I continue my study
of TDD and testing, I thought this would be a new and interesting angle to consider.&lt;/p&gt;

&lt;p&gt;There were some good stories; I particularly liked the section describing a project
with a 5-digit bug backlog (as I could empathize given my current project’s ever-growing 
list). I also liked the concept of the &lt;a href=&quot;http://testobsessed.com/blog/2011/05/31/agile-up-3-here/&quot;&gt;“Agile Up To Here”&lt;/a&gt; event that was 
described and will have to check the author’s blog for more details.&lt;/p&gt;

&lt;p&gt;Nothing earth-shattering, but it was a short, pleasant read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Developers looking for some insight into how testing fits into agile teams from a 
Test/QA engineer POV&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Growing Object Oriented Software, Guided By Tests</title>
   <link href="http://mdswanson.com/writeup/2012/06/22/growing-object-oriented-software.html"/>
   <published>2012-06-22T00:00:00+05:30</published>
   <updated>2012-06-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/06/22/growing-object-oriented-software</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This book covers how to use TDD to drive the design of a system from the first line of
code you write. The key word from the title is “Growing”, as the book advises using tests
to let your system design evolve and reveal itself more naturally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Despite not being as well-known as other books in this area, I found GOOSGBT to be really
excellent. The introduction section is the most concise way to explain the benefits of
TDD that I have come across. For me, this book was at just the right level - it doesn’t 
get stuck explaining the basics of TDD and moves quickly.&lt;/p&gt;

&lt;p&gt;The second half of the book is an example project that shows, in sometimes 
excruciating detail, how to build an “auction sniper” using TDD techniques from the 
ground up. It is very dense reading, but it does serve as a good example of practical 
TDD. Since every step is explained and justified, the authors are forced to avoid 
hand-waving over the nasty details that would be convenient to skip.&lt;/p&gt;

&lt;p&gt;The book is a few years old and the sample project is a Java desktop app, but the lessons
and material is very relevant to the current fascination with OO design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
This is a great mid-to-advanced level book on TDD. I don’t know if I would recommend 
it to someone completely new to the topic; but for someone with a bit of experience,
this is the book you want to read.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Cucumber Book</title>
   <link href="http://mdswanson.com/writeup/2012/06/21/the-cucumber-book.html"/>
   <published>2012-06-21T00:00:00+05:30</published>
   <updated>2012-06-21T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/06/21/the-cucumber-book</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Cucumber is a tool for writing BDD tests. This book is an introduction to using the tool
and then a worked example of using Cucumber to drive the development of a web-based ATM
interface. The focus is primarily on using it to test Ruby applications, but the tool 
can be used for virtually any language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
The book did its advertised job of explaining how to use Cucumber, but it is really
not that hard. I would have liked for the author to spend more time explaining how to
use Cucumber in conjunction with unit tests. The balance of integration, unit,
and acceptance tests is one of the things I am struggling with as I explore TDD and this
book, unfortunately, didn’t help much in that regard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I would recommend the book as a way for someone to pick up Cucumber if they were going to
use it on a project, but I don’t think it is strictly necessary.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Dangerous Obsession with Primitives</title>
   <link href="http://mdswanson.com/blog/2012/05/31/primitive-obsession.html"/>
   <published>2012-05-31T00:00:00+05:30</published>
   <updated>2012-05-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/05/31/primitive-obsession</id>
   <content type="html">&lt;p&gt;I recently came across a code smell called &lt;strong&gt;Primitive Obsession&lt;/strong&gt; in James Shore’s 
excellent &lt;a href=&quot;http://jamesshore.com/Blog/Lets-Play&quot;&gt;Let’s Play TDD screencasts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As programmers, using primitives (i.e. built-in types like int, float, string) are
a security blanket.&lt;/p&gt;

&lt;p&gt;Primitives are familiar to us. When we are unsure about a complex domain, we try to distill 
the objects down to dumb “bags of properties”. This allow us to continue working and feel like 
we are making progress — despite not fully grasping the domain.&lt;/p&gt;

&lt;p&gt;We also lull ourselves into thinking we are reducing complexity. How many times have you said 
&lt;em&gt;“Oh, the BazBar? It’s just a boolean flag”&lt;/em&gt; and shrugged off the domain implications?&lt;/p&gt;

&lt;p&gt;As soon as I heard this term, I immediately thought back to a recent project I was on. 
This smell was all over the codebase, staring me right in the face. But I couldn’t articulate
the problem until now.&lt;/p&gt;

&lt;p&gt;Part of the application involved entering data about the food you ate. The user would input 
calories, carbs, fat — just like on a nutritional label.&lt;/p&gt;

&lt;p&gt;The problem was that we were representing all of the different food metrics with simple integers.
Calories were an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;. Carbs were an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;. Integers &lt;a href=&quot;http://en.wikipedia.org/wiki/Turtles_all_the_way_down&quot;&gt;all the way down&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first, this was okay.&lt;/p&gt;

&lt;p&gt;But when it came time to address internationalization, we needed 
to introduce the concept of units. For example, in the US we typically measure carbs in grams. 
But in Germany, they use something called Bread Units (BU).&lt;/p&gt;

&lt;p&gt;Alarms should have been going off that I needed to change Carbs from an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; to a 
&lt;a href=&quot;http://c2.com/cgi/wiki?ValueObject&quot;&gt;value object&lt;/a&gt;. Alas, I started trying to figure out how to bolt on unit conversions to 
the existing primitive version.&lt;/p&gt;

&lt;p&gt;So, naturally, I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;CarbsUnitConverter&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;convert()&lt;/code&gt; method that took an integer and
a conversion factor. More warning flags should have popped up when I had to return a decimal value 
from &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt; to handle all the supported units. Not only did I have a Primitive Obsession, but I 
was changing the primitive based on context!&lt;/p&gt;

&lt;p&gt;I went along blissfully injecting my &lt;code class=&quot;highlighter-rouge&quot;&gt;CarbsUnitConverter&lt;/code&gt; into every place where we displayed 
carbs in the app. This lead to messy code and exposed the unit conversions to areas of the system
that should not have known or cared about it.&lt;/p&gt;

&lt;p&gt;The moral of the story was that having a primitive obsession actually increased the complexity in 
the application by allowing business logic to spill into unrelated classes.&lt;/p&gt;

&lt;p&gt;This code smell is fairly easy to identify; the difficulty is having the discipline to prevent it
from creeping into your codebase in the first place.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lightning Talk: Anatomy of a Weekend Project</title>
   <link href="http://mdswanson.com/talk/2012/05/30/lightning-talk-anatomy-of-a-weekend-project.html"/>
   <published>2012-05-30T00:00:00+05:30</published>
   <updated>2012-05-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talk/2012/05/30/lightning-talk-anatomy-of-a-weekend-project</id>
   <content type="html">&lt;p&gt;The slides from my Lightning Talk at April’s &lt;a href=&quot;http://indyrb.org&quot;&gt;Indy.rb&lt;/a&gt; and May’s &lt;a href=&quot;http://indysa.org&quot;&gt;IndySA&lt;/a&gt; meetup.
&lt;script src=&quot;http://speakerdeck.com/embed/4f947b49ac5fc103ec015c11.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>What I've Learned From Failure</title>
   <link href="http://mdswanson.com/writeup/2012/04/01/what-ive-learned-from-failure.html"/>
   <published>2012-04-01T00:00:00+05:30</published>
   <updated>2012-04-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/04/01/what-ive-learned-from-failure</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Delivering software is as much about avoiding “failure modes” as it is about using 
best practices or the flavor-of-the-month process. By identifying common sources of
failure, we can learn how to avoid them, fix them, or realize that a project
has gone pear-shaped and get out while we still can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
One of my new favorites; after finishing a project that was…&lt;em&gt;less than 
successful&lt;/em&gt; in some areas, it was enlightening to read this book and be able to 
relate first hand.&lt;/p&gt;

&lt;p&gt;One of my favorite sections detailed what stakeholders want when things starting
going wrong: new processes and a way to measure compliance.&lt;/p&gt;

&lt;p&gt;Often the responses are anti-patterns like working overtime (“Schedule slips are the 
fault of the estimator or the person implementing the task so we have to start 
working weekend to make up for our faults”) or generating mountains of reports and 
vanity metrics (“The app is crashing a lot, we need to see test coverage reports 
with every future release”).&lt;/p&gt;

&lt;p&gt;For whatever reason, I felt as if the author had really been in the trenches on 
failed projects so even when I encountered material I had read/heard before, there
was much more conviction and impact behind it.&lt;/p&gt;

&lt;p&gt;Do not let the length fool you, it is short but dense with great material.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Project managers and clients that want to avoid failure; frustrated engineers that 
don’t always understand the How and Why of dealing with clients&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Wisdom of Crowds</title>
   <link href="http://mdswanson.com/writeup/2012/04/01/the-wisdom-of-crowds.html"/>
   <published>2012-04-01T00:00:00+05:30</published>
   <updated>2012-04-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/04/01/the-wisdom-of-crowds</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
It seems like a small group of experts would be best at making intelligent 
predictions and decisions, but, under the right circumstances, a group of 
non-experts acting as one can be smarter than the sums of its parts.&lt;/p&gt;

&lt;p&gt;The book outlines the necessary requirements to create a “wise crowd” and provides a 
variety of examples to demonstrate their effectiveness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
While it was an interesting read, I didn’t find much in terms of actionable 
take-aways. The examples in the book are really interesting (especially a story 
about a naval officer using crowdsourced predictions to locate a sunken submarine) - 
but I don’t know how I can really use the information directly.&lt;/p&gt;

&lt;p&gt;I suppose you can apply the crowdsourcing idea to things like estimating software 
projects, but I think it is already obvious that getting a group of people with 
varied experiences is useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
In the end, it was a very approachable book about behavioral economics (which I like)
in the same genre and style of Freakonomics and Malcolm Gladwell (which I also 
like), but those looking for new and pragmatic approaches will probably be letdown.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Test First as System 2 Thinking</title>
   <link href="http://mdswanson.com/blog/2012/03/22/test-first-as-system-2-thinking.html"/>
   <published>2012-03-22T00:00:00+05:30</published>
   <updated>2012-03-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/03/22/test-first-as-system-2-thinking</id>
   <content type="html">&lt;p&gt;I’ve been reading Daniel Kahneman’s excellent &lt;a href=&quot;http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637&quot;&gt;&lt;em&gt;Thinking, Fast and Slow&lt;/em&gt;&lt;/a&gt; lately; the book introduces two types of thinking: System 1 and System 2.&lt;/p&gt;

&lt;p&gt;System 1 is fast, intuitive and emotional. System 2 is slower, effortful and rational.&lt;/p&gt;

&lt;p&gt;Is a quiet, organized boy who loves to read more likely to become a librarian or a farmer?&lt;/p&gt;

&lt;p&gt;System 1 leads you to pick librarian but, rationally, there are much fewer male librarians than farmers (there are 20 male farmers for every male 
librarian). System 2 would have made that distinction, but it is lazy and was happy to accept System 1’s (incorrect) answer.&lt;/p&gt;

&lt;p&gt;I am realizing that the same factors are at play when you decide to start coding a new feature.&lt;/p&gt;

&lt;p&gt;The natural inclination is to dive right in and start implementing a solution. You are jumping between files,
creating new functions and classes as you go, and generally feeling like you are making progress. This is a System 1
way of doing things.&lt;/p&gt;

&lt;p&gt;Everything might go fine until you hit a snag. Small issues that you didn’t see at first suddenly become huge roadblocks.&lt;/p&gt;

&lt;p&gt;It seems like your solution is correct, but maybe a hidden corner case goes undetected.&lt;/p&gt;

&lt;p&gt;And once you work through all the problems, you start writing tests that are exercising your implementation, not the intended behavior. The code
&lt;em&gt;obviously&lt;/em&gt; works so the tests are just a formality that you are required to slog through.&lt;/p&gt;

&lt;p&gt;In contrast, &lt;a href=&quot;http://www.extremeprogramming.org/rules/testfirst.html&quot;&gt;Test First Programming&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; allows System 2 thinking to happen. By shifting your focus and attention to determining how to test the behavior of your
program, you force yourself to be more methodical when making important system design decisions.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is once you expend the cognitive load of writing your tests, you can defer back to System 1 for the implementation. Using
the tests as your guide, the code suddenly becomes more intuitive and effortless. You gain confidence that you are on the correct path.&lt;/p&gt;

&lt;p&gt;To me, becoming aware of the System 1/2 concepts has helped me realize how beneficial a test first approach to writing software can be. I can
recall multiple instances of diving headfirst into the code, without taking some time to plan out what I was going to implement and consider
all of the edge cases.&lt;/p&gt;

&lt;p&gt;Kahneman’s insights offer an explanation for why this happens, but it is up to me (and you!) to be mindful and apply this insight to our daily work.&lt;/p&gt;

&lt;div class=&quot;aside&quot;&gt;
[1]: Whether you prescribe to the school of TDD(esign), TDD(evelopment), ATDD, BDD, etc etc is an implementation detail.
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Lightning Talk: Team-based Git Workflow (that doesn't suck)</title>
   <link href="http://mdswanson.com/talk/2012/03/15/lightning-talk-team-based-git-workflow-that-doesnt-suck.html"/>
   <published>2012-03-15T00:00:00+05:30</published>
   <updated>2012-03-15T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talk/2012/03/15/lightning-talk-team-based-git-workflow-that-doesnt-suck</id>
   <content type="html">&lt;p&gt;The slides from my Lightning Talk at &lt;a href=&quot;http://indysa.org&quot;&gt;IndySA&lt;/a&gt;.
&lt;script src=&quot;http://speakerdeck.com/embed/4f627e6172b23d00210043c8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>What's in my Side Project Queue?</title>
   <link href="http://mdswanson.com/blog/2012/03/01/my-side-project-queue.html"/>
   <published>2012-03-01T00:00:00+05:30</published>
   <updated>2012-03-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/03/01/my-side-project-queue</id>
   <content type="html">&lt;p&gt;I usually have two or three side projects that I’m hacking on at any given
time. I’ve tried sticking to one, but I like having a few options that I can
hop between.&lt;/p&gt;

&lt;p&gt;I’m winding down one project I’ve been working on for a few weeks 
(&lt;a href=&quot;https://github.com/sep/planning-poker-android&quot;&gt;an Android app for doing planning poker&lt;/a&gt;) which means it’s time to reach into my
giant bag of projects and pull something out.&lt;/p&gt;

&lt;p&gt;One thing I’ve been meaning to do more of is collaboration - with both people
in Indianapolis and across the web. So I figured I’d toss out my current
list of project ideas. If any of them sound cool to you and you want to work 
on it together (which would be totally awesome!), get in touch with me.&lt;/p&gt;

&lt;p&gt;#Project Queue (in no particular order)&lt;/p&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;garage-sailor&lt;/code&gt;  &lt;br /&gt;
Quick pitch: find local garage sales on your phone; use Craigslist or
other API to seed data; web app to list your own sales ($$$) and phone app to
browse the sales and get directions  &lt;br /&gt;
Potential Stack: MongoDB (geospatial index), &lt;a href=&quot;http://mapbox.com/tilemill/&quot;&gt;TileMill&lt;/a&gt;, &lt;a href=&quot;http://leaflet.cloudmade.com/&quot;&gt;Leaflet.js&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;merlin&lt;/code&gt;  &lt;br /&gt;
Quick pitch: “presentation magic”; I like writing slides in Markdown, but I
don’t really like ShowOff; 98% of my slides fit into 3 templates 
(large centered text, full screen image, bulleted list) that’s all I want to
support; provide a standard markup for theming and leverage one of the many
Javascript slide libraries  &lt;br /&gt;
Potential Stack: Ruby (DSL?), Markdown, &lt;a href=&quot;http://imakewebthings.github.com/deck.js/&quot;&gt;Deck.js&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;coder.fm&lt;/code&gt;  &lt;br /&gt;
Quick pitch: daily, customizable “radio show” centered around dev/tech news;
pull down RSS or other trigger-based data to build a “script” then run it
through text-to-speech to produce a 5-10 min audio file for the morning 
commute  &lt;br /&gt;
Potential Stack: RSS parser, cron, &lt;a href=&quot;http://osxdaily.com/2011/05/15/mac-os-x-lion-new-text-to-speech-voices-samples/&quot;&gt;Lion TTS&lt;/a&gt;, &lt;a href=&quot;http://tomclegg.net/mp3cat&quot;&gt;mp3cat&lt;/a&gt;, S3&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;git-tickets&lt;/code&gt;  &lt;br /&gt;
Quick pitch: clone of Github Issues as a stand-alone bug tracker with tight
integration with git ($$$); the anti-TFS/Jira  &lt;br /&gt;
Potential Stack: Backbone.js, &lt;a href=&quot;http://schacon.github.com/git/git-notes.html&quot;&gt;git-notes&lt;/a&gt;, &lt;a href=&quot;https://github.com/mojombo/grit&quot;&gt;grit&lt;/a&gt;, pretty CSS3/HTML5 stuff&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;pomojournal&lt;/code&gt;  &lt;br /&gt;
Quick pitch: I’m really into the whole &lt;a href=&quot;http://quantifiedself.com/&quot;&gt;Quantified Self&lt;/a&gt; stuff at the moment,
so I’ve started tracking my project work using the Pomodoro technique; this 
idea is a web-based journal that tracks my “poms” and has standard
features like tagging, search, and a timeline; ideally would be integrated
with a desktop tracking app  &lt;br /&gt;
Potential Stack: Rails, &lt;a href=&quot;https://github.com/ugol/pomodoro&quot;&gt;pomodoro&lt;/a&gt; (Mac), &lt;a href=&quot;https://github.com/ccidral/tomighty&quot;&gt;tomighty&lt;/a&gt; (Windows)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;hacker-stream&lt;/code&gt;  &lt;br /&gt;
Quick pitch: Activity feed targeted towards the “modern developer or 
designer”; aggregate actions from github, bitbucket, twitter, blog RSS, HN, 
Dribbble, Forrst, etc etc into a single feed; inspired by Mark Pilgrim’s (now
removed) “Firehose” page  &lt;br /&gt;
Potential Stack: &lt;a href=&quot;http://ogp.me/&quot;&gt;Open Graph&lt;/a&gt;, various APIs&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working title: &lt;code class=&quot;highlighter-rouge&quot;&gt;git-gradelevel&lt;/code&gt;  &lt;br /&gt;
Quick pitch: Script that computes the &lt;a href=&quot;http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_test&quot;&gt;Flesch–Kincaid Grade Level&lt;/a&gt; of each
committer in a git repo; the ultimate way to passive-aggressively tell your
teammates to stop writing shitty commit messages! “You write commit msgs
like a 3rd grader!”  &lt;br /&gt;
Potential Stack: shell, readability algorithms&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Repeating Background Textures in Android</title>
   <link href="http://mdswanson.com/blog/2012/01/30/repeating-background-textures-in-android.html"/>
   <published>2012-01-30T00:00:00+05:30</published>
   <updated>2012-01-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/01/30/repeating-background-textures-in-android</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;Pick something from &lt;a href=&quot;http://subtlepatterns.com/&quot;&gt;Subtle Patterns&lt;/a&gt;, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;irongrip.png&lt;/code&gt; and
drop it in your &lt;code class=&quot;highlighter-rouge&quot;&gt;drawable-hdpi&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;Make a &lt;a href=&quot;http://developer.android.com/reference/android/graphics/drawable/BitmapDrawable.html&quot;&gt;BitmapDrawable&lt;/a&gt;, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;irongrip_repeating.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/1708048.js?file=irongrip_repeating.xml&quot;&gt;
&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Apply it to a View&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/1708048.js?file=main.xml&quot;&gt;
&lt;/script&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/android-texture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A pretty simple way to spruce up an app, just don’t go overboard. Happy 
hacking!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Let's build a Ruby mocking framework! Sorta...kinda?</title>
   <link href="http://mdswanson.com/blog/2012/01/27/fun-with-ruby-metaprogramming.html"/>
   <published>2012-01-27T00:00:00+05:30</published>
   <updated>2012-01-27T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2012/01/27/fun-with-ruby-metaprogramming</id>
   <content type="html">&lt;p&gt;For whatever reason, I was thinking about mocking and stubbing the other day.&lt;/p&gt;

&lt;p&gt;It’s pretty cool that testing librarys allow such fine-grain control of 
objects under test. It’s powerful to be able to write tests with
functionality like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stubbedObj.expect(&quot;foo&quot;).willReturn(123)
mockObj.expect(&quot;bar&quot;).withArgs(&quot;baz&quot;).toBeCalled(4).shouldReturn(null)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I got to thinking about how you would actually implement such a library. I
wanted to explore some concepts of metaprogramming - but I didn’t want to 
see what something like NUnit or RSpec did under the hood. That would be
cheating; I wanted to see if I could figure out an approach that might work
on &lt;em&gt;my own&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I sat down to try out some ideas and quickly discovered that trying to 
duplicate all the functionality of a mocking/stubbing framework is hard
work. Certainly harder than I wanted to spend on a toy exercise on a Friday
evening!&lt;/p&gt;

&lt;p&gt;So I settled on trying to implement a basic Stub.&lt;/p&gt;

&lt;p&gt;My idea:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a class StubbedFoo that derives from Foo&lt;/li&gt;
  &lt;li&gt;Intercept all methods called on StubbedFoo before they went to Foo&lt;/li&gt;
  &lt;li&gt;Return a canned response based on the method name&lt;/li&gt;
  &lt;li&gt;Allow method/response pairs to be added to StubbedFoo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the mostly-working toy implementation in Ruby (took me about 90 
minutes):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1692237.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;I used Ruby’s &lt;code class=&quot;highlighter-rouge&quot;&gt;undef&lt;/code&gt; to undefine the instance methods of the class
under test on-the-fly. I then build up a &lt;code class=&quot;highlighter-rouge&quot;&gt;@canned_responses&lt;/code&gt; hash that uses
the method name (as a symbol) for the key.&lt;/p&gt;

&lt;p&gt;When you try to call a method (like &lt;code class=&quot;highlighter-rouge&quot;&gt;Statistics#compute_average&lt;/code&gt;) it hits 
the stub’s &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt; (since that method is now Undefined). The stub
simply returns the canned value from the hash or raises an exception if there
is no response setup.&lt;/p&gt;

&lt;p&gt;I tried to figure out how to structure the code so I could just mix it into
a class, instead of deriving directly - but I couldn’t get it working. Any
tips would be appreciated!&lt;/p&gt;

&lt;p&gt;I’ve only scratched the surface of what you can do with 
metaprogramming but I think this was a worthwhile exercise. I learned 
some new Ruby tricks and challenged myself to think about how code I take for 
granted is actually implemented.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Driving Technical Change</title>
   <link href="http://mdswanson.com/writeup/2012/01/25/driving-technical-change.html"/>
   <published>2012-01-25T00:00:00+05:30</published>
   <updated>2012-01-25T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/01/25/driving-technical-change</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
You’ve got a great idea for how to improve your development team. No one 
seems to listen. You keep trying and then get grumpy. This book tries to help
you not fail at introducing technical change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Quick read, but packed with good advice and realistic examples - which is
exactly the way I like my technical books. While it claims to be a “patterns”
book, I found it to be slightly different from others in the genre (especially
compared to &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0201741571/ref=nosim&amp;amp;tag=bookreview0a1-20&quot;&gt;another patterns book on the same topic I’m also reading&lt;/a&gt;)
but in a good way.&lt;/p&gt;

&lt;p&gt;The book begins by introducing seven types of “skeptics”, ranging from the
Uninformed and the Cynic to the Burned and the Timecrunched. It is a really 
effective way to help you internalize the advice given in the rest of the 
book, since most people have actually run across these archetypes in their
own jobs.&lt;/p&gt;

&lt;p&gt;Then, you jump straight into Techniques that you can use to convert skeptics.
Each section tells which type of skeptic a given technique will best 
“counter” and has examples that are actually plausible - the fictional 
characters are trying to introduce changes like automating deployment or
switching to an ORM.&lt;/p&gt;

&lt;p&gt;Lastly, the book lays out some general Strategies to improve the potency of 
the techniques. This section has some great content and very memorable calls-
to-action like Ignore the Irrational and Target the Willing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
I personally got a lot out of the book, as I have been interested in this 
topic for the past few months. The goal of the book is to help you convince 
co-works to adopt new ideas without resorting to the BS of office politics and
top-down mandates - so if that sounds appealing to you, give this book a shot.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Redis: Swiss Army Knife - Indy Software Artisans</title>
   <link href="http://mdswanson.com/talk/2012/01/19/redis-swiss-army-knife-indy-software-artisans.html"/>
   <published>2012-01-19T00:00:00+05:30</published>
   <updated>2012-01-19T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talk/2012/01/19/redis-swiss-army-knife-indy-software-artisans</id>
   <content type="html">&lt;script src=&quot;http://speakerdeck.com/embed/4f20bdf19d9fe6001f012e81.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Software Craftsmanship: The New Imperative</title>
   <link href="http://mdswanson.com/writeup/2012/01/07/software-craftsmanship-the-new-imperative.html"/>
   <published>2012-01-07T00:00:00+05:30</published>
   <updated>2012-01-07T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2012/01/07/software-craftsmanship-the-new-imperative</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The book lays out the concept of software craftsmanship, how it differs from software engineering,
and why your company might want to shift to a craftsmanship model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
While slightly dated, this book is a good overview of the “craftsmanship movement”. The book
does a good job of explaining what it might look like to work in a craftsmanship environment
and summarizes the different stages a programmer will go through (apprentice, journeymen, master
craftsman).&lt;/p&gt;

&lt;p&gt;The sections that outlined how to build a team - by letting a master craftsman hand pick the team - and
the emphasis on maintaining an app through the full life cycle were pretty interesting. I think it 
would be really neat to work in this kind of environment; the focus on quality, learning, team
camaraderie, and being a partner for clients align closely with my current thoughts on an “ideal”
setup.&lt;/p&gt;

&lt;p&gt;There was, intentionally, a lack of concrete examples or specific steps to follow but I found myself 
thinking “Okay - this sounds good, but how do I start making this happen at work?” and wanting more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Developers with an interest in software craftsmanship, apprenticeship, the “studio model” or managers
looking for advice on building excellent technical teams or introducing the craftsmanship culture to
an organization&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Year in Review: 2011</title>
   <link href="http://mdswanson.com/blog/2011/12/26/one-developer-year-in-review-2011.html"/>
   <published>2011-12-26T00:00:00+05:30</published>
   <updated>2011-12-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/12/26/one-developer-year-in-review-2011</id>
   <content type="html">&lt;p&gt;This post is mainly for my own benefit – I am repeatedly surprised by the phenomenon
of gradual improvement and taking an hour to summarize my year always makes it clear how 
much I have learned and grown as a developer.&lt;/p&gt;

&lt;p&gt;#Professional
My first full calendar year working at &lt;a href=&quot;http://www.sep.com&quot;&gt;SEP&lt;/a&gt; was quite eventful. I spent the first 9 months
continuing work on a long-running web application for an aerospace client. About half of the
time I was working on new features in the ASP.NET MVC part of the app and the other half was
spent fixing “short term high visibility” bugs. This meant digging around in legacy Perl code
and spending more time going back and forth with the client to gather requirements.&lt;/p&gt;

&lt;p&gt;I was getting anxious to leave the land of Perl and as the team dissipated until more work
packages were approved, I spent a short period on internal projects.&lt;/p&gt;

&lt;p&gt;For a week I was doing discovery work and researching SMS technologies for a project that
would help a &lt;a href=&quot;http://www.lovingsa.org/&quot;&gt;non-profit in South Africa&lt;/a&gt; collect medical data for impoverished children. 
I ended up recommending that the organization partner with a local group that already had a solution
for logging data with text messages.&lt;/p&gt;

&lt;p&gt;I spent another week trying to port an internal web app from Rails 1.X all the way to Rails 3. It
proved to be very difficult, as the combination of my lack of legacy Rails knowledge and a weird
deployment environment (MS SQL Server + Windows box) were too much to overcome in a week. 
I tried to lay the groundwork (adding a Gemfile, getting the database adapter working) so someone
else could try to pick up the effort in the future.&lt;/p&gt;

&lt;p&gt;I was pulled back onto billable work in September and joined a team of four on an Android project
in the medical space. Having never done Android development, it was both exciting and frustrating to
dive headfirst into a greenfield project. Within the app, I’ve focused on integrating a Javascript
charting library, as well as generating static reports that the user can email to themselves or 
their healthcare provider. Three months into the project, I think I’ve gained a solid understanding
of the ‘Android Way’ of doing things - especially tasks like background processing and service 
binding.&lt;/p&gt;

&lt;p&gt;I was fortunate enough to spend a day doing &lt;a href=&quot;http://www.agileproductdesign.com/presentations/user_story_mapping/index.html&quot;&gt;Story Mapping&lt;/a&gt; training with &lt;a href=&quot;https://twitter.com/#!/jeffpatton&quot;&gt;Jeff Patton&lt;/a&gt; and 
got to apply my newly learned abilities when doing a project estimate for a local bio-chem startup.&lt;/p&gt;

&lt;p&gt;A coworker and I took a week to build an iPad-friendly interface (with jQuery Mobile) for a 
section of an existing application that was well received by the client and is going to bring in 
one (if not two) projects for the iPad next year. I was involved with the client meetings to 
discuss the goals and requirements of those projects, giving me more insight into the work pipeline 
before it hits the Kanban board.&lt;/p&gt;

&lt;p&gt;I helped organize SEP’s first &lt;a href=&quot;/blog/2011/07/18/start-up-weekend-lessons-learned.html&quot;&gt;internal Startup Weekend&lt;/a&gt; that was held this past 
summer. Around 15 developers came in and built prototypes for three products in a single weekend. 
While none of the projects really took off this year, some were put into the internal project queue 
and have had more exploratory work done on them. Another Startup Weekend is scheduled for February 
2012 and I’ve made it a personal goal to get at least one of the projects launched to the public
this time.&lt;/p&gt;

&lt;p&gt;I participated (sometimes too much in my opinion…) in two book clubs at work: one for Rework and 
one for The Passionate Programmer.&lt;/p&gt;

&lt;p&gt;I got over my irrational fear that I needed to be an expert to present information on a topic and 
gave five brownbags talks over lunch.&lt;/p&gt;

&lt;p&gt;With the help of some friends at work, I started a weekly &lt;a href=&quot;/blog/2011/10/13/sep-blog-off.html&quot;&gt;Blog Battle&lt;/a&gt; with the goal of 
getting more engineers at SEP to start writing in a technical capacity. A group would decide on a 
title and then the participants would write a post about that title, with the contents up to each 
person’s own interpretation. This friendly competition ran for five weeks and had over 20 posts 
submitted.&lt;/p&gt;

&lt;p&gt;I didn’t achieve my (albeit ambitious) goal of “leveling up” to Software Engineer 2 by the end of 
the year, but I made good progress and, assuming I get some opportunities to demonstrate competency 
in a few key areas, I should be able to do it in 2012.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Personal&lt;/p&gt;

&lt;p&gt;##Community
I became a regular attendee and contributer to the Indy ALT.NET group. I gave four mini-talks
(15-30 minutes): writing with Markdown, Dive into Node.js, Javascript visualization libraries, and 
design shortcuts for weekend projects. The group is rebranding to &lt;a href=&quot;http://indysa.org/&quot;&gt;Indy Software Artisans&lt;/a&gt; and
I am slated to give a talk early in 2012.&lt;/p&gt;

&lt;p&gt;##Personal Projects&lt;/p&gt;

&lt;p&gt;###[Bibliotechnical][bt] - Status: &lt;span style=&quot;color: red;&quot;&gt;abandoned&lt;/span&gt;&lt;br /&gt;
My first stab at building something for public use. The idea was to build a technical book
aggregator that ranked books by metrics other than number of copies sold and star ratings. I
would rank books on things like shelf life, practical vs theoretical, target developer skill
level and use recommendations from Stack Overflow, Hacker News and Reddit. I would monetize using
affiliate links. The main issue was that I had no idea how to rank the books that I hadn’t read so
I just deferred that until the last moment – but once I reached the point when I needed to solve 
the problem, I still didn’t have a clue how to tackle it and lost interest.&lt;/p&gt;

&lt;h2 id=&quot;bt-httpsgithubcomswansonbibliotechnical&quot;&gt;[bt]: https://github.com/swanson/bibliotechnical&lt;/h2&gt;

&lt;p&gt;###[LandingPad.rb][lp] - Status: &lt;span style=&quot;color: green;&quot;&gt;shipped&lt;/span&gt;&lt;br /&gt;
I extracted the landing page that I built for Bibliotechnical into a separate project. I didn’t
understand why developers were paying money to other startups to create a ‘viral landing page’ when
it is pretty simple to make your own. I open sourced my simple version that collects email addresses
or Twitter handles which can be deployed to Heroku in just a few minutes.&lt;/p&gt;

&lt;h2 id=&quot;lp-httpsgithubcomswansonlandingpadrb&quot;&gt;[lp]: https://github.com/swanson/LandingPad.rb&lt;/h2&gt;

&lt;p&gt;###[Netflix-it-now][nin] - Status: &lt;span style=&quot;color: green;&quot;&gt;Works on my Machine!&lt;/span&gt;&lt;br /&gt;
Weekend project that I threw together with a friend. We were lamenting over IM one night
that it was dumb that Netflix had an “Add to Instant Queue” button, but only for movies that were
available to stream. If there was a movie that was only available on DVD, we wanted an option to
notify us when it became available for streaming. We threw together a basic Sinatra app and browser
extension to solve the problem. It worked well enough for our own use, but we didn’t want to deal
with support or making sure user data was absolutely secure so we never released it to the general
public.&lt;/p&gt;

&lt;h2 id=&quot;nin-httpsgithubcomswansonnetflix-it-now&quot;&gt;[nin]: https://github.com/swanson/netflix-it-now&lt;/h2&gt;

&lt;p&gt;###[Lanyon][lan] - Status: &lt;span style=&quot;color: goldenrod;&quot;&gt;shelved&lt;/span&gt;&lt;br /&gt;
I wanted a way to write posts for my Github Pages-powered Jekyll blog when I wasn’t on my main
machine. The idea was to add a single page to my blog to write a post and then, using Javascript to 
make calls to the Github API, generate a new commit and push it to my repository. I got it working
but I hasn’t happy with the authentication options: Github supports OAuth, but not a client-side
flow. So this project is shelved until that gets sorted out.&lt;/p&gt;

&lt;h2 id=&quot;lan-httpsgithubcomswansonlanyon&quot;&gt;[lan]: https://github.com/swanson/lanyon&lt;/h2&gt;

&lt;p&gt;###[Abe][abe] - Status: &lt;span style=&quot;color: green;&quot;&gt;shipped&lt;/span&gt;&lt;br /&gt;
“Abraham Lincoln? Isn’t he the President who…” – A stupid one-page app based on a long-running 
inside joke. Pointless, but fun to make.&lt;/p&gt;

&lt;h2 id=&quot;abe-httpabeherokucom&quot;&gt;[abe]: http://abe.heroku.com/&lt;/h2&gt;

&lt;p&gt;###[CloutBout][cb] - Status: &lt;span style=&quot;color: green;&quot;&gt;demoed&lt;/span&gt;&lt;br /&gt;
A fantasy football for Twitter app I built with some friends at the SocialDevCamp Chicago hackathon.
The idea is to apply fantasy sports-style scoring to Twitter: so you get points for tweeting, hash
tagging, posting links, etc. I think it’s a neat idea and we won a prize, but no one on the team
had the time or desire to take it anywhere past the hackathon.&lt;/p&gt;

&lt;h2 id=&quot;cb-httpsgithubcomswansoncloutbout&quot;&gt;[cb]: https://github.com/swanson/cloutbout&lt;/h2&gt;

&lt;p&gt;###[Dasher][dash] - Status: &lt;span style=&quot;color: goldenrod;&quot;&gt;ongoing&lt;/span&gt;&lt;br /&gt;
I’ve been working on and off with two coworkers to build a company dashboard with information
that engineers might care about – data like upcoming developer events, build server status, and
a diagram of what projects everyone is working on.&lt;/p&gt;

&lt;h2 id=&quot;dash-httpwwwsepcom&quot;&gt;[dash]: http://www.sep.com&lt;/h2&gt;

&lt;p&gt;###&lt;a href=&quot;http://www.sep.com&quot;&gt;Morale&lt;/a&gt; - Status: &lt;span style=&quot;color: green;&quot;&gt;shipped&lt;/span&gt;
By far, my most successful side project of the year. I built a Rails app to track developer
moods over the course of a project with a simple daily email. I wrote about it in more detail
&lt;a href=&quot;/blog/2011/10/13/intrapreneurship-applying-the-lean-startup-to-internal-tools.html&quot;&gt;here&lt;/a&gt;. It’s been used at work for around two months across three projects and feedback has been
positive. I am presenting the app to the whole company at a status meeting in January. I’d love
for it to be used company-wide and I think it will be a big help in gauging employee satisfaction.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##Blog&lt;/p&gt;

&lt;p&gt;I made a bigger effort to add content to my blog this year. I wrote 21 blog posts and posted 
reviews for eight books.&lt;/p&gt;

&lt;p&gt;I’ve been floored with the &lt;a href=&quot;http://www.hnsearch.com/search#request/all&amp;amp;q=swanson.github.com&quot;&gt;success&lt;/a&gt; of some of my posts on Hacker News – it is 
really exciting to see your blog make the front page and to read all the comments from other 
developers. The coolest event for me was when someone else submitted a post I had written and it 
hit the #1 spot for a few hours; it was an awesome feeling to have someone else like my post enough 
to want to share it with others.&lt;/p&gt;

&lt;p&gt;Between the seven posts that got over 15 points on HN and a bunch of long-tail searches for
&lt;code class=&quot;highlighter-rouge&quot;&gt;github API&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;startup weekend tips&lt;/code&gt;, my blog traffic blew past any expectations I 
had.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/analytics-2011.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not bad for a random developer in Indiana!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Closing Thoughts on 2011
It’s hard to see your own improvement – your day-to-day performance doesn’t seem to be any 
different. On the internet, it seems like everyone is doing cool stuff all the time and you are 
falling behind. You aren’t alone, I get this feeling all the time; we are always our own toughest
critic and usually the last ones to praise ourselves.&lt;/p&gt;

&lt;p&gt;Just remember that it only takes 365 people (out of the millions of developers) with a single neat 
project to fill the pages of Reddit and HN for a year. Keep that in mind the next time you feel bad 
about “never producing anything”.&lt;/p&gt;

&lt;p&gt;Take an hour this week to look back at your own year’s accomplishments and I think you’ll find that 
you’ve done and learned more than you thought.&lt;/p&gt;

&lt;p&gt;Have a safe and happy New Year.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Global Day of Code Retreat Recap</title>
   <link href="http://mdswanson.com/blog/2011/12/05/global-day-of-code-retreat-recap.html"/>
   <published>2011-12-05T00:00:00+05:30</published>
   <updated>2011-12-05T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/12/05/global-day-of-code-retreat-recap</id>
   <content type="html">&lt;p&gt;Over the weekend, I took part in the Indy edition of the &lt;a href=&quot;http://blog.coderetreat.com/global-day-of-coderetreat&quot;&gt;Global Day of Code Retreat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had never been to a Code Retreat before and didn’t really know what to expect.&lt;/p&gt;

&lt;p&gt;The gist of a Code Retreat is to take some time to practice writing code and applying techniques 
that you aren’t normally able to use in your day job - usually due to schedule or budget pressure. 
This practice is facilitated by Pair Programming in small sessions. The idea is to work on solving
a problem (&lt;a href=&quot;http://en.wikipedia.org/wiki/Conway's_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;) for 45 minutes, then delete your code, rotate pairs, and
start again.&lt;/p&gt;

&lt;p&gt;Each pairing rotation also has a unique set of constraints that encourages you to think outside
the box and explore new ways to solve the same problem.&lt;/p&gt;

&lt;p&gt;There is plenty of extra information about Code Retreats available elsewhere, so I thought it might 
be valuable to recap what I actually did during the pairing sessions.&lt;/p&gt;

&lt;p&gt;#Pair One
My first pairing of the day was with Jon, who was a self-described “procedural guy”. He worked on
writing installers in his day job so he was interested in doing more OOP stuff.&lt;/p&gt;

&lt;p&gt;We decided to use Ruby and RSpec for our development environment - mainly because I wanted to try it
out and Jon was willing to indulge me.&lt;/p&gt;

&lt;p&gt;We spent most of the time getting familiar with the problem domain and applying the Four Rules of the
Universe to a Cell class. I introduced Jon to Ping Pong pairing, which was a concept that I was 
introduced to by an &lt;a href=&quot;http://spraints.github.com/&quot;&gt;old coworker&lt;/a&gt; and we ended up getting all of our tests passing. We
were about to move on to start modeling the Board when time was up.&lt;/p&gt;

&lt;p&gt;#Pair Two
I was able to find someone else that wanted to use Ruby, so I paired with a guy named Shawn next. 
The challenge for this round was to try to use polymorphism instead of primitive-types (e.g. use
an enum of states instead of a boolean flag).&lt;/p&gt;

&lt;p&gt;Shawn wanted to explore an idea that would have a Cell generate it’s own neighbors on the Board
when the game first started. We came up with a neat concept for navigating to neighbors using
a Hash with keys like &lt;code class=&quot;highlighter-rouge&quot;&gt;:left&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:up&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:down&lt;/code&gt; - then we could combine two directions
to find a Cells upper-left neighbor for example.&lt;/p&gt;

&lt;p&gt;We struggled to find a good way to detect if a given Cell needed to be generated or if it had
already been generated by another Cell. We were making some progress, but then time expired.&lt;/p&gt;

&lt;p&gt;#Pair Three
After we rotated, I was paired with Daniel, a .NET developer that I knew from Indy ALT.NET. Our
constraint for this round of pairing was to focus on how we would deal with the “infinite-nature”
of the Game of Life. It is rather simple to model the game as an &lt;code class=&quot;highlighter-rouge&quot;&gt;N x N&lt;/code&gt; array, but what happens 
when N becomes larger than can fit in memory.&lt;/p&gt;

&lt;p&gt;Daniel and I spent a bit of time brainstorming an idea based around circular buffers. The idea was
to keep only a finite chunk of the universe in memory at a time and partition the rest of the data
into ‘stripes’ that could be stored to disk. It was described as a cylinder with other tangent 
cylinders in 3D space- yeah, sounds pretty weird but made sense at the time…&lt;/p&gt;

&lt;p&gt;We used C# this time and when time expired we were in the middle of debugging why the &lt;code class=&quot;highlighter-rouge&quot;&gt;Blinker&lt;/code&gt; shape
wasn’t working.&lt;/p&gt;

&lt;p&gt;#Pair Four (after lunch break)
I stayed in .NET land and paired with Mike, another familiar face from ALT.NET. We had talked about
doing an event-driven model over lunch so we decided to try to implement it. The challenge for this
iteration was to do Ping Pong pairing - since I had been doing this all along, nothing really changed
for me.&lt;/p&gt;

&lt;p&gt;The event-driven model was a pretty neat concept. Instead of trying to manage a global Board state, 
we would use a message bus and cells would subscribe to it. Each cell would filter out messages
that weren’t relevant and broadcast messages about itself (“I’m alive”, “I’m dying”, etc).&lt;/p&gt;

&lt;p&gt;Using a test-driven approach allowed us to define the public “messaging API” quickly and we were
able to spot problems almost immediately. We ran into a few cases of getting stuck on stuff
outside the problem domain so we were just getting into the meat of the message bus when time
ran out.&lt;/p&gt;

&lt;p&gt;#Pair Five
Back to RSpec and Ruby as I paired with Vamshi. Vamshi took a different approach that any of my
other pair partners. When I immediately went to start writing the first test, he stopped me and
we discussed the overall design we wanted for 2-3 minutes.&lt;/p&gt;

&lt;p&gt;I think this was helpful because, at this point in the day, I was kind of an auto-pilot for the
first 15 minutes of the pairings. First we make the Cell class, then we add the tests for the rules,
then we add the Board class with a list of Cells…&lt;/p&gt;

&lt;p&gt;By stopping and re-approaching the problem from a different angle, my preconceived ideas were
put aside. In our design, we wouldn’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;is_alive?&lt;/code&gt; boolean because we weren’t going to track
dead cells. Since our constraint for this round was “Tell, Don’t Ask”, our design shifted into
something that resembled the Command pattern.&lt;/p&gt;

&lt;p&gt;Vamshi also showed me some neat conventions that he uses for RSpec. I found the pairing to be
really beneficial, for me at least, because I was able to learn some practical tricks from my 
partner that I can immediately apply to my day job.&lt;/p&gt;

&lt;p&gt;It was definitely my favorite pair and I was bummed at how fast the 45 minutes went by.&lt;/p&gt;

&lt;p&gt;#Pair Six
For this pair, we went back to our original partners from the morning session (Jon in my case)
and all constraints were removed.&lt;/p&gt;

&lt;p&gt;Jon and I were both a little tired of writing the Cell and Board logic, so we decided to explore
an area that neither of us had gotten to work on yet - a graphical representation of the board.&lt;/p&gt;

&lt;p&gt;We tried out “Ping Pong Pairing with Loopholes” - basically you try to screw over your teammate
by making the tests pass, but leaving the code still technically wrong - with the goal being to 
help you write tests that are more bullet-proof.&lt;/p&gt;

&lt;p&gt;#Closing Circle
After six rounds of pairing, we regrouped and talked about the day for a bit. After going around
the circle, I traded business cards with a few people and headed home after a long (but fun!)
day.&lt;/p&gt;

&lt;p&gt;A big thanks to &lt;a href=&quot;http://www.aaronlerch.com/blog/&quot;&gt;Aaron Lerch&lt;/a&gt; for facilitating, &lt;a href=&quot;http://www.inin.com/&quot;&gt;Interactive Intelligence&lt;/a&gt; for hosting 
the event, and everyone there for making the event a huge success!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>What's on your Learning List?</title>
   <link href="http://mdswanson.com/blog/2011/12/04/whats-on-your-learning-list.html"/>
   <published>2011-12-04T00:00:00+05:30</published>
   <updated>2011-12-04T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/12/04/whats-on-your-learning-list</id>
   <content type="html">&lt;p&gt;How do you track and decide what topics you want to spend time learning?&lt;/p&gt;

&lt;p&gt;For a while, I didn’t have a real good solution. Something would trigger me to remember 
“Oh yeah! I really wanted to learn more about that”. I would spend the evening doing 
&lt;strong&gt;busy learning&lt;/strong&gt; - it seemed like I was learning but I really wasn’t.&lt;/p&gt;

&lt;p&gt;Instead of trying to do &lt;a href=&quot;http://en.wikipedia.org/wiki/Practice_(learning_method)#Deliberate_practice&quot;&gt;Deliberate Practice&lt;/a&gt;, I’d fool myself into thinking I was investing 
my time wisely by reading blog posts and examples but not actually doing much of anything.&lt;/p&gt;

&lt;p&gt;Soon, the enthusiasm would pass and my progress would stale. Rinse and repeat for a new topic the
next time inspiration struck.&lt;/p&gt;

&lt;p&gt;Enter the Learning List.&lt;/p&gt;

&lt;p&gt;I can’t remember if it was an exercise from &lt;a href=&quot;http://pragprog.com/book/ahptl/pragmatic-thinking-and-learning&quot;&gt;Pragmatic Learning and Thinking&lt;/a&gt; or something 
I heard from &lt;a href=&quot;http://www.merlinmann.com/&quot;&gt;Merlin Mann&lt;/a&gt; on &lt;a href=&quot;http://5by5.tv/b2w&quot;&gt;Back to Work&lt;/a&gt;, but the idea is to take 10 minutes and dump
everything you want to learn onto a sheet of paper. Don’t stop to rank the items or debate whether 
or not you really want to learn something, just record your stream of consciousness and get it on 
the page.&lt;/p&gt;

&lt;p&gt;Once it’s written down, you can let your mental garbage collector do its thing. You don’t need
to worry about what the name of that one library you wanted to play with was or keep track of the
five new technologies you wanted to learn.&lt;/p&gt;

&lt;p&gt;Here’s the list I made a few months ago: (with picture to prove I actually wrote it down on paper!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/learning-list.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##Topics to learn&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-s*** Javascript (*)&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;CoffeeScript&lt;/li&gt;
  &lt;li&gt;Enterprise Rails + toolchain (*)&lt;/li&gt;
  &lt;li&gt;Processing/visualizations&lt;/li&gt;
  &lt;li&gt;Shopify templates&lt;/li&gt;
  &lt;li&gt;Better design&lt;/li&gt;
  &lt;li&gt;HTML5 Single-page app&lt;/li&gt;
  &lt;li&gt;Redis&lt;/li&gt;
  &lt;li&gt;Backbone.js&lt;/li&gt;
  &lt;li&gt;Nginx&lt;/li&gt;
  &lt;li&gt;Payment gateways&lt;/li&gt;
  &lt;li&gt;How to finish what I start (*)&lt;/li&gt;
  &lt;li&gt;Ethernet with Arduino&lt;/li&gt;
  &lt;li&gt;Vim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can cluster topics together and see where there is overlap. Overlap is probably
a sign that the topic is one that you &lt;em&gt;really&lt;/em&gt; want to learn. For me, I saw that Javascript was
a common theme - Node.js, CoffeeScript, backbone.js, single-page apps, and the enterprise-level
Rails toolchain are all linked.&lt;/p&gt;

&lt;p&gt;The items that I starred were things that I kept coming back to - topics that I frequently found
myself wishing I knew better. These are the items that I should focus on first.&lt;/p&gt;

&lt;p&gt;But the biggest gain I got from writing the list was the realization that there were topics that I 
didn’t even think about or spend any further time on. For some reason, I got really excited about 
&lt;a href=&quot;http://themes.shopify.com/&quot;&gt;Shopify templates&lt;/a&gt; one week and I haven’t thought of again since I looked back at this list. It 
is obvious, in hindsight, that I wasn’t really passionate about it and wasn’t going to have the 
drive to see it through to the end. This same logic applied to several more topics: Payment 
gateways, Vim, and Arduino.&lt;/p&gt;

&lt;p&gt;It feels like a weight has been lifted off my mind when I can mark off topics. I found
this technique to be very helpful when dealing with the inundation of information to learn.&lt;/p&gt;

&lt;p&gt;So, as we approach the start of a new year, I encourage you to take some time for personal reflection
and try making a Learning List. If you do, let me know - I’d love to see what’s on it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Art of Readable Code</title>
   <link href="http://mdswanson.com/writeup/2011/12/01/the-art-of-readable-code.html"/>
   <published>2011-12-01T00:00:00+05:30</published>
   <updated>2011-12-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/12/01/the-art-of-readable-code</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
This books aims to be the “simple and practical” guide to writing better, more readable code. It
is structured as a series of tips - with an anecdote and explanation of the how and why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
It was a really frustrating book. I am all about readable code so I was really excited to read
this book when it was released. The problem is that I disagree with several of the major 
sections in the book.&lt;/p&gt;

&lt;p&gt;I don’t like the authors take on code comments - I couldn’t disagree more strongly with the point
that comments should be a “redundancy check”. The book seems to be contrarian for the sake of
being contrarian by stating that “goto” is misunderstood and even appropriate in some cases 
(I still can’t believe this was in a book that was published in 2011).&lt;/p&gt;

&lt;p&gt;The sections on code aesthetics were nice, since this is something that I don’t recall being
pointed out in other books. I also liked the section on “summary” vs “explaining” variables.&lt;/p&gt;

&lt;p&gt;But I found myself rolling my eyes in frustration several times when I read advice that I
considered just plain wrong.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Overall, I wouldn’t recommend the book - there are better options (Clean Code, Code Complete 2).
If you do want to pick this one up, make sure you take it with a grain of salt.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Agile Retrospectives</title>
   <link href="http://mdswanson.com/writeup/2011/12/01/agile-retrospectives.html"/>
   <published>2011-12-01T00:00:00+05:30</published>
   <updated>2011-12-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/12/01/agile-retrospectives</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Like the title suggests, this book drills down into retrospective meetings conducted by agile
software teams. Retrospective meetings are really important, but are often either overlooked
or poorly facilitated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Awesome. This book made me want to try leading the next retrospective meeting for my team.&lt;/p&gt;

&lt;p&gt;An important focus of the book is on how to &lt;em&gt;design&lt;/em&gt; a retrospective. There is more to it than
just getting the team in a room and complaining for an hour.&lt;/p&gt;

&lt;p&gt;I really liked the list of activities and exercises, especially because the book clearly explained
WHY to do each activity and what you, as a facilitator, should be trying to gain from them. It’s
one thing to say “have everyone write Explorer, Shopper, Vacationer, or Prisoner on a card” - 
but the book explains that you can use this to set understand people’s attitude toward the meeting
and adjust your tone/agenda accordingly.&lt;/p&gt;

&lt;p&gt;For someone like myself who has never lead a retrospective, this book is a great resource. There
are step-by-step actions to take, with lots of examples and even guidelines for how to time-box
each section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
All team leads, those looking to become team leads, anyone leading retrospectives - if you
haven’t read this book, I think you are really missing out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building an SEP API - Brownbag</title>
   <link href="http://mdswanson.com/talks/building-sep-api/index.html"/>
   <published>2011-11-29T00:00:00+05:30</published>
   <updated>2011-11-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talks/building-sep-api/building-sep-api</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Overcoming Momentum</title>
   <link href="http://mdswanson.com/blog/2011/11/27/overcoming-momentum.html"/>
   <published>2011-11-27T00:00:00+05:30</published>
   <updated>2011-11-27T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/11/27/overcoming-momentum</id>
   <content type="html">&lt;p&gt;4:47 pm on a Friday. You’ve spent all week fighting with your code. But, finally, you 
are able to get it whipped into shape.&lt;/p&gt;

&lt;p&gt;You want nothing more than to &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; and head home.&lt;/p&gt;

&lt;p&gt;So you do.&lt;/p&gt;

&lt;p&gt;As you pull onto the freeway, you have a nagging feeling that you left something
unfinished. You didn’t go back and delete that dead code you commented out. Or you
skipped writing a test for a corner-case because it is painful and takes too long.&lt;/p&gt;

&lt;p&gt;Your team leaves a comment in the issue tracker indicating the build number that contains your 
fixes to make it easier for the testing team. You realize you forgot to do that while sitting at 
a stoplight.&lt;/p&gt;

&lt;p&gt;By the time Monday rolls around, you’ve forgotten these defects and moved onto something else.&lt;/p&gt;

&lt;p&gt;It happens to all of us.&lt;/p&gt;

&lt;p&gt;The problem is that the &lt;em&gt;Don’t break the chain&lt;/em&gt; feeling that momentum reinforces works 
both ways. If your momentum is trending negatively, you will find that it becomes increasing 
harder to get back into good habits.&lt;/p&gt;

&lt;p&gt;If you skimped on writing tests last week, it becomes easier to repeat the behavior
again. Skipping a step in your process and not correcting it will eventually lead to
that step disappearing all together.&lt;/p&gt;

&lt;p&gt;This effect is not limited to individuals. As Andy Hunt and Dave Thomas put it, it only
takes &lt;a href=&quot;http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy&quot;&gt;one broken window&lt;/a&gt; to trigger software rot in a project:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One broken window, left unrepaired for any substantial length of time, instills in the 
inhabitants of the building a sense of abandonment - a sense that the powers that be don’t care 
about the building. So another window gets broken. People start littering. Graffiti appears. 
Serious structural damage begins. In a relatively short space of time, the building becomes 
damaged beyond the owner’s desire to fix it, and the sense of abandonment becomes reality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Bystander_effect&quot;&gt;Bystander Effect&lt;/a&gt; then goes into full force: everyone on the team assumes that 
if there is a problem that needs to be addressed, someone else will bring it up. When a negative
behavior is not acknowledged by the team, individuals are less likely to see it as a problem or 
take responsibility for fixing it.&lt;/p&gt;

&lt;p&gt;I can offer a few hacks to help stop this behavior:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t check-in after 4pm if you are leaving at 5pm. Come back to the code in the morning
 when you are fresh and tie up the loose ends&lt;/li&gt;
  &lt;li&gt;Stop using ‘we’ at standup meetings. Don’t say “We need to stop skipping tests”. Directly
 address the people that need to change; if this seems too confrontational for your meetings, do
 it in private&lt;/li&gt;
  &lt;li&gt;Printing off a checklist of your process and hanging it up behind your monitor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These help treat the symptoms but not the root cause. To really curb negative momentum, each
member of the team has to be mindful and take pride in their work. If apathy is the cause, then 
no amount of Tips and Tricks is going to help.&lt;/p&gt;

&lt;p&gt;But what you, the individual, can do is to lead by example. The great part about the Bystander
Effect (and more specifically &lt;a href=&quot;http://en.wikipedia.org/wiki/Social_proof&quot;&gt;social proof&lt;/a&gt;) is that while inaction breeds more
inaction, positive behaviors are also adopted.&lt;/p&gt;

&lt;p&gt;When I see a teammate putting in extra time to do something The Right Way, I am more likely to 
follow suit. When someone sees me refactoring bad code, they will take extra care to make their
own code better.&lt;/p&gt;

&lt;p&gt;Before you start trying to fix other people, make sure you are following the behaviors and
practices that you want everyone else to.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Weapon of Choice</title>
   <link href="http://mdswanson.com/blog/2011/11/12/weapon-of-choice.html"/>
   <published>2011-11-12T00:00:00+05:30</published>
   <updated>2011-11-12T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/11/12/weapon-of-choice</id>
   <content type="html">&lt;p&gt;One thing I love about writing my own little side-projects and one-off programs is that I
can constantly try out new ‘weapons’ for developing software. And once I get a feel for something
I like, I can practice and train myself to become more effective with it.&lt;/p&gt;

&lt;p&gt;When I’ve gone to battle lately, here’s what I’ve been bringing:&lt;/p&gt;

&lt;p&gt;##Language: &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;
If you told me two years ago that I would reach for Ruby as my go-to language, I wouldn’t have
believed you. I was pretty into Python - the language I was learning when I first fell in love
with programming - and Ruby was a little weird (I still find some Ruby syntax inferior
to Python).&lt;/p&gt;

&lt;p&gt;But I like &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt; more than &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;, I like Rails more than Django, and Sinatra is close enough to 
Flask that I don’t notice.&lt;/p&gt;

&lt;p&gt;I still bust out Python for one-off scripts, but if I’m starting a web project these days, it’s
going to be in Ruby.&lt;/p&gt;

&lt;p&gt;There are no heavy IDEs required, no 30 lines of boilerplate and no complicated process to get
my program running. There is a vibrant community of developers (both locally and across the 
web) making gems, writing posts, and creating learning materials that make Ruby a joy to 
work with.&lt;/p&gt;

&lt;p&gt;##Datastore: &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;
Let’s put aside the arguments of scalability, ACID, reliability, etc etc.&lt;/p&gt;

&lt;p&gt;I like MongoDB because it gels with how I think. I really like the concept of a document store
and Mongo’s ad-hoc queries can do everything I need. But most importantly, no setting up a rigid
schema and defining a bunch of tables. There’s a time and place for a rock-solid SQL setup with
migrations, foreign keys, and a heavy-duty ORM - but not for most of my projects.&lt;/p&gt;

&lt;p&gt;##Platform: &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;
I don’t think this needs much explaining - Heroku is just awesome. Git-based deployment, tons of
easy to use addons (MongoHQ, Cron, and SendGrid are my personal favorites), and everything Just
Works. I recently spent some time setting up nginx, Unicorn, and Capistrano for a project and it
made me appreciate how simple and elegant Heroku is even more. &lt;a href=&quot;https://twitter.com/#!/devops_borat&quot;&gt;DevOps&lt;/a&gt; is just not my
thing.&lt;/p&gt;

&lt;p&gt;##Frontend: &lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Bootstrap&lt;/a&gt; + &lt;a href=&quot;https://github.com/necolas/css3-github-buttons&quot;&gt;css3-github-buttons&lt;/a&gt;
Bootstrap is a piece of drop-in magic that gives me the power to make things not look awful. The 
grid system is easy to use, the default fonts look good, and the form elements are really slick.&lt;/p&gt;

&lt;p&gt;The css3-github-buttons project is a set of commonly-used buttons and icons. All I have to do 
is add &lt;code class=&quot;highlighter-rouge&quot;&gt;class=&quot;button icon search&quot;&lt;/code&gt; to a link to transform it into a rounded button with a subtle
gradient and magnifying glass glyph icon.&lt;/p&gt;

&lt;p&gt;I don’t have the artistic ability to be a designer, but I know what looks good and what doesn’t.
My projects without Bootstrap don’t look good, and my projects with Bootstrap do.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My Weapons of Choice share some common traits; I look for something that is fast and 
straightforward to get started with, flexible, expressive, and, most importantly, readable.&lt;/p&gt;

&lt;p&gt;I spent like an hour on wikipedia looking through this &lt;a href=&quot;http://en.wikipedia.org/wiki/Lists_of_weapons&quot;&gt;List of Weapons&lt;/a&gt; to try to find 
one that matched these traits and I ended up picking the &lt;a href=&quot;http://en.wikipedia.org/wiki/B%C5%8D&quot;&gt;Bō&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yup, it’s a wooden stick - that’s how I roll.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Over/Under: I'm a Serial Over Committer</title>
   <link href="http://mdswanson.com/blog/2011/11/02/engineering-over-under.html"/>
   <published>2011-11-02T00:00:00+05:30</published>
   <updated>2011-11-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/11/02/engineering-over-under</id>
   <content type="html">&lt;p&gt;Over committing - taking on too many things at once - is a pretty established anti-pattern.&lt;/p&gt;

&lt;p&gt;When you have too much work in progress, you start to lose focus. You might be able to keep your
head above water, but you end up just doing an okay job on everything, instead of 
doing a great job on anything.&lt;/p&gt;

&lt;p&gt;Taking on a bunch of extra work and then not delivering is a big hit to your 
credibility. Crunch time comes and you feel the pressure; you start getting stressed and 
everything is on the verge of falling apart.&lt;/p&gt;

&lt;p&gt;Okay, so I’ll avoid over committing to a bunch of stuff, you might say - I’ve got this all figured out!&lt;/p&gt;

&lt;p&gt;Well, not exactly.&lt;/p&gt;

&lt;p&gt;Suppose your manager comes over and asks if you want to work on a speculative new project - it’s interesting
technology but it’s going to require some extra work on your own time. You decide to pass on the
opportunity. No problem.&lt;/p&gt;

&lt;p&gt;Nothing undesirable happens immediately as a result - except that maybe your manager is a little bummed 
out. But maybe the next time one of these projects comes up, they’ll ask Bob first. Maybe that 
speculative project turns into a full fledged project and you missed your chance to work on it.&lt;/p&gt;

&lt;p&gt;What if you said yes to the initial offer, but didn’t follow through? You were gung-ho that afternoon
but 2 weeks later, you’ve lost all interest. How is that perceived? Do you lack the ability to be a 
finisher?&lt;/p&gt;

&lt;p&gt;With that in mind, do you go back in time and agree to the project even though you had 20 other things on 
your plate?  The desire to not under commit and miss an opportunity has caused you to over commit!&lt;/p&gt;

&lt;p&gt;Maybe this isn’t an issue for anyone else - feel free to chime in and tell me I’m way over analyzing -
but as a young developer trying to improve my craft and move up the hierarchy at work this is 
something I struggle with frequently.&lt;/p&gt;

&lt;p&gt;I am a serial over committer.&lt;/p&gt;

&lt;p&gt;I start new side projects when I find something that excites me - I hype myself up, maybe I start a 
series of blog posts but then it fizzles. I sign up to give talks almost every month, often with nothing 
more than a basic idea of what I’m going to be presenting about two weeks later.&lt;/p&gt;

&lt;p&gt;Right now, I’m working on two extra work-related projects, helping organize a friendly blogging competition, 
finishing a book club and I signed up to pitch an idea for a new series of internal projects at the end 
of the month. This isn’t a badge of honor or something to brag about; I’ve committed myself to way more than 
I should have and it’s not sustainable.&lt;/p&gt;

&lt;p&gt;“But you never finish anything!” is a meme that co-workers jokingly needle me with.&lt;/p&gt;

&lt;p&gt;It’s a flaw of mine that I’m trying to work on. I’m starting to learn why I do it - I don’t want to miss 
out on any opportunities. I want to be that go-to person, that expert, that guy who Gets Shit Done. And I’m 
impatient. And I have this irrational fear that I’ll miss that one magically project that I’ll love 
and another one will never come.&lt;/p&gt;

&lt;p&gt;I need to find the right balance of over/under committing. And striking that balance is a hard problem. 
Like cache invalidation hard.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Get Better</title>
   <link href="http://mdswanson.com/blog/2011/10/24/get-better.html"/>
   <published>2011-10-24T00:00:00+05:30</published>
   <updated>2011-10-24T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/10/24/get-better</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;... the sooner you care, the better you'll make. The better you'll do. And the 
  better you'll live.&lt;/p&gt;    
  &lt;cite&gt;&lt;a href=&quot;http://www.43folders.com/2011/01/17/permission-to-be-awesome&quot;&gt;
  Merlin Mann&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take 5 minutes to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the most interesting blog post in your RSS reader&lt;/li&gt;
  &lt;li&gt;Look through the code you wrote today and find a place to improve&lt;/li&gt;
  &lt;li&gt;Write down any problems you encountered today&lt;/li&gt;
  &lt;li&gt;Learn a new keyboard shortcut for your IDE, source control tool, or shell&lt;/li&gt;
  &lt;li&gt;Ask a co-worker if they’ve read anything interesting lately&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take 15 minutes to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Refactor a piece of code you wrote this week&lt;/li&gt;
  &lt;li&gt;Find code that’s missing tests and add one&lt;/li&gt;
  &lt;li&gt;Update your team/company wiki&lt;/li&gt;
  &lt;li&gt;Read a few of the top stories on &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;news.yc&lt;/a&gt; or &lt;a href=&quot;http://reddit.com/r/programming&quot;&gt;/r/programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Read a chapter in a technical book&lt;/li&gt;
  &lt;li&gt;Write a thoughtful comment on a blog post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take 30 minutes to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Watch a talk from a &lt;a href=&quot;http://lanyrd.com/&quot;&gt;conference that interests you&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Write a blog post about a bug you encountered and how you fixed it&lt;/li&gt;
  &lt;li&gt;Write a blog post about something you’ve been working on or learning about&lt;/li&gt;
  &lt;li&gt;Listen to a podcast - here are some I like: &lt;a href=&quot;/blog/2011/10/01/podcast-roundup-iii.html&quot;&gt;Podcast Roundup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Do a &lt;a href=&quot;http://codekata.pragprog.com/&quot;&gt;kata&lt;/a&gt; or a problem on &lt;a href=&quot;http://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Attend a brownbag or lunch-and-learn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take an hour a week to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Help an open source library that you use - patchs, documentation, bugs&lt;/li&gt;
  &lt;li&gt;Work on a side-project on your own&lt;/li&gt;
  &lt;li&gt;Watch a &lt;a href=&quot;http://peepcode.com/&quot;&gt;screencast&lt;/a&gt; about something new&lt;/li&gt;
  &lt;li&gt;Try to answer some questions on &lt;a href=&quot;http://stackoverflow.com/unanswered&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Do prep work to host a brownbag or meetup talk&lt;/li&gt;
  &lt;li&gt;Take an online class: Stanford courses on &lt;a href=&quot;http://www.stanford.edu/class/cs193p/cgi-bin/drupal/&quot;&gt;iPhone&lt;/a&gt;, &lt;a href=&quot;http://www.ml-class.org/course/class/index&quot;&gt;Machine Learning&lt;/a&gt;, &lt;a href=&quot;https://www.ai-class.com/&quot;&gt;AI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take 2 hours a month to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to a &lt;a href=&quot;http://indyhackers.org/&quot;&gt;local dev meetup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Take someone you look up to out to lunch and pick their brain&lt;/li&gt;
  &lt;li&gt;Do self reflection and update your position on &lt;a href=&quot;http://ofps.oreilly.com/titles/9780596518387/walking_the_long_road.html#the_long_road&quot;&gt;The Long Road&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plan out how to Get Better over the next month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a weekend a year to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to a conference&lt;/li&gt;
  &lt;li&gt;Attend a &lt;a href=&quot;http://indianapolis.startupweekend.org/&quot;&gt;Startup Weekend&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Hackathon&quot;&gt;Hackathon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use your craft to &lt;a href=&quot;http://indygivecamp.org/&quot;&gt;help others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take one minute a day - just 60 seconds - to stop and ask yourself this question:&lt;/p&gt;

&lt;p&gt;Did I &lt;strong&gt;Get Better&lt;/strong&gt; today?&lt;/p&gt;

&lt;p&gt;If you aren’t happy with your answer, do something about it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Javascript Day: Node + Visualization Libraries - Indy ALT.NET</title>
   <link href="http://mdswanson.com/talks/javascript-day/index.html"/>
   <published>2011-10-20T00:00:00+05:30</published>
   <updated>2011-10-20T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talks/javascript-day/javascript-day</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Web Development Kata - Tweet Viewer</title>
   <link href="http://mdswanson.com/blog/2011/10/17/webdev-katas.html"/>
   <published>2011-10-17T00:00:00+05:30</published>
   <updated>2011-10-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/10/17/webdev-katas</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;I’ve been on the lookout for practical katas related to web
development. I couldn’t really find any I liked so I tried my hand at writing
one myself.&lt;/p&gt;

  &lt;p&gt;I think this problem fits the kata model pretty well - iterative steps
that build on each other and an almost infinite way to accomplish most of the tasks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt;&lt;br /&gt;
The boss wants to keep up-to-date on that new social media thing,
but Twitter’s UI is too advanced for him. He wants you to whip up a simple Tweet Viewer
so he can maximize his synergy and improve team dynamics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pre-Reqs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A web environment that can speak HTTP&lt;/li&gt;
  &lt;li&gt;A text editor&lt;/li&gt;
  &lt;li&gt;A browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Provided:&lt;/strong&gt;&lt;br /&gt;
A static list of tweets: &lt;a href=&quot;/static/sample-tweets.txt&quot;&gt;sample-tweets.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Display a tweet&lt;/li&gt;
  &lt;li&gt;Display a static list of tweets&lt;/li&gt;
  &lt;li&gt;Linkify @mentions and #hashtags&lt;/li&gt;
  &lt;li&gt;“Pretty print” timestamps&lt;/li&gt;
  &lt;li&gt;Display tweets for a specific user&lt;/li&gt;
  &lt;li&gt;Display live Twitter data using API&lt;/li&gt;
  &lt;li&gt;(Bonus) Infinite Loading button with AJAX&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-display-a-tweet&quot;&gt;1. Display a tweet&lt;/h2&gt;
&lt;p&gt;When I visit &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost/&lt;/code&gt;, display a single tweet. It should
include the username, message and timestamp and be similar
in design to this template.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/tweet-template.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-display-a-static-list-of-tweets&quot;&gt;2. Display a static list of tweets&lt;/h2&gt;
&lt;p&gt;When I visit &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost/&lt;/code&gt;, it should now display the 
&lt;a href=&quot;/static/sample-tweets.txt&quot;&gt;list of 5 tweets&lt;/a&gt; using the same template as before.&lt;/p&gt;

&lt;h2 id=&quot;3-linkify-mentions-and-hashtags&quot;&gt;3. Linkify @mentions and #hashtags&lt;/h2&gt;
&lt;p&gt;Any words beginning with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; characters are @mentions, they should
be converted into links that point to the mentioned user’s Twitter page.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;@github&lt;/code&gt; should be a link to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://twitter.com/github&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Any words beginning with the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; are #hashtags, they should be converted
into links that point to the Twitter search page for that tag.
For example &lt;code class=&quot;highlighter-rouge&quot;&gt;#pun&lt;/code&gt; should be a link to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://twitter.com/search/%23pun&lt;/code&gt; 
(note the encoded &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;4-pretty-print-timestamps&quot;&gt;4. “Pretty print” timestamps&lt;/h2&gt;
&lt;p&gt;Instead of displaying the timestamp like &lt;code class=&quot;highlighter-rouge&quot;&gt;Jan 01, 2011 10:24:55 +0000&lt;/code&gt;, use a
more readable format like &lt;code class=&quot;highlighter-rouge&quot;&gt;Around 5 minutes ago&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Less than a minute ago&lt;br /&gt;
Around X minutes ago&lt;br /&gt;
Around X hours ago&lt;br /&gt;
Around X days ago&lt;br /&gt;
Around X weeks ago&lt;br /&gt;
Around X months ago&lt;br /&gt;
A year or more ago&lt;/p&gt;

&lt;p&gt;Use the bigger time range whenever possible (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;Around 1 week ago&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Around 7 days 
ago&lt;/code&gt;); feel free to modify the timestamp of the sample tweets for testing.&lt;/p&gt;

&lt;h2 id=&quot;5-display-tweets-for-a-specific-user&quot;&gt;5. Display tweets for a specific user&lt;/h2&gt;
&lt;p&gt;When I visit &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost/?user=johnsmith&lt;/code&gt;, display a list of all tweets with a
username of &lt;code class=&quot;highlighter-rouge&quot;&gt;johnsmith&lt;/code&gt; in the sample list. If I input a user with no tweets,
display the message &lt;code class=&quot;highlighter-rouge&quot;&gt;No tweets found for @USERNAME&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;6-display-live-twitter-data&quot;&gt;6. Display live Twitter data&lt;/h2&gt;
&lt;p&gt;When I visit &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost/?user=someuser&lt;/code&gt;, display the last 15 tweets from the desired
user using live Twitter data. If the user has less than 15 tweets, display all of their
tweets.&lt;/p&gt;

&lt;p&gt;One way to get the data is to use the 
&lt;a href=&quot;https://dev.twitter.com/docs/api/1/get/search&quot;&gt;Twitter Search API&lt;/a&gt;. Read through the documentation
to figure out the parameters you can use.&lt;/p&gt;

&lt;h2 id=&quot;bonus-infinite-loading-button-with-ajax&quot;&gt;Bonus: Infinite Loading button with AJAX&lt;/h2&gt;
&lt;p&gt;Add a button below the list of tweets, when clicked the page should use AJAX to load the next 
15 tweets from the desired user using live Twitter data.&lt;/p&gt;

&lt;p&gt;Hide the button and display a loading spinner (or the string &lt;code class=&quot;highlighter-rouge&quot;&gt;Loading...&lt;/code&gt;) while the page is 
waiting for the data.&lt;/p&gt;

&lt;p&gt;If all of a user’s tweets are displayed, the button should disappear.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Some things you practice with this kata: basic HTML/CSS layouts, simple data modeling, 
rendering stored data, templating/partials, URL/query parameters, view helpers, querying data,
interacting with external APIs, and AJAX POSTs (if you do the bonus).&lt;/p&gt;

&lt;p&gt;You can extend the kata once you master it; try adding OAuth, the ability to write tweets, real 
time updates, caching results, better styling, moving work from server side to client side.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Applebee's of Software Development</title>
   <link href="http://mdswanson.com/blog/2011/10/16/the-applebees-of-software-development.html"/>
   <published>2011-10-16T00:00:00+05:30</published>
   <updated>2011-10-16T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/10/16/the-applebees-of-software-development</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;“The Applebee’s of Software Development” is the first week’s prompt for the 
&lt;a href=&quot;/blog/2011/10/13/sep-blog-off.html&quot;&gt;SEP Blog Battle&lt;/a&gt;. The idea was to pick a title and have everyone write their own post
about it - leaving the interpretation up to each writer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sep.com/mcterry/2011/10/14/the-applebees-of-software-development-we-arent-your-neighborhood-waiters/&quot;&gt;Matt Terry&lt;/a&gt; wrote about how using engineers as &lt;strong&gt;waiters&lt;/strong&gt; means you’re doing it wrong. 
&lt;a href=&quot;http://snibble.github.com/blog/2011/10/16/NeighborhoodSoftwareDevelopers.html&quot;&gt;Todd Trimble&lt;/a&gt; went in a different direction - focusing on striving to be good &lt;strong&gt;neighborhood 
developers&lt;/strong&gt;. And I’m going to steer my post a yet another direction.&lt;/p&gt;

&lt;p&gt;Have you ever looked at the &lt;a href=&quot;http://applebees.com/menu&quot;&gt;Applebee’s menu&lt;/a&gt;? It’s one of those laminated 7-page deals that 
always seem to hide the list of side dishes and comes with an insert for the monthly
specials. There are probably 50+ different entrees on the menu - a consequence of trying to have
something for everyone.&lt;/p&gt;

&lt;p&gt;The huge menu trades breadth for depth and variety for quality. I don’t think anyone
is going to argue that an Applebee’s steak is on par with anything from an upscale steakhouse. Or
that the &lt;a href=&quot;http://www.youtube.com/watch?v=X16DUEEuhNo&quot;&gt;Sizzling Fajita&lt;/a&gt; can hold up to the small, family-run Mexican place down the 
street. But you CAN get a side of ribs with your ravioli!&lt;/p&gt;

&lt;p&gt;In the world of software, being a jack-of-all-trades does make business sense because consulting 
is a game of numbers. If your shop can do desktop, web, mobile and embedded work, your opportunity 
pool is larger and you can bid for (and hopefully win) more contracts.&lt;/p&gt;

&lt;p&gt;You also diversity your portfolio, so to speak. If the demand for desktop apps dries up, you 
don’t have to close up shop or start laying off engineers.&lt;/p&gt;

&lt;p&gt;But you can never be truly great. You will never be a leader in mobile development if it
is only 20% of your business. Appleebee’s is never going to win a &lt;a href=&quot;http://en.wikipedia.org/wiki/Michelin_star&quot;&gt;Michelin Star&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You shouldn’t go into the office on Monday and demand that your company changes their 
identity and business plan. But when you start thinking about what skills and technologies you 
want to learn or improve, stop and figure out what you want the final outcome to be.&lt;/p&gt;

&lt;p&gt;Do you want to be a generalist like the &lt;a href=&quot;http://en.wikipedia.org/wiki/Applebee's&quot;&gt;2000 location, billion dollar Applebee’s empire&lt;/a&gt;, or a
specialist like &lt;a href=&quot;http://en.wikipedia.org/wiki/Restaurant_Gordon_Ramsay&quot;&gt;Gordon Ramsey’s Three Michelin Star French restaurant&lt;/a&gt;?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>SEP Blog Off</title>
   <link href="http://mdswanson.com/blog/2011/10/13/sep-blog-off.html"/>
   <published>2011-10-13T00:00:00+05:30</published>
   <updated>2011-10-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/10/13/sep-blog-off</id>
   <content type="html">&lt;p&gt;After talking with some co-workers, we decided to have a Blog Off.&lt;/p&gt;

&lt;p&gt;#You Should Join Us&lt;/p&gt;

&lt;p&gt;Compete for bragging rights, to improve your writing, or to launch your career as a pro-blogger 
(your results may vary).&lt;/p&gt;

&lt;p&gt;If you don’t have a blog, you should start one - come find me if you need help and to 
get your blog added to &lt;strong&gt;planet.sep.com&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;##Guidelines:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Try to write at least once a week, see how long you can keep the streak going&lt;/li&gt;
  &lt;li&gt;Need a topic? Come find me and I’ll help you out&lt;/li&gt;
  &lt;li&gt;Be sure to hassle any of these people if they stop writing!
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mdswanson.com/&quot;&gt;Matt Swanson&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jonfuller.codingtomusic.com/&quot;&gt;Jon Fuller&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://myotherpants.com/&quot;&gt;Brian Ball&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.sep.com/mcterry&quot;&gt;Matt Terry&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://twitter.com/snibble&quot;&gt;Todd Trimble&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;J&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Intrapreneurship: Applying the Lean Startup to building internal tools</title>
   <link href="http://mdswanson.com/blog/2011/10/13/intrapreneurship-applying-the-lean-startup-to-internal-tools.html"/>
   <published>2011-10-13T00:00:00+05:30</published>
   <updated>2011-10-13T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/10/13/intrapreneurship-applying-the-lean-startup-to-internal-tools</id>
   <content type="html">&lt;p&gt;I recently finished reading Eric Ries’ &lt;a href=&quot;http://theleanstartup.com/book&quot;&gt;“The Lean Startup”&lt;/a&gt; and one section really
stuck out. Early on in the book, Ries tells a story about a manager at a large
corporation running a division with the same entrepreneurial principles as a small startup.&lt;/p&gt;

&lt;p&gt;The section is short - just a few pages - but it really resonated with me. Maybe it’s because
I wanted to apply what I just read to my everyday work. Or because I’m a&lt;/p&gt;
&lt;strike&gt;huge wuss&lt;/strike&gt;
&lt;p&gt;risk-adverse person and this approach is ‘safer’ than quitting my
job and moving to San Francisco. Probably a combination of both.&lt;/p&gt;

&lt;p&gt;The four word summary of the Lean Startup concept is: &lt;a href=&quot;http://lean.st/principles/build-measure-learn&quot;&gt;Build-Measure-Learn&lt;/a&gt; (repeat).&lt;/p&gt;

&lt;p&gt;Build out a minimum viable product and get it in front of users. Collect some non-vanity metrics
and get user feedback. Take that feedback, analyze and dissect it and then iterate on your first
version.&lt;/p&gt;

&lt;p&gt;Still with me?&lt;/p&gt;

&lt;p&gt;On a previous project, our PM introduced a concept that I call the Mood Grid. The idea was to
have each developer rate their mood daily by coloring in a square in a grid with a Green,
Yellow, or Red sharpie. It was simple, anonymous, and a good way to gauge the overall mood of a 
team.&lt;/p&gt;

&lt;p&gt;Well, it ended up being a flop. After the first few days, people stopped using it - either due
to apathy or forgetfulness. I personally only remembered to do it if I was having a bad day. We
tried to start it up again a few times and it never really stuck for more than a week.&lt;/p&gt;

&lt;p&gt;My hypothesis was that if there was a low-friction, “push” version of this system, it would be more 
effective and people would stick with it. Instead of relying on people to remember to go over to 
the paper grid, find a sharpie and mark off their square (programmers are lazy, that’s a lot of 
work!), the app would send an email at a set time every day and you would rate your mood by
clicking a link.&lt;/p&gt;

&lt;p&gt;There would be no accounts (who really wants to remember yet another password?) and the data would
be anonymous; the idea reminded me of the &lt;a href=&quot;http://smiley.37signals.com/&quot;&gt;37signals Smiley app&lt;/a&gt; and I
felt like a good fit for trying out the Build-Measure-Learn feedback loop.&lt;/p&gt;

&lt;p&gt;I spent a few hours over a weekend coding and had my MVP up and running. You could add members 
to a team and they would get an email every day with three links - for indicating if your mood was 
‘Good’, ‘Meh’, or ‘Bad’. Each day has a row on the page with a colored square representing the 
submitted moods.&lt;/p&gt;

&lt;p&gt;It was an exercise in restraint. I left out the fancy cross-team dashboard, the infinite scrolling
history, the rolling window statistics. Hell, you couldn’t even create a new team, I had to do it
in the database manually. I dropped in &lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Bootstrap&lt;/a&gt; while watching football on Sunday, 
pushed it to &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;, and by Monday I had 7 people across two different teams testing 
it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/static/morale-app.png&quot;&gt;&lt;image src=&quot;/static/morale-app-thumb.png&quot;&gt;&lt;/image&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every week I’d walk over and solicit feedback from my ‘customers’ about the app. I’d record any 
feature requests or bugs as Issues on Github. When I was bored in the evenings, I could grab a 
task, work on it, and push it out to be used the next day.&lt;/p&gt;

&lt;p&gt;I have a habit of not finishing projects, but having people use something I made is doing wonders
for my motivation. And the quick development cycles let me pick up where I left off whenever I 
feel like working on it.&lt;/p&gt;

&lt;p&gt;There was no big effort to gather requirements and if no one liked the app, I could either change
it (pivot!) or just throw it out all together. So far, it’s going great!&lt;/p&gt;

&lt;p&gt;The plan is to continue growing the user base, adding features only when needed (last week I added 
two week rolling averages - I waited because I didn’t know if anyone was even going to use this
thing for two weeks) and gathering feedback along the way.&lt;/p&gt;

&lt;p&gt;According to Ries, it’s time to experiment with my engine of growth so I’ll be spending some time 
figuring out how to spread the word and increase adoption within the other teams at SEP.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Podcast Roundup III</title>
   <link href="http://mdswanson.com/blog/2011/10/01/podcast-roundup-iii.html"/>
   <published>2011-10-01T00:00:00+05:30</published>
   <updated>2011-10-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/10/01/podcast-roundup-iii</id>
   <content type="html">&lt;p&gt;Time for another Podcast Roundup - I’ve only got two new shows this time, but both are
pretty good and worth checking out. Check out the other Roundups: &lt;a href=&quot;/blog/2011/05/16/podcast-roundup-ii.html&quot;&gt;here&lt;/a&gt; 
and &lt;a href=&quot;/blog/2010/10/28/podcast-roundup.html&quot;&gt;here&lt;/a&gt; for more recommendations.&lt;/p&gt;

&lt;p&gt;#Back to Work
&lt;strong&gt;Hosts:&lt;/strong&gt; Merlin Mann, Dan Benjamin&lt;br /&gt;
&lt;strong&gt;Releases:&lt;/strong&gt; Weekly  &lt;br /&gt;
&lt;strong&gt;Topics:&lt;/strong&gt; productivity, work, tools, fuzzy feelings&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://5by5.tv/b2w&quot;&gt;Back to Work&lt;/a&gt; is a strange show to describe. It’s not a programming podcast, it’s not a
productivity podcast, it’s not a personal development podcast but rather a hybrid of all three.
Dan comes from the world of programming and acts as the devils-advocating, voice of reason to
Merlin’s kinda-hippy-yet-makes-sense life and workplace advice.&lt;/p&gt;

&lt;p&gt;Topics include how to deal with fear of failure, being honest about your expertise before looking 
for independence, and getting started instead of just thinking about starting. I like that the show
makes me think and looking at myself in an introspective manner - plus the show has it’s own quirky
sense of humor and style that make it really enjoyable to listen to.&lt;/p&gt;

&lt;p&gt;I’ve been told by someone I recommended the show to that the first few episodes are hard to get into,
but I think if you can make it to episode 5 (my favorite episode of any podcast ever) you will 
be hooked.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Coder Talk
&lt;strong&gt;Hosts:&lt;/strong&gt; Joey Beninghove, Derick Bailey&lt;br /&gt;
&lt;strong&gt;Releases:&lt;/strong&gt; Weekly &lt;br /&gt;
&lt;strong&gt;Topics:&lt;/strong&gt; coding, micropreneurship&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codertalkshow.com/&quot;&gt;Coder Talk&lt;/a&gt; is a new podcast (seven episodes at the time of this writing) but it reminds me of the
early days of TechZing. The format is a little different than a normal podcast: there are two primary
hosts, but they are joined by panel of other programmers. The topics are a bit jumbled - the cast just
talks about stuff they have been working on recently or new technologies that have been released.&lt;/p&gt;

&lt;p&gt;The show is pretty rough in its current state but I think the format is interesting and will improve as 
more episodes are produced.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Heedful Programming - Brownbag</title>
   <link href="http://mdswanson.com/talks/heedful-programming/index.html"/>
   <published>2011-09-28T00:00:00+05:30</published>
   <updated>2011-09-28T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talks/heedful-programming/heedful-programming</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>My take on interviewing and the hiring process</title>
   <link href="http://mdswanson.com/blog/2011/09/22/my-take-on-interviewing-and-the-hiring-process.html"/>
   <published>2011-09-22T00:00:00+05:30</published>
   <updated>2011-09-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/09/22/my-take-on-interviewing-and-the-hiring-process</id>
   <content type="html">&lt;p&gt;There seem to be few topics that illicit a stronger reaction from developers than
how to interview and hire programmers. Everyone seems to have their own idea of the best way to
hire - &lt;a href=&quot;http://projecteuler.net/&quot;&gt;algorithm puzzles&lt;/a&gt;, &lt;a href=&quot;http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html&quot;&gt;fizzbuzz&lt;/a&gt;, &lt;a href=&quot;http://code.dblock.org/github-is-your-new-resume&quot;&gt;Github repos&lt;/a&gt;, &lt;a href=&quot;http://www.markhneedham.com/blog/2010/02/25/pair-programming-in-interviews/&quot;&gt;pair programming&lt;/a&gt;, &lt;a href=&quot;http://www.microsoft.com/business/en-us/resources/management/recruiting-staffing/5-tips-for-hiring-your-first-employee.aspx&quot;&gt;four week
trial runs&lt;/a&gt;, &lt;a href=&quot;http://www.crsr.net/Notes/Google.html&quot;&gt;marathon on-site interviews&lt;/a&gt;, the list goes on and on.&lt;/p&gt;

&lt;p&gt;Whatever methodology you subscribe to, one of the major questions that needs to be answered
is:&lt;/p&gt;

&lt;h2 id=&quot;can-the-candidate-program&quot;&gt;Can the candidate program?&lt;/h2&gt;
&lt;p&gt;People outside the industry will probably think this is a dumb question. Why would
someone apply for a job as a programmer if they can’t program?&lt;/p&gt;

&lt;p&gt;But it is a &lt;a href=&quot;http://weblog.raganwald.com/2007/01/dont-overthink-fizzbuzz.html&quot;&gt;well-established fact&lt;/a&gt; that this simply isn’t the case.&lt;/p&gt;

&lt;p&gt;It is irresponsible for a company to hire someone without knowing if they can
code.&lt;/p&gt;

&lt;p&gt;So how do you answer this question? Here are three options that I like:&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Look at any available public code (Github/BitBucket/Google Code, side projects, open source)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be my preferred method because it is asynchronous. The candidate doesn’t have to do
anything special for you and the interviewer can browse through the code when it is
convenient for them.&lt;/p&gt;

&lt;p&gt;Having &lt;a href=&quot;http://www.meetup.com/Indianapolis-Developers-with-Side-Projects/&quot;&gt;side projects&lt;/a&gt; or working on open source is a good indicator that someone is
passionate about their craft and has basic coding skills (and probably has the means to 
improve them).&lt;/p&gt;

&lt;p&gt;Please note that I said it is a &lt;strong&gt;good indicator&lt;/strong&gt;, NOT the only indicator. Lots
of excellent programmers aren’t on Github and don’t have open source code - there is no
one “right way” to being a developer, each person has their &lt;a href=&quot;http://ofps.oreilly.com/titles/9780596518387/walking_the_long_road.html&quot;&gt;own path&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Contrarian Carl says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In my past job I worked on a proprietary, closed source project and I signed a NDA! I can’t show you any of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m not a single 20-something that programs in my free time. I have a family and other hobbies, and I want to decompress and relax in the evening, not write more code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No problem, those are completely valid reasons. Move on to the next option.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Have them program something during an interview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This part is deceptively tricky. You don’t want to use one of those 
&lt;a href=&quot;http://www.techinterviews.com/programming-puzzles-riddles-and-interview-problems&quot;&gt;Easy-Once-You-Know-The-Trick&lt;/a&gt; 
algorithm puzzles and you don’t want to make the candidate feel like they are being treated
as free labor.&lt;/p&gt;

&lt;p&gt;Everyone has their favorite, special algorithm for 
&lt;a href=&quot;http://www.haskell.org/haskellwiki/Prime_numbers#Bitwise_prime_sieve_with_Template_Haskell&quot;&gt;generating prime numbers using bitwise operators&lt;/a&gt;. 
And it would be neat to see if a candidate could jump right in and fix a low priority bug or 
two in your SaaS app. But I know, personally, that both of those extremes are very 
off-putting to me as potential employee.&lt;/p&gt;

&lt;p&gt;I recommend coming up with your own simple, interview-only application. The problem domain
should be small enough that a candidate can wrap your head around it in a few minutes with a minimal
number of questions. You should also have someone at your company actually code the app
and preferably have that person assisting with the interview.&lt;/p&gt;

&lt;p&gt;Let the candidate use any
resources they want and give them a choice of environment and tools if possible. Keep the test
under one hour.&lt;/p&gt;

&lt;p&gt;Here is a sample: garage sale finder. You need a database populated
with sale locations, times, and descriptions (scrap &lt;a href=&quot;http://sfbay.craigslist.org/gms/&quot;&gt;CraigsList&lt;/a&gt; to seed). Stand up a 
web service/API with a couple methods (get all sales, get closest N sales to a location, 
get sale details). You can write a web, mobile, or even desktop front end. You could whip
up a basic version in a few hours over a weekend without much difficulty.&lt;/p&gt;

&lt;p&gt;The beauty of this approach is that you can swap in and out whichever component you want the
candidate to write.&lt;/p&gt;

&lt;p&gt;Hiring a web developer? Keep your markup files and data models and
have them write a controller. Hiring a mobile developer? Keep the backend and have them write
a simple client that runs on the simulator.&lt;/p&gt;

&lt;p&gt;But remember, these tasks need to be kept small and pretty basic. Have the potential web
dev build out the CRUD actions; if they breeze through that, have them implement a custom
action or add some validation logic. The mobile client should be something like a displaying
list of sales from the API in a list view, with the follow-up being a one-level
drill down to get the details or adding in a Google map.&lt;/p&gt;

&lt;p&gt;The goal is to find out if the candidate can code the basics that might be required for
the job. If the candidate is struggling with this task and can’t demonstrate competency
in another way, it should be a huge red flag.&lt;/p&gt;

&lt;p&gt;Contrarian Carl says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m no good under pressure. I like to think through code before I write it; it takes me a few hours/days to get productive in a new code base.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That sounds like it’s going to take half a day. You expect me to take paid time off from my current job to drive/fly to your office just for an interview?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, those are reasonable points - though I personally have a bit of the issue with
the second one. Next option.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Give them a ‘homework’ project and a fair deadline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can reuse your in-house project for this too. Except instead of having the candidate
tackle an hour chunk, you probably want to have them do the equivalent of 2-3 chunks. The
reason is two-fold: the candidate has more time to work and you don’t have visibility over
the work being done.&lt;/p&gt;

&lt;p&gt;With the smaller, in-person task, you can clearly tell if a candidate is struggling to get by
or blazing through with ease. With a homework project, all you get is the final output.&lt;/p&gt;

&lt;p&gt;You
want to avoid the case were someone spends the whole week toiling over a simple task and
feigns proficiency (or, more nefariously, has someone else do the project). Adding a bit
more difficulty to the task should help cut down on this - but keep in mind that if you set
unrealistic expectations, you will turn off many candidates.&lt;/p&gt;

&lt;p&gt;Contrarian Carl says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You expect me to spend two evenings working on some stupid toy project?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s so many hoops to jump through. I’ve got to do this whole project that I don’t even care about with the chance I won’t even get the job. And then figure out a way for you to run in on your machine. And you’ll probably tell me that it’s not exactly what you wanted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you get to this stage, you have given a candidate three options to demonstrate the core
ability required for the job they are seeking.&lt;/p&gt;

&lt;p&gt;If they are still pushing back at this point,
it’s a “No Hire”. Sorry, but be reasonable - a company is making an investment by hiring you and you
will have to make some effort to get a job. If you really want the position, this should be
a non-issue.&lt;/p&gt;

&lt;p&gt;Any of the three options should be sufficient to prove that a given programmer can, in fact,
write a program.&lt;/p&gt;

&lt;p&gt;Of course, this should not be your entire hiring process. Company/team fit,
salary expectations, actual expertise and desire for improvement and continual learning all
need to be taken into consideration.&lt;/p&gt;

&lt;p&gt;This isn’t a silver bullet for screening candidates. But I think it sure beats solving a puzzle
that involves tail recursion or standing at a whiteboard trying to remember if the syntax is
&lt;code class=&quot;highlighter-rouge&quot;&gt;char[] c&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;char c[]&lt;/code&gt; for my string-reversing method.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SDC Chicago Talk Takeaways</title>
   <link href="http://mdswanson.com/blog/2011/08/29/sdc-chicago-talk-takeaways.html"/>
   <published>2011-08-29T00:00:00+05:30</published>
   <updated>2011-08-29T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/08/29/sdc-chicago-talk-takeaways</id>
   <content type="html">&lt;p&gt;This past weekend I headed up north for &lt;a href=&quot;http://2011.socialdevcampchicago.com/&quot;&gt;SocialDevCamp Chicago 2011&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though I spent most of the time coding a &lt;a href=&quot;https://github.com/swanson/cloutbout&quot;&gt;project&lt;/a&gt; for the hackathon (and won a prize 
for the second straight year!), I was able to make it to a few of the talks at the 
actual conference.&lt;/p&gt;

&lt;p&gt;I was unimpressed with the talks at last year’s SDC Chicago, but I was pleasantly
surprised with the speakers this time around. So here are my notes:&lt;/p&gt;

&lt;p&gt;##Design for Hackers - David Kadavy&lt;/p&gt;

&lt;p&gt;I had previously run across &lt;a href=&quot;http://www.kadavy.net/&quot;&gt;David Kadavy&lt;/a&gt; through a series of blog posts he did that
were popular on HackerNews. The topic of this talk was “Whitespace” and some of the key
points were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Whitespace shapes design even though it is often thought of as “nothingness”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphicdesign.spokanefalls.edu/tutorials/process/gestaltprinciples/gestaltprinc.htm&quot;&gt;Gestalt Theory&lt;/a&gt; explains how our brains perceive and group visual elements&lt;/li&gt;
  &lt;li&gt;Similar objects have a sense of “togetherness”&lt;/li&gt;
  &lt;li&gt;The principle of Proximity explains how objects that are close together seem connected&lt;/li&gt;
  &lt;li&gt;Closure is how our brains “auto-connect the dots”&lt;/li&gt;
  &lt;li&gt;Use consistent and purposeful line-heights and leading to improve the flow of a page&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.edwardtufte.com/tufte/&quot;&gt;Tufte’s&lt;/a&gt; 1+1=3 concept - two lines with whitespace between is really three items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was familiar with most of the material in this talk, but I felt like it was a good
introduction to design. I am still on the fence about whether or not I want to pick
up David’s &lt;a href=&quot;http://www.designforhackers.com/&quot;&gt;upcoming book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;##API Driven Development - Craig Ulliott
&lt;a href=&quot;http://craigulliott.com/&quot;&gt;Craig&lt;/a&gt; talked about building &lt;a href=&quot;http://www.whereivebeen.com/&quot;&gt;WhereIveBeen’s&lt;/a&gt; data/API abstraction layer, the mistakes he
made, and how to design a better, more scalable solution. I liked this talk because Craig
was opinionated and spoke about his thoughts - I feel like this allowed him to talk about
specific ways to improve your API design instead of trying to please everyone with
general advice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Craig suggested that start-ups build an API with Rails because of its RESTful nature
and code readability&lt;/li&gt;
  &lt;li&gt;You can always do a rewrite if you need to, you will probably have much more resources if you
reach a point where you can’t scale Rails&lt;/li&gt;
  &lt;li&gt;Keeping a standard data model allows new services to be quickly integrated&lt;/li&gt;
  &lt;li&gt;For mobile use, allow a “fields” option to minimize response size (aim for one network packet!)&lt;/li&gt;
  &lt;li&gt;It is faster to cache a query that shows too much data and filter down fields in a different 
layer of the stack than hit the database again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Heedful Programming - Dave Hoover
I was really looking forward to this talk after reading &lt;a href=&quot;/writeup/2010/10/26/apprenticeship-patterns.html&quot;&gt;&lt;em&gt;Apprenticeship Patterns&lt;/em&gt;&lt;/a&gt;, which
&lt;a href=&quot;http://redsquirrel.com/dave/&quot;&gt;Dave&lt;/a&gt; co-authored, and it was really, really good.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dave talked about his background in psychology and studies by &lt;a href=&quot;http://www.jstor.org/pss/2393372&quot;&gt;Karl Weick&lt;/a&gt; about the
crews on aircraft carriers&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Heedful interrelating&lt;/em&gt; is the idea of making knowledge connections between team members
to better handle complex problems&lt;/li&gt;
  &lt;li&gt;Siloing really breaks down when a project needs multiple experts to collaborate on a
solution&lt;/li&gt;
  &lt;li&gt;Is your team habitual or heedful? Which code fits your process: &lt;code class=&quot;highlighter-rouge&quot;&gt;next_week = clone(last_week)&lt;/code&gt; 
or &lt;code class=&quot;highlighter-rouge&quot;&gt;next_week = retrospect(last_week)&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;Bring in new blood that will question the process, “elders” should welcome new ideas&lt;/li&gt;
  &lt;li&gt;If something in your process is painful, do it &lt;strong&gt;more&lt;/strong&gt; - it will force you to get better at it, 
improve the process, or show you it is not needed&lt;/li&gt;
  &lt;li&gt;Have a safe environment for developers to practice speaking or sharing ideas, encourage
involvement with the dev community&lt;/li&gt;
  &lt;li&gt;Use process as a tool to build trust, then use that trust to remove barriers in the process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So many points resonated with me that I am going to “fork” Dave’s talk and present
it at a brownbag at SEP. It really made me think about how to improve my team’s own process
and made me want to bring more aspects of Obtiva’s apprentice system to SEP.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dive into Node.js - Brownbag</title>
   <link href="http://mdswanson.com/talks/dive-into-nodejs/index.html"/>
   <published>2011-08-23T00:00:00+05:30</published>
   <updated>2011-08-23T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talks/dive-into-nodejs/dive-into-node-js-talk</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Update on Lanyon + Cross-domain AJAX POSTs with CORS</title>
   <link href="http://mdswanson.com/blog/2011/08/21/update-on-lanyon-crossdomain-ajax-posts.html"/>
   <published>2011-08-21T00:00:00+05:30</published>
   <updated>2011-08-21T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/08/21/update-on-lanyon-crossdomain-ajax-posts</id>
   <content type="html">&lt;p&gt;An update is long past due on &lt;a href=&quot;https://github.com/swanson/lanyon&quot;&gt;Lanyon&lt;/a&gt; (my Jeykll WYSIWYG editor project) so here
is a recap since the last post.&lt;/p&gt;

&lt;p&gt;As of my &lt;a href=&quot;/blog/2011/07/23/digging-around-the-github-api-take-2.html&quot;&gt;last update&lt;/a&gt;, I had figured out how to make a commit with the Github API. Everything
was working with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;, but when I hooked up the code to call the API from the browser I ran
into issues regarding &lt;a href=&quot;http://en.wikipedia.org/wiki/Same_origin_policy&quot;&gt;same-origin policy&lt;/a&gt; when doing cross-domain AJAX requests.&lt;/p&gt;

&lt;p&gt;For GET requests, there were no issues since I can use &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;. By including a callback function in 
my JavaScript code, the server will respond with my function with inlined arguments populated 
by the requested data. This function is then injected into the DOM and wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;To trigger this behavior, I just needed to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;dataType&lt;/code&gt; option of the jQuery &lt;code class=&quot;highlighter-rouge&quot;&gt;$.ajax()&lt;/code&gt; 
call to be &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonp&lt;/code&gt; and set the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonpCallback&lt;/code&gt; option to my callback function.&lt;/p&gt;

&lt;p&gt;For POST requests, it’s a whole different game. If you try to just do the POST normally,
you will find yourself with a “same origin policy” error. Searching the web will reveal a ton
of information about different work-arounds - the most popular being to use an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, use
some other plugin like &lt;a href=&quot;http://easyxdm.net/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;easyXDM&lt;/code&gt;&lt;/a&gt;, or write your own server proxy.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; approach relies on setting the frame’s domain to be the same as your target
and then submitting an injected form to the desired URL. I started going down this path but I
found that you couldn’t get the response from the POST, which was critical in my case.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;easyXDM&lt;/code&gt; route involves communicating between your main window and an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; using
the &lt;code class=&quot;highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; API supported in some browsers. I didn’t really grok how it was supposed to
work, but I believe it would require changes to both my domain and my target domain. And since 
I can’t control Github’s domain, I don’t think it would fit my needs.&lt;/p&gt;

&lt;p&gt;The last route, a server proxy, seemed to be most feasible. I could throw together a little Sinatra
app that proxied my requests over to api.github.com and since I would control the server, I could perform
all of the requests at once and have control over the cross-domain policies.&lt;/p&gt;

&lt;p&gt;The problem with this approach was that it would need maintenance and extra resources. The whole point of 
the project was to make the requests on the client side so that anyone could drop the script into their 
blog. Now I would have to keep the server up and running and now people have to trust that I’m not storing 
their credentials on my server (I wouldn’t trust someone else with them).&lt;/p&gt;

&lt;p&gt;After doing more research, I found that, at one point, the Github API supported &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing&quot;&gt;CORS&lt;/a&gt;, which is a 
spec that allows for exemptions to the same-origin policy. I sent a message to &lt;a href=&quot;https://github.com/technoweenie&quot;&gt;Rick at Github&lt;/a&gt;
and, to my surprise, he worked with me to re-enable CORS support! One restriction is that your origin needs to be 
registered as an OAuth app, but that was a non-issue.&lt;/p&gt;

&lt;p&gt;I had some trouble with jQuery when making the request, but I finally got the right combination of settings
and it started working.  Here is some sample code for making the POST:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$.ajax({
    type: 'POST',
    url: 'API URL goes here',
    data: JSON.stringify(data),
    dataType: 'json',
    contentType: 'application/x-www-form-urlencoded',
    success: callback,
    beforeSend : function(xhr) {
	    xhr.setRequestHeader(&quot;Authorization&quot;, 
            &quot;Basic &quot; + that.base64encode(user + ':' + pw));
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For whatever reason, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; options weren’t working and my authorization
headers weren’t being sent so I had to manually set the header and base64 encode my credentials.&lt;/p&gt;

&lt;p&gt;I still need to do a bit more work related to setting the &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/yaml-front-matter&quot;&gt;YAML front matter&lt;/a&gt; for the Jekyll posts
and to make some of my calls more generic (everything is hard coded to do the &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; operations in a 
test repo of mine). But I was able to write a post and get it committed and pushed to a repository
from the browser.&lt;/p&gt;

&lt;p&gt;And then onward to editing posts and making the UI look pretty!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ship It!</title>
   <link href="http://mdswanson.com/writeup/2011/08/04/ship-it.html"/>
   <published>2011-08-04T00:00:00+05:30</published>
   <updated>2011-08-04T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/08/04/ship-it</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The book has three main sections: tools and infrastructure, project techniques, and problem/solution anecdotes.&lt;/p&gt;

&lt;p&gt;The tools section outlines how to use a bug tracker, source control, build servers and automated tests. The project 
techniques section introduces ‘soft’ tools like code reviews and team standups. And then, in the typical Pragmatic 
Programmer fashion, practical examples of common situations are given and the authors explain the steps to take to
arrive at a solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I think this book would be great for a software team that is in chaos, working long hours, and unfamiliar with
more modern software engineering techniques. But for me, I didn’t really get that much out of it.&lt;/p&gt;

&lt;p&gt;My current project uses all of the tools listed and the project techniques, so I focused on the end section of 
the chapters where the book helps you identify if you are “Doing it Right”.&lt;/p&gt;

&lt;p&gt;If you have read &lt;a href=&quot;/writeup/2010/10/25/pragmatic-programmer.html&quot;&gt;&lt;em&gt;The Pragmatic Programmer&lt;/em&gt;&lt;/a&gt; you are probably already familiar with 80% of the material in this
book.&lt;/p&gt;

&lt;p&gt;I found that the Appendix was very useful, but a bit dated. I wanted to know other tools for doing unit tests or build
automation and this section was concise but informative. However, the book really shows it age it comes to 
listing tools (the SCM tools mentioned were CVS, SVN, SourceSafe and BitKeeper &lt;code class=&quot;highlighter-rouge&quot;&gt;/shudder&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I was trying to decide whether to read this book or the related &lt;a href=&quot;http://pragprog.com/book/mnee/release-it&quot;&gt;“Release It!”&lt;/a&gt; book from the same publisher; in 
hindsight I think I could have skipped this one without missing out on much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Developers who are unhappy with how their team is currently operating, developers who want to introduce best
practices but aren’t sure how to get buy-in&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Making a commit with the Github API</title>
   <link href="http://mdswanson.com/blog/2011/07/23/digging-around-the-github-api-take-2.html"/>
   <published>2011-07-23T00:00:00+05:30</published>
   <updated>2011-07-23T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/07/23/digging-around-the-github-api-take-2</id>
   <content type="html">&lt;p&gt;The &lt;a href=&quot;/blog/2011/07/09/digging-around-the-github-v3-api.html&quot;&gt;last time I was playing around with the Github API&lt;/a&gt; I was able to pull
out all of the files and their contents for a given repository.&lt;/p&gt;

&lt;p&gt;The next task I want to be able to do was make a commit. The &lt;a href=&quot;http://developer.github.com/v3/git/&quot;&gt;process&lt;/a&gt; looks
fairly involved from the outside; you have to make the blob, find and update
the trees and make the commit all manually. As mentioned on &lt;a href=&quot;http://news.ycombinator.com/&quot;&gt;HN&lt;/a&gt;, the guys at
Github &lt;a href=&quot;http://news.ycombinator.com/item?id=2746877&quot;&gt;acknowledged this was a pain point&lt;/a&gt; and may introduce some helper methods
like those used for creating and editing Gists.&lt;/p&gt;

&lt;p&gt;I was kind of dreading doing all the git internal stuff because, frankly,
I am not an expert on it and it’s not exactly something I want to spend my weekend 
debugging.&lt;/p&gt;

&lt;p&gt;But I found a &lt;a href=&quot;https://github.com/plu/Pithub&quot;&gt;Perl library&lt;/a&gt; (which seems to be the first to support all of the v3
methods) that has an example of making a commit. Between that sample code and
the instructions on the API documentation, I felt like I had enough information
to give it a solid attempt.&lt;/p&gt;

&lt;p&gt;###Letting myself do stuff to my own stuff on my own behalf&lt;/p&gt;

&lt;p&gt;So I started making a few calls to the API but I ended up realizing that I need
to authenticate myself in order to do most of the POST operations. The API allows
for you to send your username and password directly or use an OAuth token.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aside: I think Github could make it more clear which methods require authorization.
Maybe I wasn’t looking in the right place, but it would have been helpful to have
a little note saying “This method requires auth” below the “Create a blob” section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OAuth and I don’t get along at all, usually because I want to call the APIs from
the command line or a one-off script and OAuth seems to want me to build a whole web app first. 
But I know that I’ll need to use OAuth at some point, so better to bite the bullet now.&lt;/p&gt;

&lt;p&gt;Initially, I thought that I could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;API token&lt;/code&gt; from the Github
&lt;a href=&quot;https://github.com/account/admin&quot;&gt;Account Settings page&lt;/a&gt; – but that isn’t the OAuth access token. I ended up using
a script from a &lt;a href=&quot;https://github.com/jwilger/github-v3-api&quot;&gt;Ruby library&lt;/a&gt; and making a test application to extract my
access token.&lt;/p&gt;

&lt;p&gt;When you make requests, you need to include the token in the headers like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization: token YOUR-TOKEN-HERE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also, I spent way too long banging my head against the wall because I was putting
the encoding and contents in the headers as well, instead of the POST body. Doh. You need to 
use JSON in the body as well, something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###Make a commit in just five easy* steps!&lt;/p&gt;

&lt;p&gt;After some investigating, I determined that the follow steps would result in a commit
being added:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET &lt;code class=&quot;highlighter-rouge&quot;&gt;/repos/:user/:repo/git/refs/heads/master&lt;/code&gt;
    &lt;ul&gt;&lt;li&gt;Store the SHA for the latest commit (SHA-LATEST-COMMIT)&lt;/li&gt;&lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GET &lt;code class=&quot;highlighter-rouge&quot;&gt;/repos/:user/:repo/git/commits/SHA-LATEST-COMMIT&lt;/code&gt;
    &lt;ul&gt;&lt;li&gt;Store the SHA for the tree (SHA-BASE-TREE)&lt;/li&gt;&lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST &lt;code class=&quot;highlighter-rouge&quot;&gt;/repos/:user/:repo/git/trees/&lt;/code&gt; while authenticated
    &lt;ul&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;base_tree&lt;/code&gt; to be SHA-BASE-TREE&lt;/li&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; to be the full path of the file you are creating or editing&lt;/li&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; to be the full contents of the file&lt;/li&gt;
      &lt;li&gt;From the response, get the top-level SHA (SHA-NEW-TREE)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST &lt;code class=&quot;highlighter-rouge&quot;&gt;/repos/:user/:repo/git/commits&lt;/code&gt; while authenticated
    &lt;ul&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;parents&lt;/code&gt; to be an array containing SHA-LATEST-COMMIT&lt;/li&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;tree&lt;/code&gt; to be SHA-NEW-TREE&lt;/li&gt;
      &lt;li&gt;From the response, get the top-level SHA (SHA-NEW-COMMIT)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST &lt;code class=&quot;highlighter-rouge&quot;&gt;/repos/:user/:repo/git/refs/head/master&lt;/code&gt; while authenticated
    &lt;ul&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;sha&lt;/code&gt; to be SHA-NEW-COMMIT&lt;/li&gt;
      &lt;li&gt;You may need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;force&lt;/code&gt; to be true&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now view your repository and make sure everything is correct. This approach skips the manual &lt;code class=&quot;highlighter-rouge&quot;&gt;blob&lt;/code&gt; creation
since setting &lt;code class=&quot;highlighter-rouge&quot;&gt;tree.content&lt;/code&gt; automatically builds one for you. The &lt;code class=&quot;highlighter-rouge&quot;&gt;/trees&lt;/code&gt; API also handles deep paths and
recursively rewrites subtrees. These two shortcuts saved me an even bigger headache.&lt;/p&gt;

&lt;p&gt;I’d like to see some abstraction, as I mentioned before, where you can POST something like this and it would
magically work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;parent_commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commit msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;edit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editted version of file&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/new/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;newly added file&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is likely lots of complexity with branches and doing less trivial commits, but for the simple
use-case of making a new commit on the latest version on the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch I think it could work.&lt;/p&gt;

&lt;p&gt;###What’s the point again?&lt;/p&gt;

&lt;p&gt;So the question is now, “Why are you doing all this Github API stuff anyways?”. I made a vague reference
to a project idea in my first post so here are the details.&lt;/p&gt;

&lt;p&gt;I want to make a web-based editor for &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll-based&lt;/a&gt;, &lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; hosted blogs (like my own). The idea being
that I can add a static page to my blog that will allow me to login with my Github credentials, create and 
edit posts, and push the commits back to the underlying repo all from the browser.&lt;/p&gt;

&lt;p&gt;The page would have a WYSIWYG Markdown previewer and some kind of file browser showing all items in your 
&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;“But why don’t you just write the posts in &lt;code class=&quot;highlighter-rouge&quot;&gt;gvim&lt;/code&gt;?” Yeah, I know – I can (and do) write most of my posts from 
&lt;code class=&quot;highlighter-rouge&quot;&gt;gvim&lt;/code&gt; and push the changes up with the terminal. But sometimes I am not on my machine and don’t want to setup my
SSH keys or install &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;. I also like the WYSIWYG side-by-side previews that you get from using something like
&lt;a href=&quot;http://www.ctrlshift.net/project/markdowneditor/&quot;&gt;this online Markdown editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A web-based editor also makes Jekyll more approachable for non-technical users. Most people that use WordPress
or something similar don’t care that static files are faster or that they need to update constantly to avoid
security vulnerability; they use WordPress, in part, because it’s easy to make posts in the browser.&lt;/p&gt;

&lt;p&gt;Plus, the project will give me a chance to play with &lt;a href=&quot;http://diveintohtml5.org/&quot;&gt;HTML5&lt;/a&gt;, &lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt;, and making a single-page app.&lt;/p&gt;

&lt;p&gt;I plan to continue writing posts as I work on the project. The &lt;a href=&quot;/blog/2010/10/24/weekly-noise.html&quot;&gt;Weekly Noise&lt;/a&gt; approach kind of fizzled out
the last time I tried it (for my first Node.js project) but I liked the idea of keeping an “engineering 
notebook” as I work.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Lessons Learned from SEP's Internal Startup Weekend</title>
   <link href="http://mdswanson.com/blog/2011/07/18/start-up-weekend-lessons-learned.html"/>
   <published>2011-07-18T00:00:00+05:30</published>
   <updated>2011-07-18T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/07/18/start-up-weekend-lessons-learned</id>
   <content type="html">&lt;p&gt;This past weekend, &lt;a href=&quot;http://www.sep.com/&quot;&gt;SEP&lt;/a&gt; held its first internal 
&lt;a href=&quot;http://indianapolis.startupweekend.org/&quot;&gt;Startup Weekend&lt;/a&gt; event. Around 15 
software engineers and a handful of business and marketing people spent their weekend building out product 
ideas, from pitching the concept to doing market research to coding prototypes.&lt;/p&gt;

&lt;p&gt;Ten ideas were pitched and after voting, three teams were formed to work on the ideas receiving the most
votes.&lt;/p&gt;

&lt;p&gt;Overall, the vibe I got from talking with the participants throughout the event and after the final
presentations was that it was fun and worthwhile event. While everything is still fresh in my mind, I
wanted to share some lessons that I learned over the last 48 hours.&lt;/p&gt;

&lt;p&gt;##People like to work on different things than in their day job
From the first hour of the weekend (the Friday pitches), it was clear that people were definitely
interested in working on something outside of their normal project realm. Most of SEP’s client work
is in fields like embedded medical devices or enterprise data management applications, so it was fun
to see people pitching Android apps, social network ideas and public facing SaaS products.&lt;/p&gt;

&lt;p&gt;At the end of the weekend, comments like “I had no idea how image processing worked but now I do…and
it’s pretty sweet!” helped me realize that variety, even for just a weekend, can help to re-invigorate
one’s passion for programming and learning.&lt;/p&gt;

&lt;p&gt;##Mixing up the teams is key
We didn’t plan it this way, but it ended up that almost all of the teams members were working with people
for the first time. As much as I would have liked to pick my own ‘dream team’ of people that I know I work
well with, I think that working with new people had a greater benefit. Several people expressed how cool it
was to learn from other team members, whether it be new tools and techniques or just how they approach a
problem in general.&lt;/p&gt;

&lt;p&gt;That quiet guy from that one project you’ve never worked on? Turns out he can crank out code and works 
really well with you. And he’s played around with &lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt; too! ;-)&lt;/p&gt;

&lt;p&gt;Those developers-turned-managers? They’ll surprise you by hacking on code all weekend, they’ve still got it!&lt;/p&gt;

&lt;p&gt;Even in a medium sized company like SEP, it’s still easy to put on blinders and only interact with your
own project team. I know I’m not the most outgoing person so without mixing up the teams I might have missed 
out on meeting some awesome co-workers that were just across the hall from me this whole time.&lt;/p&gt;

&lt;p&gt;##Define your goals ahead of time (and be realistic)
Don’t feel bad about faking it. If you have to hand-wave over some aspect of your product (and all the teams
did), it’s not the end of the world. Define clear goals that are independently achievable. If all your goals
depend on being able to do X and that turns out to be really hard and you can’t get it working, then you can’t
reach any of your goals.&lt;/p&gt;

&lt;p&gt;Our team defined at least six key features for our product and then picked the top
two and threw out the rest. By focusing on less, we were able to really flesh out those two features. If
we tried to do it all, I predict we would have ended up with a bunch of half-working parts and nothing to demo.&lt;/p&gt;

&lt;p&gt;It’s better to finish 100% of two features than to finish 50% of four.&lt;/p&gt;

&lt;p&gt;##Find a method that works for your team
Two teams spent Friday night doing detailed story maps, data modeling and user personas.&lt;/p&gt;

&lt;p&gt;My team just brain dumped onto a whiteboard and tried to find something that stuck.&lt;/p&gt;

&lt;p&gt;In the end, you have to figure out what is going to work for the style and personalities of the 
whole team. One team had hourly stand up meetings and one team used time boxing to ensure progress was 
being monitored and any roadblocks were taken care of.&lt;/p&gt;

&lt;p&gt;I tried hard (maybe a bit too hard) to keep my team’s focus on what we could realistically get done;
having done these kind of weekend events before and seeing the frustration from teams that get to Sunday
and have nothing, I wanted to focus on finishing the core features and then working on ‘nice to haves’.&lt;/p&gt;

&lt;p&gt;##The products may die but the spark lives on
Going into the weekend, one of my goals for the event was to spark excitement about product development 
at SEP. There is often so much friction to working on something that it’s hard to get the momentum you need 
just to write that first line of code.&lt;/p&gt;

&lt;p&gt;Setting aside a weekend just to Get Things Done really helped get us past that initial hurdle. Regardless of 
whether or not any of the projects live on past the weekend, I think the majority of participants had a positive 
experience and would be interested in working on a product team in the future.&lt;/p&gt;

&lt;p&gt;##Not every engineer wants to be an entrepreneur
At least for this inaugural event, I think that the engineers were more interesting in the ideas that were 
pitched as having cool or interesting technology instead of those focused on business viability. The ideas 
that I felt had the best chances of actually turning into profitable products ended up near the bottom of
the list when everyone voted.&lt;/p&gt;

&lt;p&gt;In hindsight, this was probably not such a terrible scenario. Engineers have to enjoy coming to events like 
this or else you aren’t going to get much turnout; people are giving up their weekends, so it might be 
unrealistic to expect them to focus on the business aspects.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;/blog/2011/06/18/startup-weekend-tip-tricks.html&quot;&gt;Startup Weekend Tips &amp;amp; Tricks&lt;/a&gt; post, I gave an example of 
having one team member work on a marketing/sales website. No one was really interested in 
doing that once people started coding.&lt;/p&gt;

&lt;p&gt;Perhaps it’s just a matter of finding the developers that are interested in that kind of stuff and getting them
paired with people that have marketing and business development skills, but I was a little bummed that the 
business side of product development got overshadowed.&lt;/p&gt;

&lt;p&gt;##Final thoughts
To me, the weekend had the feel of a hackathon more than a ‘traditional’ startup weekend. When asked if it
went as I had expected, I said it was different; not better or worse but it was just different. I had hopes
that someone would come up with a great product that we couldn’t &lt;strong&gt;not&lt;/strong&gt; start pursuing.&lt;/p&gt;

&lt;p&gt;I’m not sure if that happened with this batch of ideas – my gut tells me “No” but what do I know, I’m 
just an engineer! I think we found some market opportunities but I don’t know if SEP is well positioned to 
capitalize on them.&lt;/p&gt;

&lt;p&gt;I don’t know what the future of SEP startup weekends will be. The event may grow and evolve if we 
continue having them (which seems like a given after talking to everyone involved). But even if the focus doesn’t 
shift to a more business driven end goal, there is still tremendous value in getting co-workers together to work on 
cool projects and bond over 3AM debugging sessions.&lt;/p&gt;

&lt;p&gt;Despite my criticality (and eternal pessimism), I had a fantastic time helping put together the event, 
thinking of ideas and being involved with my team (Go Team Shoeless!) throughout the weekend.&lt;/p&gt;

&lt;p&gt;A big thanks to all those involved (you know who you are!) who helped turn a “Wouldn’t it be neat if…” rant
during a book club discussion into a reality.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Digging around the Github v3 API</title>
   <link href="http://mdswanson.com/blog/2011/07/09/digging-around-the-github-v3-api.html"/>
   <published>2011-07-09T00:00:00+05:30</published>
   <updated>2011-07-09T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/07/09/digging-around-the-github-v3-api</id>
   <content type="html">&lt;p&gt;I’ve had a little project idea brewing for a while that would require
read and write access to a Github repository with client side Javascript,
which eliminates the ability to use existing libraries like 
&lt;a href=&quot;https://github.com/mojombo/grit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grit&lt;/code&gt;&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/libgit2/libgit2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libgit2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few of the libraries have
Node.js bindings, but that’s not exactly what I wanted. There is a cool project
called &lt;a href=&quot;https://github.com/danlucraft/git.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git.js&lt;/code&gt;&lt;/a&gt; that looked like it would be perfect, but it doesn’t (yet) support
any write operations.&lt;/p&gt;

&lt;p&gt;Instead, I’ll have to use the &lt;a href=&quot;http://developer.github.com/&quot;&gt;Github HTTP API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The real problem was that, prior to v3, the Github API was pretty useless for
working with repositories. You could get the stats (forks, watchers, title, etc)
but the file data wasn’t accessible. I guess you could just scrape the website
to get the data but that’s a little hacky and wouldn’t work for making commits
or pushing changes (theoretically possible now that you can Edit
files online and commit the changes through the web interface?).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Addendum: the v2 did have read access to git objects, but not write access, as
technoweenie from Github points out &lt;a href=&quot;http://news.ycombinator.com/item?id=2746877&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyways, the Github v3 API exposes all the 
&lt;a href=&quot;http://developer.github.com/v3/git/&quot;&gt;raw git data&lt;/a&gt; now, so that seems like a much
more robust way to go.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is a lack of useful examples on the new API methods; instead
of showing you how to get file at a given commit from the API, you get pointed
to the &lt;a href=&quot;http://progit.org/book/ch9-0.html&quot;&gt;ProGit ‘Git Internals’ chapter&lt;/a&gt;.
So I began to dig into the git internal
plumbing with the goal of getting the latest version of a file from one of my
repos.&lt;/p&gt;

&lt;p&gt;I first started looking at the 
&lt;a href=&quot;http://developer.github.com/v3/git/blobs/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/blobs/&lt;/code&gt;&lt;/a&gt; 
API route since that’s where a file
is stored in a git repo. Before I went digging around with the command line
to find the SHA hash for the file, I tried to see if I could get it from the
Github website — however most of the SHA identifiers are for commits, not files.&lt;/p&gt;

&lt;p&gt;So that was a dead-end, but a bit of googling later, I found that you can get the
SHA for a file by running &lt;code class=&quot;highlighter-rouge&quot;&gt;git hash-object FILEPATH&lt;/code&gt; (aside: 
&lt;a href=&quot;http://stackoverflow.com/questions/552659/assigning-git-sha1s-without-git/552725#552725&quot;&gt;this StackOverflow question&lt;/a&gt; 
was really insightful too). So I picked a random file from my blog repo and found
the SHA (&lt;code class=&quot;highlighter-rouge&quot;&gt;957e6b4efb22fa921d0e6b17a1fbf46788c97ed3&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then I pinged the &lt;code class=&quot;highlighter-rouge&quot;&gt;/blobs/:sha&lt;/code&gt; route with &lt;a href=&quot;http://hurl.it&quot;&gt;hurl.it&lt;/a&gt; and got 
this response:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1074083.js?file=blobs.json&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Interesting, the &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; field looks promising, &lt;strike&gt;but I &lt;i&gt;think&lt;/i&gt; it is the
git &lt;a href=&quot;http://book.git-scm.com/7_how_git_stores_objects.html&quot;&gt;loose object&lt;/a&gt;,
which is the content deflated with &lt;a href=&quot;http://www.zlib.net/&quot;&gt;zlib&lt;/a&gt;.&lt;/strike&gt; 
but it is base64 encoded. Not exactly ideal for showing the file contents to the user.&lt;/p&gt;

&lt;p&gt;A bit more digging and I found that the API has some 
&lt;a href=&quot;http://developer.github.com/v3/mimes/#git-blob&quot;&gt;custom MIME types&lt;/a&gt;. Adding the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: application/vnd.github-blob.raw&lt;/code&gt; to the HTTP Header, I got this response:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1074083.js?file=blobsraw.json&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Bingo! Access to the file data and it’s human readable. &lt;strike&gt;I suspect that using 
that MIME type causes the API to call &lt;code&gt;git cat-file&lt;/code&gt; or something similar on
the server.&lt;/strike&gt;&lt;/p&gt;

&lt;p&gt;Now, I need to be able to get the data for any file in the repo and I would
prefer to not have to use the command line to get the SHA every time. So it looks
like the &lt;a href=&quot;http://developer.github.com/v3/git/trees/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/trees/&lt;/code&gt;&lt;/a&gt;
API method will be useful — it displays the directories and files
present at a given commit. And since you can use branch names (like &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;) instead
of SHA (read more &lt;a href=&quot;http://book.git-scm.com/4_git_treeishes.html&quot;&gt;here&lt;/a&gt;), I figured
I could try plugging that into the Github API.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1074083.js?file=treesmaster.json&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Cool, it worked. And better yet, the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; field gives me the API URL to call for to
get the file contents (or the tree if it’s a directory).&lt;/p&gt;

&lt;p&gt;So given a Github username and repo name, I can pull down the file structure
with &lt;code class=&quot;highlighter-rouge&quot;&gt;/tree/master&lt;/code&gt; and then drill down on the individual files with &lt;code class=&quot;highlighter-rouge&quot;&gt;/blobs/&lt;/code&gt; and the
special MIME type.&lt;/p&gt;

&lt;p&gt;More to come later as I try to figure out how to make an edit to a file and commit it
to the repo and more details on the project this is all for once I make more progress.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Little Bets</title>
   <link href="http://mdswanson.com/writeup/2011/07/04/little-bets.html"/>
   <published>2011-07-04T00:00:00+05:30</published>
   <updated>2011-07-04T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/07/04/little-bets</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The book is about making deliberate, small bets to achieve a desirable end result. The idea is to get
critical feedback without investing extraneous time or money. By failing fast and learning from the mistakes,
the author argues that we can iterate more quickly and arrive at a favorable result faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
I have mixed feelings about the book. Most of the material is good; concepts like getting small wins
to build momentum and confidence and getting a minimum viable product in front of expert users are
certainly valuable. But the book lacks any real calls to action or steps to take, instead opting
to tell stories of how Pixar, Chris Rock and Steve Jobs use these methods.&lt;/p&gt;

&lt;p&gt;Compared to a book like &lt;a href=&quot;/writeup/2011/07/02/inspired.html&quot;&gt;Inspired&lt;/a&gt;, Little Bets falls flat for me; 
it feels like more a Malcolm Gladwell book. While it does mention agile software development, there 
isn’t anything specific to software.&lt;/p&gt;

&lt;p&gt;I would have liked to see more examples of making little bets for software products, like doing A/B 
tests or customer validation with &lt;a href=&quot;http://grattisfaction.com/2010/01/how-zynga-does-customer-development-minimum-viable-product/&quot;&gt;ghetto testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
While it was interesting to see little bets and the MVP concept being applied to other industries, particular
to stand-up comedy, I feel like there are better options that are more directly related to 
software development.&lt;/p&gt;

&lt;p&gt;It might be valuable for non-technical people who want a gentle introduction
to topics like agile iteration, failing quickly and getting user feedback, but engineers and
managers can probably skip this one.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Inspired</title>
   <link href="http://mdswanson.com/writeup/2011/07/02/inspired.html"/>
   <published>2011-07-02T00:00:00+05:30</published>
   <updated>2011-07-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/07/02/inspired</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
The book has tons of practical advice and techniques for creating software products. The main point is that
great software begins by first discovering whether it will be feasible, usability and provide value to the
customer. Cagan also highlights the major differences between &lt;em&gt;product&lt;/em&gt; and &lt;em&gt;project&lt;/em&gt; managers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
There were some good takeaways from this book. Probably most valuable are all the external resources that
are made available on the &lt;a href=&quot;http://www.svproduct.com/&quot;&gt;Silicon Valley Product Group&lt;/a&gt; website; there are sample
personas, product road maps, prototypes and more that allow you to see concrete implementations of the ideas
discussed in the book.&lt;/p&gt;

&lt;p&gt;There wasn’t much fluff, which was a nice surprise. When I opened a chapter on User Testing, I was expecting
a simple description and an empathetic &lt;code class=&quot;highlighter-rouge&quot;&gt;You should do this!&lt;/code&gt;. But instead there was sample dialogue and really
applicable advice on subtle topics like not “leading” the test subject and how to quickly iterate between tests.&lt;/p&gt;

&lt;p&gt;There are definitely some lessons that can be applied to custom software development as well. I think the idea of
having the PM and designers be one/two iterations ahead of the dev team is a really great idea and could improve my
own team’s project. I felt that the focus on building scalable architecture and routinely taking time to 
pay down technical debt is also important too.&lt;/p&gt;

&lt;p&gt;I think this book is a good candidate for a book club and I will propose it for the next one at SEP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
Anyone who is interested in becoming a Product Manager or working on a software product team will 
learn a lot from the book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Startup Weekend Tip &amp; Tricks</title>
   <link href="http://mdswanson.com/blog/2011/06/18/startup-weekend-tip-tricks.html"/>
   <published>2011-06-18T00:00:00+05:30</published>
   <updated>2011-06-18T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/06/18/startup-weekend-tip-tricks</id>
   <content type="html">&lt;p&gt;We are less than a month away from our inaugural internal &lt;a href=&quot;startupweekend.org/&quot;&gt;Startup Weekend&lt;/a&gt; event
at &lt;a href=&quot;http://sep.com&quot;&gt;SEP&lt;/a&gt; so I’ll be writing up a few posts in an effort
to share some knowledge that I have from attending similar hackathon-style
events and reading about startups voraciously for the past year.&lt;/p&gt;

&lt;p&gt;##Pick any platform you want (as long as it’s web or mobile…)
I highly recommend staying away from product ideas that are desktop or hardware 
based. I will go into some of the business reasons in a future post, but from
a technical standpoint it will be pretty hard to make significant progress in a
weekend and it can be difficult to demo.&lt;/p&gt;

&lt;p&gt;##The end of the weekend product isn’t the final product
If you start worrying about prematurely optimizing database calls or scaling to
thousands of concurrent connections, you will probably not get much done.
You might have a solid architecture on the whiteboard (complete with load
balancers, message queues, multi-tiered caching, … ), but nothing to show
at the all-important demo. It’s okay if not everything works, focus on getting
the core functionality done first and then polishing if there is time left.&lt;/p&gt;

&lt;p&gt;If you want to build a mobile app, maybe it would
be better to use &lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jQuery Mobile&lt;/a&gt; or 
&lt;a href=&quot;http://www.appcelerator.com/&quot;&gt;Appcelerator Titanium&lt;/a&gt; to crank out the
first version; you can always build native iOS and Android versions
if the project gets traction.&lt;/p&gt;

&lt;p&gt;##Make use of existing services
Unless you have someone on your team who wants to spend their weekend setting up 
servers and dealing with hosting, deploy your app to PaaS providers like 
&lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; (Ruby) or &lt;a href=&quot;http://appharbor.com/&quot;&gt;AppHarbor&lt;/a&gt; 
(.NET). If you need more flexibility, you can spin up an 
&lt;a href=&quot;http://aws.amazon.com/amis&quot;&gt;Amazon EC2 instance&lt;/a&gt; pretty easily. Remember that 
you can always move your architecture to your own hosted servers after the weekend.&lt;/p&gt;

&lt;p&gt;Here are some other services to consider, all with free plans for development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mongohq.com/&quot;&gt;MongoHQ&lt;/a&gt;/&lt;a href=&quot;https://mongolab.com&quot;&gt;MongoLab&lt;/a&gt; - cloud-based MongoDB instances&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sendgrid.com/&quot;&gt;SendGrid&lt;/a&gt; - API for sending emails&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.twilio.com/&quot;&gt;Twilio&lt;/a&gt; - Voice and SMS web service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some design shortcuts, use a website theme from 
&lt;a href=&quot;http://themeforest.net/&quot;&gt;ThemeForest&lt;/a&gt; and get icons from 
&lt;a href=&quot;http://www.iconfinder.com/&quot;&gt;IconFinder&lt;/a&gt; (make sure to check the licenses).&lt;/p&gt;

&lt;p&gt;##Research external APIs ahead of time
If your product idea is going to rely on an external API, put in a few hours
ahead of time and make sure you can answer these questions when pitching
your idea on Friday.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do you need an API key? (if so, get one beforehand - it may take a few days)&lt;/li&gt;
  &lt;li&gt;Do the terms of service prevent commercial use?&lt;/li&gt;
  &lt;li&gt;Is there a license fee?&lt;/li&gt;
  &lt;li&gt;Are there libraries in popular languages already?&lt;/li&gt;
  &lt;li&gt;Are there any request limits that might become a roadblock?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Play around with the API on your own. Make a few calls to it with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; (or
&lt;a href=&quot;http://hurl.it/&quot;&gt;hurl&lt;/a&gt; if your Unix-fu is weak). Find a library that is 
well maintained (check when the last commit was) and is easy to work with and 
try it out.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.programmableweb.com/apis&quot;&gt;ProgrammableWeb API directory&lt;/a&gt; is a 
good place to look if you need to find an API to provide the data you need.
&lt;a href=&quot;http://www.freebase.com/&quot;&gt;Freebase&lt;/a&gt; is another option if you need a specific
kind of data.&lt;/p&gt;

&lt;p&gt;##Have a plan of attack for your idea
Assuming the idea you pitch to the group on Friday gets support, it is
important that you, as the de-facto project manager, have some idea of how to
execute on your idea.  Try to slice up the product into independent verticals
so people can start working right away and won’t be clashing with each other.
There is nothing more frustrating then
having 3 engineers sitting around waiting for one person to figure out what to work
on next. Make sure you are constantly checking in on everyone’s progress and
figuring out the next steps.&lt;/p&gt;

&lt;p&gt;For a simple Rails web app example, you could divide the work up like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Someone can start &lt;a href=&quot;http://jamesshore.com/Agile-Book/spike_solutions.html&quot;&gt;spiking&lt;/a&gt; out controller actions&lt;/li&gt;
  &lt;li&gt;Someone can start on the database schema&lt;/li&gt;
  &lt;li&gt;Someone can do UI mockups on paper and then the HTML/CSS with &lt;a href=&quot;https://github.com/jlong/serve&quot;&gt;Serve&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Someone can start &lt;a href=&quot;http://ruby-toolbox.com/&quot;&gt;finding gems&lt;/a&gt; or integrating 3rd party APIs&lt;/li&gt;
  &lt;li&gt;Someone can build a marketing/sales site (this guide is awesome: &lt;a href=&quot;http://codefastdieyoung.com/2011/03/want-to-move-fast-just-do-this-part-1-design/&quot;&gt;CodeFastDieYoung&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now at least five people with defined tasks and you can hit the ground running
on Saturday morning.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Planning ahead and thinking through your product idea will save you a ton of 
headaches and make the weekend go much smoother. One of the worst things that
can happen during a startup weekend is when progress stops completely because
of an issue that could have been sorted out ahead of time.&lt;/p&gt;

&lt;p&gt;I find that doing this kind of research also helps me get more excited about
implementing an idea. Once all of the pieces start coming together on paper,
I am anxious to get started coding. Hopefully, over the next month, those 
planning to attend will start feeling the same excitement.&lt;/p&gt;

&lt;p&gt;If anyone else has tips and tricks or suggestions for what to cover in future
posts, feel free to let me know.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing with Markdown - Indy ALT.NET</title>
   <link href="http://mdswanson.com/talks/markdown-tools/index.html"/>
   <published>2011-06-16T00:00:00+05:30</published>
   <updated>2011-06-16T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talks/markdown-tools/markdown-tools-talk</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Personal Kanban</title>
   <link href="http://mdswanson.com/writeup/2011/06/09/personal-kanban.html"/>
   <published>2011-06-09T00:00:00+05:30</published>
   <updated>2011-06-09T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/06/09/personal-kanban</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
The book focuses on the how and why of using Kanban in both personal and team-oriented settings. It lays out
the fundamentals of creating a Kanban board and then digs into the reason why concepts like limiting WIP
and visualizing tasks are important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I went searching for a book on Kanban in software engineering after being unable to explain to someone
why using Kanban was so great. I know the &lt;em&gt;how&lt;/em&gt; because I have used Kanban on every project I have worked
on at SEP, but I didn’t have a really good grasp of the &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The book takes a stance against one size fits all productivity solutions and shows how flexible Kanban
can be by given examples from non-software applications (moving houses, college finance planning). I will
probably give a personal Kanban a try since my current system of Todo lists in a text file could use
improvement.&lt;/p&gt;

&lt;p&gt;I also liked the description of &lt;code class=&quot;highlighter-rouge&quot;&gt;kaizen&lt;/code&gt;; it is definitely something that I strive for and this was a good
reminder to always try to be improving your process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
I directly recommended it to a family member who works at a very deadline-driven, high pressure software
company and I think that that anyone who is unhappy with how their projects are being run could take 
some advice from it. If you use Kanban but want to dig into the philosophy behind it, this book is a solid
resource.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Startups Open Sourced</title>
   <link href="http://mdswanson.com/writeup/2011/05/30/startups-open-sourced.html"/>
   <published>2011-05-30T00:00:00+05:30</published>
   <updated>2011-05-30T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/05/30/startups-open-sourced</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;&lt;br /&gt;
Interviews with startup founders about their experiences and advice they would give. The open sourced part
of the title comes from the idea that these founders are opening up and sharing some of their secrets
about customer acquisition, hiring and getting funding/bootstrapping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;&lt;br /&gt;
Really liked the book; lots of very candid interviews with people that are famous in the Hacker News crowd.
This book is basically &lt;em&gt;Coders at Work&lt;/em&gt; for the startup generation. Instead of Knuth and Norvig, its got Tom
Preston-Warner (github), Alexis Ohanian (reddit/hipmunk) and more. In the case of &lt;em&gt;Coders at Work&lt;/em&gt;, I had
only heard of about 1/3 of the people in the book, whereas with &lt;em&gt;Startups Open Sourced&lt;/em&gt; I had heard of almost
all of the products/founders so I was more interested.&lt;/p&gt;

&lt;p&gt;It was interesting to be able to compare and contrast the different companies: how they meet co-founders,
how long they work, their backgrounds, etc. Though since each founder is asked pretty much the same question,
after like 10 interviews some of the stuff started to blend together. There was also a very heavy YCombinator
bias, but overall it was a pretty quick and interesting read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
If you enjoyed &lt;em&gt;Coders at Work&lt;/em&gt;, &lt;em&gt;Founders at Work&lt;/em&gt;, or some of the startup interview podcasts (Founder’s 
Talk, Mixergy, TechZing) then you are probably in the target audience. I personally read it to get psyched 
up for the upcoming startup weekend at work.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I read this on my Kindle, it’s on sale for $2.99 until May 31 ($10 regularly) so it is pretty cheap
and worth a look.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Podcast Roundup II</title>
   <link href="http://mdswanson.com/blog/2011/05/16/podcast-roundup-ii.html"/>
   <published>2011-05-16T00:00:00+05:30</published>
   <updated>2011-05-16T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/05/16/podcast-roundup-ii</id>
   <content type="html">&lt;p&gt;I’ve found a couple new podcasts that I have been listening to and wanted to share. I am
still listening to the three shows I &lt;a href=&quot;/blog/2010/10/28/podcast-roundup.html&quot;&gt;mentioned previously&lt;/a&gt;
and would continue to recommend them.&lt;/p&gt;

&lt;p&gt;On to the new podcasts!&lt;/p&gt;

&lt;p&gt;#StackExchange Podcast&lt;br /&gt;
Joel Spolsky, Jeff Atwood&lt;br /&gt;
Weekly releases&lt;br /&gt;
Topic: StackOverflow and related sites&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://blog.stackoverflow.com/category/podcasts/&quot;&gt;StackExchange Podcast&lt;/a&gt;
is the reboot of the now-defunkt StackOverflow podcast. 
I really enjoyed the StackOverflow podcast and it was actually the first podcast 
I listened to.&lt;/p&gt;

&lt;p&gt;Maybe I have rose-colored memories about the old show, but I seem
to remember it covering lots of interesting topics and interviews.  Sadly, through
the first four episodes of the StackExchange podcast, it has been very 
&lt;a href=&quot;http://meta.stackoverflow.com/&quot;&gt;meta&lt;/a&gt; and 
focused only on StackOverflow related discussions. I think Scott Hanselmen (the guest on episode 3)
captured my feelings when he noted that he was surprised how Joel and Jeff are still so
interested in voting algorithms and flagging tools this far into StackOverflow’s life. I actually
find the new podcast to be pretty boring.&lt;/p&gt;

&lt;p&gt;I really want this show to be good, but I am pretty close to dropping it from my rotation
in favor of some of the newer shows.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Founders Talk
Adam Stacoviak&lt;br /&gt;
Sporadic releases&lt;br /&gt;
Topic: interviews with startup founders&lt;/p&gt;

&lt;p&gt;I always felt that Adam was the weak link on the Changelog podcast, but he really shines
in &lt;a href=&quot;http://5by5.tv/founderstalk&quot;&gt;Founders Talk&lt;/a&gt;. 
He seems much more comfortable talking about the business aspects of founding
a company than the gory technical details on the Changelog.&lt;/p&gt;

&lt;p&gt;The interviews are really well done and the companies are an interesting mix. The interviews
with &lt;a href=&quot;http://5by5.tv/founderstalk/6&quot;&gt;Amy Hoy&lt;/a&gt; and 
&lt;a href=&quot;http://5by5.tv/founderstalk/4&quot;&gt;Ryan Carson&lt;/a&gt; got me hooked to this show and I am been 
listening to the new releases since.&lt;/p&gt;

&lt;p&gt;I should mention that the show has a very sporadic release schedule, sometimes there are no
shows for a month and other times there are 3 episodes in two week period.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Build &amp;amp; Analyze
Dan Benjamin and Marco Arment&lt;br /&gt;
Weekly releases&lt;br /&gt;
Topics: iOS, mobile web development, misc. freelance/startup stuff&lt;/p&gt;

&lt;p&gt;I think I got off on the wrong foot with Dan Benjamin. I first listened to 
&lt;a href=&quot;http://5by5.tv/devshow&quot;&gt;The Dev Show&lt;/a&gt; and
I really didn’t like it at all. It seemed like they just machine-gunned through the Hacker News
headlines for the week and added a sentence or two summary for each one.&lt;/p&gt;

&lt;p&gt;I saw a recommendation for this podcast, so despite my dislike of The Dev Show, I gave it a shot
and I was pleasantly surprised. &lt;a href=&quot;http://5by5.tv/buildanalyze&quot;&gt;Build &amp;amp; Analyze&lt;/a&gt; is 
co-hosted by &lt;a href=&quot;http://www.marco.org/&quot;&gt;Marco Arment&lt;/a&gt;, of Tumblr and Instapaper
fame, and he and Dan have really good on-air chemistry. The show is focused on iOS and mobile web
development, but they seem to go off-topic into other areas enough to keep me entertained. The show
is also a bit longer than a typical podcast (around 90 minutes) so it has a similar feel as the TechZing
discussion shows.&lt;/p&gt;

&lt;p&gt;I don’t find myself rushing to listen to the newest episode or go through the whole backlog, but the
show seems like a solid filler.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;b&gt;The Podcast Graveyard - where CD-Rs go to die&lt;/b&gt;  
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/static/podcast-graveyard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
(These were all in my car...)
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Moonwalking with Einstein</title>
   <link href="http://mdswanson.com/writeup/2011/04/17/moonwalking-with-einstein.html"/>
   <published>2011-04-17T00:00:00+05:30</published>
   <updated>2011-04-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2011/04/17/moonwalking-with-einstein</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt; &lt;br /&gt;
The book is about memory and memorization techniques, intertwined with a story about how
the author trained and competed in the US Memory Championship. The author discusses common 
techniques used by ‘mental athletes’ that allow them to memorize the order of a deck of 
cards in under a minute or whole pages of poetry or books.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt; &lt;br /&gt;
My last few books have been very technical, so it was good to enjoy something a little 
lighter. The book has good pacing, as it alternates between first-hand accounts of the 
memory competitions, studies of people with extraordinary memories and the basics of 
neuropsychology.&lt;/p&gt;

&lt;p&gt;The techniques discussed in the book are pretty cool, though even the author admits are 
not incredibly practical for everyday usage. I was able to use the ‘memory palace’ method 
to remember a list of 15 random objects and was able to recall them pretty easily 
several weeks later, so there may be some actually utility.&lt;/p&gt;

&lt;p&gt;I found that the most interesting aspect of the book was Josh’s practice regiment and training;
the discussion on deliberate practice was neat and echoes what others in the software 
field have said before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;&lt;br /&gt;
It is similar in style and subject matter to &lt;em&gt;Freakonomics&lt;/em&gt; or Malcolm Gladwell’s books,
so if you like those then you will probably enjoy &lt;em&gt;Moonwalking with Einstein&lt;/em&gt; as well. 
If you have taken any intro-level psychology courses, you might already be familiar with 
some of the material and experimental subjects, but I would still recommend it as light 
reading.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I read this book on my Kindle, no issues.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NoSQL Rundown - Brownbag</title>
   <link href="http://mdswanson.com/talks/nosql-rundown/index.html"/>
   <published>2011-03-24T00:00:00+05:30</published>
   <updated>2011-03-24T00:00:00+05:30</updated>
   <id>http://swanson.github.com/talks/nosql-rundown/nosql-rundown-talk</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Managing Python libraries across git projects</title>
   <link href="http://mdswanson.com/blog/2011/03/01/python-git-setup.html"/>
   <published>2011-03-01T00:00:00+05:30</published>
   <updated>2011-03-01T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/03/01/python-git-setup</id>
   <content type="html">&lt;p&gt;I finally got around to &lt;strike&gt;nuking from orbit&lt;/strike&gt; cleaning up
my virtual machine. Maybe this time around I can make it a whole year
without wrecking all the permissions on $HOME (I once had to &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ls&lt;/code&gt;…no joke).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/python_comrades.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I know that all good Python comrades should be using &lt;a href=&quot;http://pip.openplans.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;&lt;/a&gt; for installing
packages and &lt;a href=&quot;http://virtualenv.openplans.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;&lt;/a&gt; for managing them per project, but I never
really got into the latter. I was pretty lazy and just shoved everything 
into the global &lt;code class=&quot;highlighter-rouge&quot;&gt;site-packages&lt;/code&gt;, but since I had a fresh start I decided 
to do it The Right Way™ this time.&lt;/p&gt;

&lt;p&gt;And man, is it awesome!&lt;/p&gt;

&lt;p&gt;There is a sweet wrapper for &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; that I didn’t find (exist?)
last time I tried to get this setup working. &lt;a href=&quot;http://www.doughellmann.com/docs/virtualenvwrapper/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenvwrapper&lt;/code&gt;&lt;/a&gt; makes
it less painful to manage multiple environments and has a super neat
hook system.&lt;/p&gt;

&lt;p&gt;And then I found a handy &lt;a href=&quot;http://hmarr.com/2010/jan/19/making-virtualenv-play-nice-with-git/&quot;&gt;bash script to automatically switch your
environments when you &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to a git repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is my new workflow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;matt@nigiri:~$ mkvirtualenv foo-project
matt@nigiri:~$ mkdir projects/foo-project/ &amp;amp;&amp;amp; cd projects/foo-project/

(foo-project)matt@nigiri:~/projects/foo-project$ git init
(foo-project)matt@nigiri:~/projects/foo-project$ pip install flask   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Flask is only installed into this environment, if you open a &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; shell
inside foo-project you can import the module, but if you &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; out to $HOME
and try you will get an ImportError.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can enumerate the project dependancies (including versions) so 
that when someone clones the project they can install them all in one-go.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(foo-project)matt@nigiri:~/projects/foo-project$ cd
matt@nigiri:~$  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you leave the repository folder, your environment is automatically
deactivated.  Then, when you go to work on &lt;code class=&quot;highlighter-rouge&quot;&gt;foo-project&lt;/code&gt; again – it will
be reactivated when you &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; in.&lt;/p&gt;

&lt;p&gt;It’s pretty slick. If you want more info, check out:  &lt;br /&gt;
&lt;a href=&quot;http://mathematism.com/2009/07/30/presentation-pip-and-virtualenv/&quot;&gt;http://mathematism.com/2009/07/30/presentation-pip-and-virtualenv/&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How HackerNews ruined my morning</title>
   <link href="http://mdswanson.com/blog/2011/02/22/how-hackernews-ruined-my-morning.html"/>
   <published>2011-02-22T00:00:00+05:30</published>
   <updated>2011-02-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2011/02/22/how-hackernews-ruined-my-morning</id>
   <content type="html">&lt;p&gt;Derek Sivers once wrote that &lt;a href=&quot;http://sivers.org/multiply&quot;&gt;“ideas are just a multiplier of execution”&lt;/a&gt;. 
It makes perfect sense – the observation that execution is more important than the idea is one of those 
&lt;code class=&quot;highlighter-rouge&quot;&gt;why-didn't-I-think-of-that-and-write-a-book-about-it&lt;/code&gt; concepts that seems to be echoed by all of the 
software entrepreneur pundits. But until today it didn’t really sink in.&lt;/p&gt;

&lt;p&gt;I was bummed out to see a &lt;a href=&quot;http://news.ycombinator.com/item?id=2249390&quot;&gt;post on HackerNews&lt;/a&gt; today for 
a web app that recommended and categorized technical books.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But that sounds like something useful and cool! Why are you bummed?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, because it is the same idea as a &lt;a href=&quot;http://bibliotechnical.com/&quot;&gt;side project&lt;/a&gt; I have been working 
on for the past month. And worse, I counted at least five other commenters coming out of the woodwork with 
their own in-progress versions.&lt;/p&gt;

&lt;p&gt;This has become par for the course with the ubiquity of the internet these 
days; you have a flash of inspiration, only to find out 2 minutes (and a Google search) later that six people 
already wrote the same library, there are three apps that offer the same functionality already or that a 
better way already exists that you didn’t even consider.&lt;/p&gt;

&lt;p&gt;The sting is even worse when you have invested time and resources already. The idea may be “worthless”, but 
it sure doesn’t seem 
that way when its YOUR idea.&lt;/p&gt;

&lt;p&gt;A few hours (and a pity party) later, I realized that this isn’t the end of the world.  The concept has been validated; 
the fact it was popular on HackerNews (the target audience) and that other programmers were working on similar sites means 
that there was a need for improvement in this area.  I also have over 100 comments of feedback that I can use and apply 
to my own site.&lt;/p&gt;

&lt;p&gt;And most importantly, I think that my execution is better. Obviously I am biased, but most of the improvements brought up
in the comments are already addressed by my project.&lt;/p&gt;

&lt;p&gt;In 
&lt;em&gt;&lt;a href=&quot;http://mdswanson.com/writeup/2010/10/28/getting-real.html&quot;&gt;Getting Real&lt;/a&gt;&lt;/em&gt;, I learned that having a rival 
or &lt;a href=&quot;http://gettingreal.37signals.com/ch02_Have_an_Enemy.php&quot;&gt;enemy&lt;/a&gt; can help you hone in on the
problems you are trying to solve. In addition to Amazon book reviews and the perennial AskReddit/HackerNews book threads, I
now have several direct competitors.&lt;/p&gt;

&lt;p&gt;It is energizing and I hope it will push me to improve &lt;a href=&quot;http://bibliotechnical.com/&quot;&gt;bibliotechnical&lt;/a&gt; and grow as a developer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Envisioning Information</title>
   <link href="http://mdswanson.com/writeup/2010/12/05/envisioning-information.html"/>
   <published>2010-12-05T00:00:00+05:30</published>
   <updated>2010-12-05T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/12/05/envisioning-information</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
The book is an exploration of how to best present visual information in a 
variety of mediums.  The book covers six main topics and presents examples 
of each idea.  I chose to read this book because I thought it could be helpful 
in thinking about graphs and visualizations in a new way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I found it to be kind of a letdown.  The book is very highly regarded and 
considered a “classic” so my expectations were high and maybe that was the 
problem.  The book was definitely interesting and the examples are really 
cool, but I don’t feel like I was able to take away that much information that 
can be used in software.&lt;/p&gt;

&lt;p&gt;The section &lt;em&gt;Layering and Separation&lt;/em&gt; was most useful, as it demonstrated 
solutions to making grid-based information easier to parse and interpret.  I 
also liked the discussion of negative margins and how &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1=3 or more&lt;/code&gt;.  Some 
of the other sections (like the map/cartography related ones) were certainly 
interesting, but I didn’t really take away anything that useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
The book is skewed more towards designers, but it is a quick read (lots of 
pictures and under 200 pages).  I would recommend it to a developer with an 
interest in design or information visualization.  Make sure you read it in 
print though, since I don’t think the images would work as well in a digital 
format.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise 4 Recap - Glorified Screensaver - Post Mortem</title>
   <link href="http://mdswanson.com/blog/2010/11/22/weekly-noise-4-project-complete.html"/>
   <published>2010-11-22T00:00:00+05:30</published>
   <updated>2010-11-22T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/11/22/weekly-noise-4-project-complete</id>
   <content type="html">&lt;p&gt;I was just about to give up on my 
&lt;a href=&quot;http://mdswanson.com/blog/2010/10/31/weekly-noise-2-so-its-like-a-screensaver.html&quot;&gt;screensaver project&lt;/a&gt;.
My progress had stalled 
due to performance issues with &lt;code class=&quot;highlighter-rouge&quot;&gt;raphael.js&lt;/code&gt; as I started adding more than a 
handful of shapes.  I was ready to just slap a static background image on it 
and call it “done”; then I came across 
&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;three.js&lt;/code&gt;&lt;/a&gt; – a lightweight 3D Javascript 
engine and everything just fell into place.&lt;/p&gt;

&lt;p&gt;I saw a &lt;a href=&quot;http://nooshu.com/three-js-and-the-audio-data-api-visualisation/&quot;&gt;blog post&lt;/a&gt; 
about generating audio visualizations with &lt;code class=&quot;highlighter-rouge&quot;&gt;three.js&lt;/code&gt; and I was amazed at how smooth 
the animations were and that it was only 200 lines of code.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;three.js&lt;/code&gt; library itself is 
unassuming, but once I saw a few of the examples on Github, I knew that this could be the 
solution to my problems and is a very well-written piece of code.&lt;/p&gt;

&lt;p&gt;One of the &lt;a href=&quot;http://test.sjeiti.com/jsflowfield4d/&quot;&gt;demos&lt;/a&gt; was really cool and almost 
exactly like what I was &lt;em&gt;unsuccessfully&lt;/em&gt; trying to make.  So about an hour later and 
after a few passes through &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt;, I had modified the demo 
to work with jQuery and tweaked the parameters around to make the effect more suited 
to the screensaver.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;three.js&lt;/code&gt; library actually has both &lt;code class=&quot;highlighter-rouge&quot;&gt;SVG&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; outputs, though I didn’t 
see much difference in performance in either Firefox or Chrome.  I ultimately went 
with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; because, frankly, I am a little sick of &lt;code class=&quot;highlighter-rouge&quot;&gt;SVG&lt;/code&gt; at this point :-)&lt;/p&gt;

&lt;p&gt;And with that, I am declaring this project finished; the source code is on Github: 
&lt;a href=&quot;https://github.com/swanson/glorified-screensaver&quot;&gt;https://github.com/swanson/glorified-screensaver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only recommend running the client in Chrome (and maybe Safari).  Firefox 3.x doesn’t have support
for websockets so it uses a Flash fallback and the Chrome JS engine also performs better.  You can
run the page in fullscreen mode (&lt;code class=&quot;highlighter-rouge&quot;&gt;F11&lt;/code&gt;) for the best effect.&lt;/p&gt;

&lt;p&gt;And so you don’t have to install &lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt; yourself (though you should since it’s 
pretty cool!), here’s a video:&lt;/p&gt;

&lt;object width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=17104224&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=17104224&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;400&quot; height=&quot;300&quot; /&gt;&amp;lt;/embed&amp;gt;&lt;/object&gt;

&lt;p&gt;Recap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I built a real-time announcement board web app (“screensaver”) using &lt;a href=&quot;http://nodejs.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Updates are sent to all open instances of the page in real-time using &lt;a href=&quot;http://socket.io/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.io&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The background animation is rendered client-side using &lt;a href=&quot;https://github.com/mrdoob/three.js/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;three.js&lt;/code&gt;&lt;/a&gt; and is 
 based heavily on this &lt;a href=&quot;http://test.sjeiti.com/jsflowfield4d/&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I worked on this project for three weeks (Weekly Noise &lt;a href=&quot;http://mdswanson.com/blog/2010/10/31/weekly-noise-2-so-its-like-a-screensaver.html&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://mdswanson.com/blog/2010/11/08/weekly-noise-3-so-its-like-a-screensaver-part2.html&quot;&gt;3&lt;/a&gt;, and &lt;a href=&quot;http://mdswanson.com/blog/2010/11/14/weekly-noise-3-recap.html&quot;&gt;4&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;I planned to spend 12 hours of free time on the project; I ended up spending around 20 hours in total on it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt; and some libraries for it (&lt;a href=&quot;http://expressjs.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express.js&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://labs.learnboost.com/mongoose/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Haml-style templates using &lt;a href=&quot;http://jade-lang.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jade&lt;/code&gt;&lt;/a&gt; (still not a fan…)&lt;/li&gt;
  &lt;li&gt;Some jQuery tricks, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;live()&lt;/code&gt; event binding&lt;/li&gt;
  &lt;li&gt;A few neat things with CSS3/HTML5 – alpha channel, &lt;code class=&quot;highlighter-rouge&quot;&gt;box-shadows&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;border-radius&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I am still not that good at writing efficient Javascript&lt;/li&gt;
  &lt;li&gt;I am even worse at 3D graphics…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;Next week: I am taking a week off for Thanksgiving and to decide what to do work 
on next.  Ideas or collaborators are welcome as always :-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise 3 Recap/Weekly Noise 4 - Hitting a roadblock</title>
   <link href="http://mdswanson.com/blog/2010/11/14/weekly-noise-3-recap.html"/>
   <published>2010-11-14T00:00:00+05:30</published>
   <updated>2010-11-14T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/11/14/weekly-noise-3-recap</id>
   <content type="html">&lt;p&gt;I ran into some issues this week.  The first task that I tried to tackle was
rendering a more complex background with 30+ shapes using &lt;code class=&quot;highlighter-rouge&quot;&gt;raphael.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I was able to throw together a simple method for generating random curved 
paths for the shapes, but once I added more than three shapes, the performance 
dropped greatly.  Even on my quad-core machine, one core pegged at 100% CPU 
usage and the animation started stuttering in Chrome.  In Firefox, it simply 
crashed the browser.&lt;/p&gt;

&lt;p&gt;After hitting this roadblock, I didn’t really work on the other tasks for the 
week, since this is a show-stopper.  If I can’t get the performance to improve, 
then there isn’t really much point continuing.&lt;/p&gt;

&lt;p&gt;I am not sure if I am just doing the animations in a really inefficient way or 
if the library is not meant to handle this many objects being animated at once 
(or a combination of both).&lt;/p&gt;

&lt;p&gt;This week I will spend my time trying to see if I can modify my code to make it 
usable, if not I will probably just have to scrap the project.  I looked at some 
other options like &lt;code class=&quot;highlighter-rouge&quot;&gt;processing.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; but those don’t seem to have 
much better performance.&lt;/p&gt;

&lt;p&gt;Goals for the week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve performance or bust…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time budget: 3 hours&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise 3 - "So it's like a screensaver..." (Part II)</title>
   <link href="http://mdswanson.com/blog/2010/11/08/weekly-noise-3-so-its-like-a-screensaver-part2.html"/>
   <published>2010-11-08T00:00:00+05:30</published>
   <updated>2010-11-08T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/11/08/weekly-noise-3-so-its-like-a-screensaver-part2</id>
   <content type="html">&lt;p&gt;I got a lot done &lt;a href=&quot;http://mdswanson.com/blog/2010/11/07/weekly-noise-2-recap.html&quot;&gt;last week&lt;/a&gt; 
and I am really liking the &lt;strong&gt;Weekly Noise&lt;/strong&gt; format.  I’ve even got a new idea 
ready for after I finish this project – and even though I want to jump ship and 
start on that, I will be patient and follow my new system.&lt;/p&gt;

&lt;p&gt;Currently, I’ve got almost all of the functionality done.  There are a few minor 
things left, like sorting based on the timestamp and doing some refactoring in 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; app, but for the most part all that remains is styling the pages and 
then getting the background animation going.  I will probably move the sorting 
onto the client so that I can avoid looping in &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and use some kind of 
asynchronous map to build up the results set as I mentioned in my recap.&lt;/p&gt;

&lt;p&gt;I need to find a way to draw polygons in &lt;code class=&quot;highlighter-rouge&quot;&gt;raphael.js&lt;/code&gt; – I know there are a 
&lt;a href=&quot;https://github.com/wout/raphael-shapes&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;http://code.google.com/p/jsvectoreditor/&quot;&gt;add-on&lt;/a&gt; 
libraries out there that I can probably use, but there is still some legwork 
involved with that.&lt;/p&gt;

&lt;p&gt;The other challenge that remains is getting pseudo-random paths for the shapes 
to animated along.  I saw “pseudo-random” because there is a general path that 
they should follow so that the background “flows”, but I need some randomness 
to make it look more natural.&lt;/p&gt;

&lt;p&gt;And then, fingers crossed, it will be done.  Hopefully, adding 50-100 more 
shapes to the SVG canvas won’t bring the browser to it’s knees; if it does 
then I might have to figure out a better way to draw the background.  I don’t 
know how SVG compares to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; from a performance stand-point so that 
might be worth investigating.&lt;/p&gt;

&lt;p&gt;Goals for the week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix announcement sorting&lt;/li&gt;
  &lt;li&gt;Draw a polygon&lt;/li&gt;
  &lt;li&gt;Get the full background going&lt;/li&gt;
  &lt;li&gt;Style the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time budget: 4 hours&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise 2 Recap - alert("It's working!");</title>
   <link href="http://mdswanson.com/blog/2010/11/07/weekly-noise-2-recap.html"/>
   <published>2010-11-07T00:00:00+05:30</published>
   <updated>2010-11-07T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/11/07/weekly-noise-2-recap</id>
   <content type="html">&lt;p&gt;The past week I have been working on a 
&lt;a href=&quot;http://mdswanson.com/blog/2010/10/31/weekly-noise-2-so-its-like-a-screensaver.html&quot;&gt;web-based “announcement board”&lt;/a&gt; 
using a &lt;a href=&quot;http://mdswanson.com/blog/2010/11/03/sipping-the-nodejs-koolaid.html&quot;&gt;slew of Javascript libraries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So how did I do? Well I hit all my goals for the week, which were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get a static page up that receives WebSocket updates ✓&lt;/li&gt;
  &lt;li&gt;Make a simple Admin page to CRUD announcement items ✓&lt;/li&gt;
  &lt;li&gt;Get basic animation going for the background ✓&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The static page was simple enough to setup, especially since I have used &lt;code class=&quot;highlighter-rouge&quot;&gt;socket.io&lt;/code&gt; 
before.  I added some basic styling to play around with some CSS3 stuff (&lt;code class=&quot;highlighter-rouge&quot;&gt;border-radius&lt;/code&gt; 
and &lt;code class=&quot;highlighter-rouge&quot;&gt;box-shadow&lt;/code&gt; are pretty slick).  I send a payload and an action type over &lt;code class=&quot;highlighter-rouge&quot;&gt;socket.io&lt;/code&gt; 
to the page and then perform the appropriate action – adding an announcement, editing 
the message or removing it all together – with &lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/static/week2-index.png&quot;&gt;&lt;img src=&quot;/static/week2-index-thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I setup an “Edit” page where you can CRUD announcements.  I used jQuery 
Ajax POSTs to trigger the actions in the database.&lt;/p&gt;

&lt;p&gt;Since I am serving the pages with &lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt;, I had to adjust to an asynchronous programming 
model.  I haven’t been able to wrap my head around this concept in the past – my previous 
attempts at using &lt;code class=&quot;highlighter-rouge&quot;&gt;monocle&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;twisted&lt;/code&gt; always ended with me frustrated and discouraged.&lt;/p&gt;

&lt;p&gt;I spent some time trying to debug why I was not able to pull some documents out of &lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDB&lt;/code&gt;
and pass them to the template.  It took me a while to realize that I need to put the 
rendering function in the callback for the database query.  Otherwise, my application was 
happy to go on ahead and render the page with an empty array.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Bad!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stored_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//pull some data out of mongo&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Announcement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;stored_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//pass the results to the template&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'edit.jade'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit Announcements'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stored_items&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Putting the &lt;code class=&quot;highlighter-rouge&quot;&gt;res.render()&lt;/code&gt; in the callback ensures that the query has finished and the 
page will receive the proper data.  I imagine this code could still be improved with some 
kind of asynchronous &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; function instead of a for-loop, but it works well enough at the moment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Good! (well, better at least...)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stored_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//pull some data out of mongo&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Announcement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;stored_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//pass the results to the template&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'edit.jade'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit Announcements'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stored_items&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also ran into a problem with binding jQuery &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; callbacks.  Since all of the CRUD functionality 
uses Ajax POSTs, I was constructing the new announcement divs on-the-fly.  If you use the 
normal &lt;code class=&quot;highlighter-rouge&quot;&gt;$('#foo').click( ... )&lt;/code&gt; jQuery code, only the DOM elements that are present when that 
function is executed actually get bound.&lt;/p&gt;

&lt;p&gt;As a result, any new elements that I add (like when I 
created a new announcement) would not respond to events.  Fortunately, this is easily fixed by using 
&lt;a href=&quot;http://api.jquery.com/live/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.live()&lt;/code&gt;&lt;/a&gt;, which binds the event handlers to all selector matches, 
even those created dynamically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/week2-edit.png&quot; alt=&quot;/static/week2-edit.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last goal was to get a simple animation going in the background using &lt;code class=&quot;highlighter-rouge&quot;&gt;raphael.js&lt;/code&gt;.&lt;br /&gt;
I want to be able to generate a bunch of polygons and then have them animate along a path.
Once the polygon goes offscreen, my plan is to loop it around back to where it started to 
give the illusion of an endless stream.&lt;/p&gt;

&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;inkscape&lt;/code&gt; to make an SVG path (which is really just a string of coordinates and 
commands) and then had a spinning square follow the path.  Since the SVG element lives in 
the DOM along with the other page elements, I needed to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;zIndex&lt;/code&gt; so that the 
animation would appear underneath the other text and images on the screen.&lt;/p&gt;

&lt;p&gt;All together, it was a productive week.  Despite hitting a few obstacles, I learned a 
few new tricks and made good progress; the source code for the app is on 
&lt;a href=&quot;https://github.com/swanson/glorified-screensaver&quot;&gt;Github&lt;/a&gt; so feel free to take a look.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building a Javascript web app, or sipping the node.js koolaid</title>
   <link href="http://mdswanson.com/blog/2010/11/03/sipping-the-nodejs-koolaid.html"/>
   <published>2010-11-03T00:00:00+05:30</published>
   <updated>2010-11-03T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/11/03/sipping-the-nodejs-koolaid</id>
   <content type="html">&lt;p&gt;I’ve been toying around with the idea of building a 
&lt;a href=&quot;http://mdswanson.com/blog/2010/10/31/weekly-noise-2-so-its-like-a-screensaver.html&quot;&gt;small web application&lt;/a&gt; 
with a completely Javascript stack, from top-to-bottom.  After perusing GitHub for a bit, 
I found that it is actually doable.&lt;/p&gt;

&lt;p&gt;For the purpose of this post, I’ll consider a basic stack to consist of: a
server, a web framework, a backend server and a templating engine.  And I’ll also
use Javascript on the front-end.&lt;/p&gt;

&lt;p&gt;Here’s the rundown of what I’ll be using for my current side-project and how to 
get it installed.&lt;/p&gt;

&lt;p&gt;#Server: node.js
&lt;a href=&quot;http://nodejs.org&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt;&lt;/a&gt; is an evented I/O server that uses Google’s V8 
Javascript engine.  All the cool kids are doing it.&lt;/p&gt;

&lt;p&gt;To install &lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt; in Linux: &lt;br /&gt;
&lt;a href=&quot;http://nodejs.org/#download&quot;&gt;Download&lt;/a&gt; the tarball and extract it &lt;br /&gt;
Then in your favorite terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd node
./configure You may get some warnings about missing SSL components, if so do:  

apt-get install openssl libssl-dev pkg-config    and then try again.  You can install `node.js` without SSL but you will run  into problems with `socket.io` later.  After you get the green-light from configure, run these:

make
make install
make test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check that it worked with &lt;code class=&quot;highlighter-rouge&quot;&gt;node --version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;#npm
&lt;a href=&quot;http://npm.mape.me/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/a&gt; is a package manager for &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; libraries.&lt;br /&gt;
Think of it like PyPi or Rubygems.&lt;/p&gt;

&lt;p&gt;To install &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;: &lt;br /&gt;
In your favorite terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://npmjs.org/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/isaacs/npm/blob/master/README.md&quot;&gt;README&lt;/a&gt; if 
you get permission errors, or just bust out &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; if you like living 
dangerously.&lt;/p&gt;

&lt;p&gt;Now we can install all the other libraries with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; instead of grabbing 
tarballs or cloning repos.&lt;/p&gt;

&lt;p&gt;#Framework: express.js
&lt;a href=&quot;http://expressjs.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express.js&lt;/code&gt;&lt;/a&gt; is Sinatra-inspired web framework 
for &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt;.  It’s billed as “insanely fast, insanely sexy” so what’s 
not to like!&lt;/p&gt;

&lt;p&gt;Install it with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install express
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt; in a directory to setup a skeleton project structure.&lt;/p&gt;

&lt;p&gt;#Templates: jade
&lt;a href=&quot;http://jade-lang.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jade&lt;/code&gt;&lt;/a&gt; is a templating engine for &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; that is 
similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;Haml&lt;/code&gt;. I am still looking for something closer to &lt;code class=&quot;highlighter-rouge&quot;&gt;jinja2&lt;/code&gt; but 
&lt;code class=&quot;highlighter-rouge&quot;&gt;jade&lt;/code&gt; will do for now.&lt;/p&gt;

&lt;p&gt;Install it with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install jade   
npm install less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;#Backend: mongoose + MongoDB
&lt;a href=&quot;https://github.com/LearnBoost/mongoose&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose&lt;/code&gt;&lt;/a&gt; is a MongoDB ORM 
specifically design for the asynchronous callback model used in &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt;. 
MongoDB can also speak Javascript on its own plus everything is JSON-like.&lt;/p&gt;

&lt;p&gt;Follow the instructions &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Quickstart+Unix&quot;&gt;here&lt;/a&gt; 
if you don’t have MongoDB installed.  Or maybe you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install mongodb&lt;/code&gt; 
if you are lazy like me.&lt;/p&gt;

&lt;p&gt;Then install &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install mongoose   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;#Front-end goodies:
##jquery
Hopefully, no explanation necessary; drop this into your HTML and be on your way:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;##Socket.IO
&lt;a href=&quot;http://socket.io&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket.IO&lt;/code&gt;&lt;/a&gt; provides an interface for pushing real-time 
updates using WebSockets + browser fallbacks (for those poor non-Chrome users).
It plays nicely with &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install it with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install socket.io
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://socket.io/&quot;&gt;docs&lt;/a&gt; for instructions on how to setup the 
client-side stuff.&lt;/p&gt;

&lt;p&gt;##Raphaël.js
&lt;a href=&quot;http://raphaeljs.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Raphaël.js&lt;/code&gt;&lt;/a&gt; is a small SVG drawing and animation library
that makes it simple to make pretty things happen in the browser.&lt;/p&gt;

&lt;p&gt;You can play around with it here: &lt;a href=&quot;http://raphaeljs.com/playground.html&quot;&gt;http://raphaeljs.com/playground.html&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I was able to get everything working together (albeit every piece is doing very 
basic stuff) so my ‘proof-of-concept’ is complete and I can start working on the 
actual app now.&lt;/p&gt;

&lt;p&gt;I’ve dubbed this new stack &lt;strong&gt;MUNJE&lt;/strong&gt; (pronounced like &lt;code class=&quot;highlighter-rouge&quot;&gt;munge&lt;/code&gt;) for 
Mongo-Unix-Node-Jade-Express…and because no one will be able to decipher my 
ugly Javascript code ;-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More Joel on Software</title>
   <link href="http://mdswanson.com/writeup/2010/11/02/more-joel-on-software.html"/>
   <published>2010-11-02T00:00:00+05:30</published>
   <updated>2010-11-02T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/11/02/more-joel-on-software</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
More musings on software from everyone’s favorite ex-Microsoft developer-turned-celebrity-blogger.  This 
book is more focused on the business aspect of developing software and provides advice on a wide range 
of topics, including how to hire programmers, management techniques, and company philosophy and culture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I really enjoy Spolsky’s writing and he does an excellent job of weaving in stories and anecdotes to support
his arguments.  On the other hand, I didn’t really care for the book as a whole.  All of the content is 
good, but I had already read 85% of the articles on his blog.  There is some great stuff 
(&lt;a href=&quot;http://www.joelonsoftware.com/items/2007/09/18.html&quot;&gt;Strategy Letter VI&lt;/a&gt;
and &lt;a href=&quot;http://www.joelonsoftware.com/items/2007/10/26.html&quot;&gt;Evidence Based Scheduling&lt;/a&gt; come to mind), but 
I didn’t really benefit from having it as a hard copy.&lt;/p&gt;

&lt;p&gt;I like to think of [More] Joel on Software as a &lt;strong&gt;gateway book&lt;/strong&gt; – it is a great introductory book for 
people that are new to the whole “best practices for software” philosophy.  It is approachable enough for
non-technical managers and can really help get them excited about changing their own processes for the
better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
If you are unfamiliar with Joel Spolsky or Joel on Software, you should definitely check out this book.  But 
if you have read his blog with any frequency (and since he is ‘retired’ now it is easy to catch up on the 
archives) then you can probably skip the book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise 2 - "So it's like a screensaver..."</title>
   <link href="http://mdswanson.com/blog/2010/10/31/weekly-noise-2-so-its-like-a-screensaver.html"/>
   <published>2010-10-31T00:00:00+05:30</published>
   <updated>2010-10-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/10/31/weekly-noise-2-so-its-like-a-screensaver</id>
   <content type="html">&lt;p&gt;I will be moving offices in January and as part of the new design, the office 
will have several inset areas in the walls to mount flat-panel displays.  I 
am sure that you have seen these “announcement boards” in office buildings before
– they are basically replacing the building directories or traditional bulletin
boards.  You could use it for displaying a welcome message, special events, 
upcoming meetings, etc.&lt;/p&gt;

&lt;p&gt;I think most of these displays are usually just hacked together by looping over 
a few PowerPoint slides.  Not very elegant or high tech, especially for a software
company!&lt;/p&gt;

&lt;p&gt;So when I noticed that the new office would have several of these monitors, I 
thought about some cool things that they could display.  I started thinking 
about all kind of &lt;em&gt;visualizations&lt;/em&gt;, &lt;em&gt;infographics&lt;/em&gt; and other fancy sounding 
ideas – then I talked to a co-worker about the idea and he seemed uninterested
in why I wanted to make a screensaver. Doh.  Well I guess that’s basically what 
it is…a glorified screensaver.&lt;/p&gt;

&lt;p&gt;But I still wanted to build it!  It gives me a chance to make something with a 
few new technologies I’d been playing around with.  The first is 
&lt;a href=&quot;http://raphaeljs.com/&quot;&gt;Raphaël.js&lt;/a&gt; – a Javascript library for creating SVG drawings and 
animations.  It is pretty simple to use and I am trying to brush up on Javascript, 
so it’s a win-win.  I also wanted the display to be able to get updates in real-time
so I figured I could use &lt;a href=&quot;http://www.websockets.org/&quot;&gt;WebSockets&lt;/a&gt; to provide a means to 
do this.&lt;/p&gt;

&lt;p&gt;The computer powering the display will launch a browser (in full-screen mode), 
point it to a webpage and then render the Javascript “screen-saver”.  A server 
will send updates to the page through WebSockets – I can hack together a simple admin 
page to edit announcements.  I even have a grand vision of hooking the page
up to our source code repositories and triggering some kind of special effect on the 
display when a check-in is made – but I’ll shelve that until I get some basic 
functionality.&lt;/p&gt;

&lt;p&gt;Goals for the week:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Get a static page up that receives WebSocket updates&lt;/li&gt;
  &lt;li&gt;Make a simple Admin page to CRUD announcement items&lt;/li&gt;
  &lt;li&gt;Get basic animation going for the background&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time budget: 5 hours&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise - Week 1 Recap</title>
   <link href="http://mdswanson.com/blog/2010/10/31/weekly-noise-1-recap.html"/>
   <published>2010-10-31T00:00:00+05:30</published>
   <updated>2010-10-31T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/10/31/weekly-noise-1-recap</id>
   <content type="html">&lt;p&gt;Its been a week since I started my first &lt;a href=&quot;http://mdswanson.com/blog/2010/10/24/weekly-noise.html&quot;&gt;Weekly Noise&lt;/a&gt;
post and so far, I think it is a success.  Since I had planned out what to work
on in advance, I didn’t have to waste much time thinking about what to do when 
I had some downtime.  With that said, I will be continuing this format.&lt;/p&gt;

&lt;p&gt;Once I got a decent workflow going for actually making posts (Markdown and I still don’t
seem to be getting along), writing the posts was actually pretty quick.  I have been 
using the &lt;strong&gt;awesome&lt;/strong&gt; &lt;a href=&quot;http://attacklab.net/showdown/&quot;&gt;Showdown&lt;/a&gt; tool to do 
WYSIWYG editing of the posts and then running &lt;code class=&quot;highlighter-rouge&quot;&gt;jeykll --server&lt;/code&gt;
locally to do a formating check and some spot-edits.  By the end of the week,
there was almost no overhead to writing book reviews in this way – I was 
even able to do one during my lunch break.&lt;/p&gt;

&lt;p&gt;I didn’t quite finish all the books on my list – I have &lt;strong&gt;More Joel on Software&lt;/strong&gt;
and &lt;strong&gt;Passionate Programmer&lt;/strong&gt; to do.  But I had a pretty busy weekend, so I will
catch up on those either tonight or tomorrow.  You can find the writeups that I 
finished on the front page on the site, under the Book Writeup’s heading.  Despite falling
a bit short of my goal, I still felt a lot more productive.&lt;/p&gt;

&lt;p&gt;I had three projects that I wanted to work on in the next week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript/SVG announcement “board” that could be used on a few monitors around
 my office&lt;/li&gt;
  &lt;li&gt;Expand &lt;a href=&quot;http://attacklab.net/showdown/&quot;&gt;Showdown&lt;/a&gt; to include the other popular
 markup languages (Textile, RST, Creole)&lt;/li&gt;
  &lt;li&gt;Start working on a fantasy football mobile app with 
 &lt;a href=&quot;http://www.appcelerator.com/&quot;&gt;Titanium Appcelerator&lt;/a&gt;, using the 
 &lt;a href=&quot;http://developer.yahoo.com/fantasysports/&quot;&gt;Yahoo Sports API&lt;/a&gt; I played around with a couple weeks ago&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, I decided on the first opinion; so onwards to next week!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Podcast Roundup</title>
   <link href="http://mdswanson.com/blog/2010/10/28/podcast-roundup.html"/>
   <published>2010-10-28T00:00:00+05:30</published>
   <updated>2010-10-28T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/10/28/podcast-roundup</id>
   <content type="html">&lt;p&gt;I have a confession to make…I am a podcast-aholic.  I have a 30 minute commute to and from the office every day
so I load up a CD with tech podcasts and listen to them as I drive.  I even wrote a script to download
new episodes and prepare them to be burned to CDs.  There are about a dozen programming podcasts that I have listened
to on a regular basis, but I wanted to share a few of my favorites that have been dominating my playlists recently.&lt;/p&gt;

&lt;p&gt;#TechZing
Release Schedule: Twice Weekly (Midweek interview, Weekend discussion), ~90 minute episodes &lt;br /&gt;
Topics: Tech, Start-ups, Hacker News-type stories&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techzinglive.com/&quot;&gt;TechZing&lt;/a&gt; is currently my favorite podcast.  There are two episodes a 
week: one interview show and one discussion show.  The interview shows are really interesting and feel more like you are
sitting in on a conversation than a typical Q&amp;amp;A session.  The hosts (Justin Vincent and Jason Roberts) aren’t afraid to
interject their own thoughts and stories into the interview and I think it makes for a much more engaging show.&lt;/p&gt;

&lt;p&gt;But the weekend discussion show is what really shines.  Justin and Jason are both funny guys and I think they would be 
awesome to hang out with.  I love hearing about their own bootstrapped businesses and start-up ideas; they are pretty 
transparent and open about the decisions they make and what the outcomes are.  They both seem really down-to-earth and 
relatable.  Neither is afraid to speak his mind and give his own “take” about what is going on the tech world.  Something 
about them just feels “real”, they aren’t superstar bloggers or Hacker News celebrities – just two normal hackers 
hanging out and talking shop.  They seem to be gaining momentum and I am excited to follow this podcast as it grows.&lt;/p&gt;

&lt;p&gt;Here are a few of their interview shows that I really liked:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://techzinglive.com/page/423/techzing-68-gabriel-weinberg-duckduckgo&quot;&gt;TechZing 68&lt;/a&gt;: Gabriel Weinberg &amp;amp; DuckDuckGo&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techzinglive.com/page/187/techzing-38-pete-michaud-retired-at-25&quot;&gt;TechZing 38&lt;/a&gt;: Pete Michaud / Retired at 25&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;#The Changelog &lt;br /&gt;
Release Schedule: Weekly, ~30 minute episodes &lt;br /&gt;
Topics: Open source&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thechangelog.com/&quot;&gt;The Changelog&lt;/a&gt; is a weekly show that explores up-and-coming open source software projects.
The show typically uses an interview format; the hosts (Adam Stacoviak and Wynn Netherland) interview someone involved
with the project (usually the creator) and they give an overview of the project, their motivations, etc.  There is 
enough technical detail to keep the listeners interested and the hosts generally ask informed questions: how is this
implemented? what other libraries is it similar too?  Each show usually ends with the guest sharing what’s on their
“open source radar”.&lt;/p&gt;

&lt;p&gt;The show seems to have a slight bias toward Javascript and, to a less extent, Ruby projects, but most of the shows should be
interesting to developers who work in any language.  The podcast benefits greatly from exposure on Github (it is featured
on the Explore page) and this is actually how I found out about it.&lt;/p&gt;

&lt;p&gt;All of the episodes are about recent projects, so for those that like to stay current on the latest “flavor of
the month” (I’m looking at you &lt;code class=&quot;highlighter-rouge&quot;&gt;node.js&lt;/code&gt; diehards…) then I would recommend The Changelog.  This also means that even
as you worked your way through the backlog, you are still hearing about current stuff.&lt;/p&gt;

&lt;p&gt;Here are some of my favorite episodes to get you started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thechangelog.com/post/1087757312/episode-0-3-4-mongrel2-guitar-and-more-with-zed-shaw&quot;&gt;Episode 0.3.4&lt;/a&gt;: Mongrel2, guitar, and more with Zed Shaw&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thechangelog.com/post/849754840/episode-0-2-9-coffeescript-with-jeremy-ashkenas&quot;&gt;Episode 0.2.9&lt;/a&gt;: CoffeeScript with Jeremy Ashkenas&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thechangelog.com/post/415433641/episode-0-1-5-leah-culver-on-oauth-hurl-it-baconfile-and&quot;&gt;Episode 0.1.5&lt;/a&gt;: Leah Culver on OAuth, Hurl.it, Baconfile, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;#This Developer’s Life &lt;br /&gt;
Release Schedule: About 3 times a month, ~45 minute episodes &lt;br /&gt;
Topics: Stories about developers&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thisdeveloperslife.com/&quot;&gt;This Developer’s Life&lt;/a&gt; is a new podcast – the first episode was 2 months ago
and, as of this post, there have been six episodes released.  The show is hosted by Rob Conery and Scott Hanselman (of HanselMinutes
fame) and takes a more narrative approach than other tech podcasts.  Think of it like NPR for Programmers.&lt;/p&gt;

&lt;p&gt;I have only listened to one episode of the podcast so far, but it was really good.  I usually cherry-pick some episodes from HanselMinutes
– even though I work with .NET at my job, I think that podcast tends to drift a bit too far into Microsoft-land for my tastes – but Scott 
is a really good show host.  The production value of the show is quite high so I am excited to catch up on the backlog and 
will definitely be subscribing to future episodes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Real</title>
   <link href="http://mdswanson.com/writeup/2010/10/28/getting-real.html"/>
   <published>2010-10-28T00:00:00+05:30</published>
   <updated>2010-10-28T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/10/28/getting-real</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
The book is primarily about how to run a lean start-up.  By having less features, less organizational bloat, and bootstrapping yourself, 
they argue that you will have a more successful business.  The main takeaway I got was to just start actually working on something; 
build half a product, not a half-ass product.  Don’t worry about how you will scale for 10,000 users when you don’t even have 10 users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
There are tons of practical examples in this book and it is full of great advice for running your own small business.  I am familiar with
 working in a lean environment, but there were some new ideas about how to make your customers happy that I think could be valuable.
 The book is a quick read, most of the chapters are broken down into 1-2 page essays which makes it easy to come back later and pick 
 up a new piece of advice that you may have missed the first time.  I really liked the closing thoughts in the book:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Everyone can read a book. Everyone can come up with an idea. Everyone has a cousin that’s a web designer. Everyone can write a blog. Everyone can hire someone to hack together some code.&lt;/p&gt;

  &lt;p&gt;The difference between you and everyone else will be how well you execute. Success is all about great execution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
There is a little something for everyone in this book.  Feature selection and coding practices for developers, organizational tips 
and staffing for managers, and promotions and sales techniques for marketing and business development.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I read this book on my Kindle, no issues.  It is available online for free at &lt;a href=&quot;http://gettingreal.37signals.com/toc.php&quot;&gt;37 Signals&lt;/a&gt;
 if you aren’t into dead trees.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hackers &amp; Painters</title>
   <link href="http://mdswanson.com/writeup/2010/10/27/hackers-and-painters.html"/>
   <published>2010-10-27T00:00:00+05:30</published>
   <updated>2010-10-27T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/10/27/hackers-and-painters</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
This book is a collection of essays on a wide variety of topics by Paul Graham, of Lisp and 
Y-Combinator fame.  There is a mixture of technical topics and social/psychology topics; 
almost every section will leave you thinking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I have read a few of PG’s essays, so I also enjoyed the book.  I found it to be similar to 
&lt;a href=&quot;http://www.amazon.com/Joel-Software-Occasionally-Developers-Designers/dp/1590593898&quot;&gt;Joel on Software&lt;/a&gt;,
in that is is a collection of bite-sized chunks and was pretty easy to read.  While I didn’t
really learn that much about actual programming (I haven’t been converted to Lisp…), there
were some interesting sections about software that made me think about things in a new way. 
PG is a great essayist and I enjoy reading about “hacker culture”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
If you read &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;Hacker News&lt;/a&gt;, you will like this book…but then
again, if you read Hacker News you have probably already read it.  If you have no idea what
that sentence is talking about, maybe this isn’t the book for you.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I read this book on my Kindle, no issues.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pro Git</title>
   <link href="http://mdswanson.com/writeup/2010/10/26/pro-git.html"/>
   <published>2010-10-26T00:00:00+05:30</published>
   <updated>2010-10-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/10/26/pro-git</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
This is the defacto book on &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;, the distributed version control system.  It explains how git works 
(storing changes, branching, etc) and also details some distributed workflows that can be used in a team 
setting.  Additionally, there are lots of neat tips and tricks to improve productivity when using git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I had some hands-on experience with git already (I have been using it as for my personal repositories for
 about a year) so this book was a nice way to compliment my existing knowledge.  Some of the introductory
 chapters were a bit boring since I knew the basics of using git, but I did not have a really solid 
 understanding of branching so that chapter was really interesting.  The book uses a lot of diagrams and 
 examples to illustrate the advantages of git and this really helped me finally understand why is ‘better’ than other VCSs.
 The structure of the book is a little disjointed – it is more of a reference book than a cover-to-cover 
 read.  I particularly thought that the chapter on setting up a git server could have been moved to an 
 appendix and I would have maybe liked more information on team workflows such as feature branching or 
 &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;git-flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; on a regular basis already, you can probably skip this book.  Some people might like to 
know about the internals, but most people just want something that works.  I think that for someone looking
 to learn git you are probably better off just diving in and using it and then maybe using this book or the
 excellent &lt;a href=&quot;http://help.github.com/&quot;&gt;GitHub Help pages&lt;/a&gt; when you get stuck.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I read the book online and it is available for free at
&lt;a href=&quot;http://progit.org/book/&quot;&gt;Pro Git&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apprenticeship Patterns</title>
   <link href="http://mdswanson.com/writeup/2010/10/26/apprenticeship-patterns.html"/>
   <published>2010-10-26T00:00:00+05:30</published>
   <updated>2010-10-26T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/10/26/apprenticeship-patterns</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
The books aims to provide solutions to common problems that inexperienced developers run into – both technical and 
professional.  The over-arching theme is the road to software craftsmanship and how to advance yourself from apprentice
 to journeyman to master.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I thought this book was awesome.  It follows the established “patterns” approach and gives context, problem, solution 
and action items for each section.  So many of the sections have proved really valuable to me already.  The book is new 
enough that all of the suggested action items seemed relevant (things like “write a blog post” or “look at the source 
code on GitHub”).  I especially like the 
&lt;a href=&quot;http://apprenticeship-patterns.labs.oreilly.com/ch05.html#create_feedback_loops&quot;&gt;Create Feedback Loops&lt;/a&gt; and 
&lt;a href=&quot;http://apprenticeship-patterns.labs.oreilly.com/ch02.html#confront_your_ignorance&quot;&gt;Confront Your Ignorance&lt;/a&gt;/
&lt;a href=&quot;http://apprenticeship-patterns.labs.oreilly.com/ch02.html#retreat_into_competence&quot;&gt;Retreat Into Competence&lt;/a&gt; patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
I think the book is aimed towards newer developers, but there is also some value in the book for engineers at any 
stage in their career.  The parts about making your own career roadmap are very helpful and since the path to becoming
 a master is long and winding, I think that most people would get something out of the book.  It is a pretty short 
 (under 200 pages) so you could easily tackle it in a weekend.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I read this entirely on my Kindle and there were no issues.  This book is also available online on &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001813/index.html&quot;&gt;O’Reilly Chimera Labs&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pragmatic Programmer</title>
   <link href="http://mdswanson.com/writeup/2010/10/25/pragmatic-programmer.html"/>
   <published>2010-10-25T00:00:00+05:30</published>
   <updated>2010-10-25T00:00:00+05:30</updated>
   <id>http://swanson.github.com/writeup/2010/10/25/pragmatic-programmer</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What’s the point?&lt;/strong&gt;
Code better.  It is hard to succinctly summarize this book because it is packed with good information.  It is a 
look into the ‘core process’ of software development.  There is a good mix of soft skills such as working on a 
team and career development and technical guidance for writing solid and flexible code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How was it?&lt;/strong&gt;
I read this book with a book club and I really enjoyed it.  Our group had some really good discussions that 
complimented the book well.  It was the perfect book to read during my first months as a &lt;em&gt;real&lt;/em&gt; professional 
developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who should read it?&lt;/strong&gt;
I think it should be given to any new grad upon finishing school, if not sooner – its that good.  Its a classic
that I would recommend to anyone who writes code or manages a software team.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Notes: I switched off between a hard copy and my Kindle; while most of the sections are ebook friendly, there 
are some code snippets that don’t always translate well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Weekly Noise - Week 1</title>
   <link href="http://mdswanson.com/blog/2010/10/24/weekly-noise.html"/>
   <published>2010-10-24T00:00:00+05:30</published>
   <updated>2010-10-24T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/10/24/weekly-noise</id>
   <content type="html">&lt;p&gt;I was recently inspired by &lt;a href=&quot;http://techblog.ironfroggy.com/2010/10/weekly-noise-quiet-before-storm.html&quot;&gt;this post&lt;/a&gt;, which lays out an interesting “discipline” for
working on side-projects.  The basic idea is to set aside time each weekend to plan out what project you are going to work on during the coming week.  Then, after the
week is over, you reflect on what progress you made with a blog post and then write out next week’s plan. Rinse and repeat.&lt;/p&gt;

&lt;p&gt;Since I work on lots of side-projects of my own – and most of them are left in some state of ‘unfinished’ – I think that this might be a good way for me to record what
I learn.  And I always end up with too many projects “open” and then I never actually make progress on any of them so maybe a more structured system can help me stay
focused.&lt;/p&gt;

&lt;p&gt;Lately I have also been struggling with the &lt;code class=&quot;highlighter-rouge&quot;&gt;guilt-vs-motivation&lt;/code&gt; dilemna; I know that working on new projects and exploring technologies is something that I
should be doing for professional development (and I like learning new stuff!) but sometimes I just don’t really feel like doing anything but sitting on the couch all
night.  I start feeling bad when I spend a week without making a github commit or working on that thing I started last weekend.&lt;/p&gt;

&lt;p&gt;So what I have decided to do is add a
time limit to my “Weekly Noise” posts.  I figure that if I have a set time commitment each week, it will be easier for me to stay on track and make me feel less guilty
on those days when I can’t even bring myself to open up &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I was originally planning to start this &lt;em&gt;last&lt;/em&gt; weekend – gotta love procrastination – but now that I have this post written, I will have some accountability.  And now
that I have my GitHub Pages setup, there is no excuse to not do it!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So with that said, here are my goals for this week:&lt;/p&gt;

&lt;p&gt;I’ve got a whole stack of books that I need to do write-ups for:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.pragprog.com/the-pragmatic-programmer&quot;&gt;Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://apprenticeship-patterns.labs.oreilly.com/&quot;&gt;Apprenticeship Patterns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://oreilly.com/catalog/9780596006624/&quot;&gt;Hackers and Painters&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://progit.org/book/&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://gettingreal.37signals.com/toc.php&quot;&gt;Getting Real&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/More-Joel-Software-Occasionally-Developers/dp/1430209879&quot;&gt;More Joel on Software&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;A few more on my Kindle…&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was on a real reading binge for a few weeks…&lt;/p&gt;

&lt;p&gt;Estimated time: 2-3 hours&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello world</title>
   <link href="http://mdswanson.com/blog/2010/10/17/first-post.html"/>
   <published>2010-10-17T00:00:00+05:30</published>
   <updated>2010-10-17T00:00:00+05:30</updated>
   <id>http://swanson.github.com/blog/2010/10/17/first-post</id>
   <content type="html">&lt;p&gt;I finally got around to setting up GitHub pages (and then the GitHub server promptly decided to start having issues…making me think that I was a complete failure).&lt;/p&gt;

&lt;p&gt;But, now everything seems to be working!&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
